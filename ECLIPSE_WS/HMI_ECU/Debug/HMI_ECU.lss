
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021c  00800060  00003d78  00003e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080027c  0080027c  00004028  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fa  00000000  00000000  00006860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  00007bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002795  00000000  00000000  00007de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b4  00000000  00000000  0000a57e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001187  00000000  00000000  0000b832  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000033f  00000000  00000000  0000cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001806  00000000  00000000  0000cebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <main>
      8a:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     3b2:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__udivdi3>:
     3de:	ae e5       	ldi	r26, 0x5E	; 94
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
     3ea:	a8 e0       	ldi	r26, 0x08	; 8
     3ec:	4e 01       	movw	r8, r28
     3ee:	08 94       	sec
     3f0:	81 1c       	adc	r8, r1
     3f2:	91 1c       	adc	r9, r1
     3f4:	f4 01       	movw	r30, r8
     3f6:	6a 2e       	mov	r6, r26
     3f8:	11 92       	st	Z+, r1
     3fa:	6a 94       	dec	r6
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <__udivdi3+0x1a>
     3fe:	29 83       	std	Y+1, r18	; 0x01
     400:	3a 83       	std	Y+2, r19	; 0x02
     402:	4b 83       	std	Y+3, r20	; 0x03
     404:	5c 83       	std	Y+4, r21	; 0x04
     406:	6d 83       	std	Y+5, r22	; 0x05
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	8f 83       	std	Y+7, r24	; 0x07
     40c:	98 87       	std	Y+8, r25	; 0x08
     40e:	ce 01       	movw	r24, r28
     410:	09 96       	adiw	r24, 0x09	; 9
     412:	fc 01       	movw	r30, r24
     414:	11 92       	st	Z+, r1
     416:	aa 95       	dec	r26
     418:	e9 f7       	brne	.-6      	; 0x414 <__udivdi3+0x36>
     41a:	a9 86       	std	Y+9, r10	; 0x09
     41c:	ba 86       	std	Y+10, r11	; 0x0a
     41e:	cb 86       	std	Y+11, r12	; 0x0b
     420:	dc 86       	std	Y+12, r13	; 0x0c
     422:	ed 86       	std	Y+13, r14	; 0x0d
     424:	fe 86       	std	Y+14, r15	; 0x0e
     426:	0f 87       	std	Y+15, r16	; 0x0f
     428:	18 8b       	std	Y+16, r17	; 0x10
     42a:	29 84       	ldd	r2, Y+9	; 0x09
     42c:	3a 84       	ldd	r3, Y+10	; 0x0a
     42e:	4b 84       	ldd	r4, Y+11	; 0x0b
     430:	5c 84       	ldd	r5, Y+12	; 0x0c
     432:	ed 84       	ldd	r14, Y+13	; 0x0d
     434:	fe 84       	ldd	r15, Y+14	; 0x0e
     436:	0f 85       	ldd	r16, Y+15	; 0x0f
     438:	18 89       	ldd	r17, Y+16	; 0x10
     43a:	69 80       	ldd	r6, Y+1	; 0x01
     43c:	7a 80       	ldd	r7, Y+2	; 0x02
     43e:	8b 80       	ldd	r8, Y+3	; 0x03
     440:	9c 80       	ldd	r9, Y+4	; 0x04
     442:	6d a6       	std	Y+45, r6	; 0x2d
     444:	7e a6       	std	Y+46, r7	; 0x2e
     446:	8f a6       	std	Y+47, r8	; 0x2f
     448:	98 aa       	std	Y+48, r9	; 0x30
     44a:	6d 80       	ldd	r6, Y+5	; 0x05
     44c:	7e 80       	ldd	r7, Y+6	; 0x06
     44e:	8f 80       	ldd	r8, Y+7	; 0x07
     450:	98 84       	ldd	r9, Y+8	; 0x08
     452:	e1 14       	cp	r14, r1
     454:	f1 04       	cpc	r15, r1
     456:	01 05       	cpc	r16, r1
     458:	11 05       	cpc	r17, r1
     45a:	09 f0       	breq	.+2      	; 0x45e <__udivdi3+0x80>
     45c:	b3 c3       	rjmp	.+1894   	; 0xbc4 <__stack+0x765>
     45e:	62 14       	cp	r6, r2
     460:	73 04       	cpc	r7, r3
     462:	84 04       	cpc	r8, r4
     464:	95 04       	cpc	r9, r5
     466:	08 f0       	brcs	.+2      	; 0x46a <__stack+0xb>
     468:	3d c1       	rjmp	.+634    	; 0x6e4 <__stack+0x285>
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	20 16       	cp	r2, r16
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	30 06       	cpc	r3, r16
     472:	01 e0       	ldi	r16, 0x01	; 1
     474:	40 06       	cpc	r4, r16
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	50 06       	cpc	r5, r16
     47a:	88 f4       	brcc	.+34     	; 0x49e <__stack+0x3f>
     47c:	1f ef       	ldi	r17, 0xFF	; 255
     47e:	21 16       	cp	r2, r17
     480:	31 04       	cpc	r3, r1
     482:	41 04       	cpc	r4, r1
     484:	51 04       	cpc	r5, r1
     486:	39 f0       	breq	.+14     	; 0x496 <__stack+0x37>
     488:	30 f0       	brcs	.+12     	; 0x496 <__stack+0x37>
     48a:	48 e0       	ldi	r20, 0x08	; 8
     48c:	e4 2e       	mov	r14, r20
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	18 c0       	rjmp	.+48     	; 0x4c6 <__stack+0x67>
     496:	ee 24       	eor	r14, r14
     498:	ff 24       	eor	r15, r15
     49a:	87 01       	movw	r16, r14
     49c:	14 c0       	rjmp	.+40     	; 0x4c6 <__stack+0x67>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	22 16       	cp	r2, r18
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	32 06       	cpc	r3, r18
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	42 06       	cpc	r4, r18
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	52 06       	cpc	r5, r18
     4ae:	30 f0       	brcs	.+12     	; 0x4bc <__stack+0x5d>
     4b0:	38 e1       	ldi	r19, 0x18	; 24
     4b2:	e3 2e       	mov	r14, r19
     4b4:	f1 2c       	mov	r15, r1
     4b6:	01 2d       	mov	r16, r1
     4b8:	11 2d       	mov	r17, r1
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__stack+0x67>
     4bc:	20 e1       	ldi	r18, 0x10	; 16
     4be:	e2 2e       	mov	r14, r18
     4c0:	f1 2c       	mov	r15, r1
     4c2:	01 2d       	mov	r16, r1
     4c4:	11 2d       	mov	r17, r1
     4c6:	d2 01       	movw	r26, r4
     4c8:	c1 01       	movw	r24, r2
     4ca:	0e 2c       	mov	r0, r14
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__stack+0x77>
     4ce:	b6 95       	lsr	r27
     4d0:	a7 95       	ror	r26
     4d2:	97 95       	ror	r25
     4d4:	87 95       	ror	r24
     4d6:	0a 94       	dec	r0
     4d8:	d2 f7       	brpl	.-12     	; 0x4ce <__stack+0x6f>
     4da:	88 59       	subi	r24, 0x98	; 152
     4dc:	9e 4f       	sbci	r25, 0xFE	; 254
     4de:	dc 01       	movw	r26, r24
     4e0:	2c 91       	ld	r18, X
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	8e 19       	sub	r24, r14
     4ec:	9f 09       	sbc	r25, r15
     4ee:	a0 0b       	sbc	r26, r16
     4f0:	b1 0b       	sbc	r27, r17
     4f2:	7c 01       	movw	r14, r24
     4f4:	8d 01       	movw	r16, r26
     4f6:	e2 1a       	sub	r14, r18
     4f8:	f1 08       	sbc	r15, r1
     4fa:	01 09       	sbc	r16, r1
     4fc:	11 09       	sbc	r17, r1
     4fe:	e1 14       	cp	r14, r1
     500:	f1 04       	cpc	r15, r1
     502:	01 05       	cpc	r16, r1
     504:	11 05       	cpc	r17, r1
     506:	a1 f1       	breq	.+104    	; 0x570 <__stack+0x111>
     508:	0e 2c       	mov	r0, r14
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__stack+0xb5>
     50c:	22 0c       	add	r2, r2
     50e:	33 1c       	adc	r3, r3
     510:	44 1c       	adc	r4, r4
     512:	55 1c       	adc	r5, r5
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <__stack+0xad>
     518:	a4 01       	movw	r20, r8
     51a:	93 01       	movw	r18, r6
     51c:	0e 2c       	mov	r0, r14
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__stack+0xc9>
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	44 1f       	adc	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	0a 94       	dec	r0
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__stack+0xc1>
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	8e 19       	sub	r24, r14
     532:	9f 09       	sbc	r25, r15
     534:	6d a4       	ldd	r6, Y+45	; 0x2d
     536:	7e a4       	ldd	r7, Y+46	; 0x2e
     538:	8f a4       	ldd	r8, Y+47	; 0x2f
     53a:	98 a8       	ldd	r9, Y+48	; 0x30
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__stack+0xe7>
     53e:	96 94       	lsr	r9
     540:	87 94       	ror	r8
     542:	77 94       	ror	r7
     544:	67 94       	ror	r6
     546:	8a 95       	dec	r24
     548:	d2 f7       	brpl	.-12     	; 0x53e <__stack+0xdf>
     54a:	62 2a       	or	r6, r18
     54c:	73 2a       	or	r7, r19
     54e:	84 2a       	or	r8, r20
     550:	95 2a       	or	r9, r21
     552:	ad a4       	ldd	r10, Y+45	; 0x2d
     554:	be a4       	ldd	r11, Y+46	; 0x2e
     556:	cf a4       	ldd	r12, Y+47	; 0x2f
     558:	d8 a8       	ldd	r13, Y+48	; 0x30
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__stack+0x105>
     55c:	aa 0c       	add	r10, r10
     55e:	bb 1c       	adc	r11, r11
     560:	cc 1c       	adc	r12, r12
     562:	dd 1c       	adc	r13, r13
     564:	ea 94       	dec	r14
     566:	d2 f7       	brpl	.-12     	; 0x55c <__stack+0xfd>
     568:	ad a6       	std	Y+45, r10	; 0x2d
     56a:	be a6       	std	Y+46, r11	; 0x2e
     56c:	cf a6       	std	Y+47, r12	; 0x2f
     56e:	d8 aa       	std	Y+48, r13	; 0x30
     570:	62 01       	movw	r12, r4
     572:	ee 24       	eor	r14, r14
     574:	ff 24       	eor	r15, r15
     576:	cd aa       	std	Y+53, r12	; 0x35
     578:	de aa       	std	Y+54, r13	; 0x36
     57a:	ef aa       	std	Y+55, r14	; 0x37
     57c:	f8 ae       	std	Y+56, r15	; 0x38
     57e:	92 01       	movw	r18, r4
     580:	81 01       	movw	r16, r2
     582:	20 70       	andi	r18, 0x00	; 0
     584:	30 70       	andi	r19, 0x00	; 0
     586:	09 af       	std	Y+57, r16	; 0x39
     588:	1a af       	std	Y+58, r17	; 0x3a
     58a:	2b af       	std	Y+59, r18	; 0x3b
     58c:	3c af       	std	Y+60, r19	; 0x3c
     58e:	c4 01       	movw	r24, r8
     590:	b3 01       	movw	r22, r6
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     59a:	7b 01       	movw	r14, r22
     59c:	8c 01       	movw	r16, r24
     59e:	c4 01       	movw	r24, r8
     5a0:	b3 01       	movw	r22, r6
     5a2:	2d a9       	ldd	r18, Y+53	; 0x35
     5a4:	3e a9       	ldd	r19, Y+54	; 0x36
     5a6:	4f a9       	ldd	r20, Y+55	; 0x37
     5a8:	58 ad       	ldd	r21, Y+56	; 0x38
     5aa:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     5ae:	c9 01       	movw	r24, r18
     5b0:	da 01       	movw	r26, r20
     5b2:	3c 01       	movw	r6, r24
     5b4:	4d 01       	movw	r8, r26
     5b6:	c4 01       	movw	r24, r8
     5b8:	b3 01       	movw	r22, r6
     5ba:	29 ad       	ldd	r18, Y+57	; 0x39
     5bc:	3a ad       	ldd	r19, Y+58	; 0x3a
     5be:	4b ad       	ldd	r20, Y+59	; 0x3b
     5c0:	5c ad       	ldd	r21, Y+60	; 0x3c
     5c2:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	87 01       	movw	r16, r14
     5cc:	ff 24       	eor	r15, r15
     5ce:	ee 24       	eor	r14, r14
     5d0:	ad a4       	ldd	r10, Y+45	; 0x2d
     5d2:	be a4       	ldd	r11, Y+46	; 0x2e
     5d4:	cf a4       	ldd	r12, Y+47	; 0x2f
     5d6:	d8 a8       	ldd	r13, Y+48	; 0x30
     5d8:	c6 01       	movw	r24, r12
     5da:	aa 27       	eor	r26, r26
     5dc:	bb 27       	eor	r27, r27
     5de:	57 01       	movw	r10, r14
     5e0:	68 01       	movw	r12, r16
     5e2:	a8 2a       	or	r10, r24
     5e4:	b9 2a       	or	r11, r25
     5e6:	ca 2a       	or	r12, r26
     5e8:	db 2a       	or	r13, r27
     5ea:	a2 16       	cp	r10, r18
     5ec:	b3 06       	cpc	r11, r19
     5ee:	c4 06       	cpc	r12, r20
     5f0:	d5 06       	cpc	r13, r21
     5f2:	e0 f4       	brcc	.+56     	; 0x62c <__stack+0x1cd>
     5f4:	08 94       	sec
     5f6:	61 08       	sbc	r6, r1
     5f8:	71 08       	sbc	r7, r1
     5fa:	81 08       	sbc	r8, r1
     5fc:	91 08       	sbc	r9, r1
     5fe:	a2 0c       	add	r10, r2
     600:	b3 1c       	adc	r11, r3
     602:	c4 1c       	adc	r12, r4
     604:	d5 1c       	adc	r13, r5
     606:	a2 14       	cp	r10, r2
     608:	b3 04       	cpc	r11, r3
     60a:	c4 04       	cpc	r12, r4
     60c:	d5 04       	cpc	r13, r5
     60e:	70 f0       	brcs	.+28     	; 0x62c <__stack+0x1cd>
     610:	a2 16       	cp	r10, r18
     612:	b3 06       	cpc	r11, r19
     614:	c4 06       	cpc	r12, r20
     616:	d5 06       	cpc	r13, r21
     618:	48 f4       	brcc	.+18     	; 0x62c <__stack+0x1cd>
     61a:	08 94       	sec
     61c:	61 08       	sbc	r6, r1
     61e:	71 08       	sbc	r7, r1
     620:	81 08       	sbc	r8, r1
     622:	91 08       	sbc	r9, r1
     624:	a2 0c       	add	r10, r2
     626:	b3 1c       	adc	r11, r3
     628:	c4 1c       	adc	r12, r4
     62a:	d5 1c       	adc	r13, r5
     62c:	a2 1a       	sub	r10, r18
     62e:	b3 0a       	sbc	r11, r19
     630:	c4 0a       	sbc	r12, r20
     632:	d5 0a       	sbc	r13, r21
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	2d a9       	ldd	r18, Y+53	; 0x35
     63a:	3e a9       	ldd	r19, Y+54	; 0x36
     63c:	4f a9       	ldd	r20, Y+55	; 0x37
     63e:	58 ad       	ldd	r21, Y+56	; 0x38
     640:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     644:	7b 01       	movw	r14, r22
     646:	8c 01       	movw	r16, r24
     648:	c6 01       	movw	r24, r12
     64a:	b5 01       	movw	r22, r10
     64c:	2d a9       	ldd	r18, Y+53	; 0x35
     64e:	3e a9       	ldd	r19, Y+54	; 0x36
     650:	4f a9       	ldd	r20, Y+55	; 0x37
     652:	58 ad       	ldd	r21, Y+56	; 0x38
     654:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     658:	c9 01       	movw	r24, r18
     65a:	da 01       	movw	r26, r20
     65c:	5c 01       	movw	r10, r24
     65e:	6d 01       	movw	r12, r26
     660:	c6 01       	movw	r24, r12
     662:	b5 01       	movw	r22, r10
     664:	29 ad       	ldd	r18, Y+57	; 0x39
     666:	3a ad       	ldd	r19, Y+58	; 0x3a
     668:	4b ad       	ldd	r20, Y+59	; 0x3b
     66a:	5c ad       	ldd	r21, Y+60	; 0x3c
     66c:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	87 01       	movw	r16, r14
     676:	ff 24       	eor	r15, r15
     678:	ee 24       	eor	r14, r14
     67a:	8d a5       	ldd	r24, Y+45	; 0x2d
     67c:	9e a5       	ldd	r25, Y+46	; 0x2e
     67e:	af a5       	ldd	r26, Y+47	; 0x2f
     680:	b8 a9       	ldd	r27, Y+48	; 0x30
     682:	a0 70       	andi	r26, 0x00	; 0
     684:	b0 70       	andi	r27, 0x00	; 0
     686:	e8 2a       	or	r14, r24
     688:	f9 2a       	or	r15, r25
     68a:	0a 2b       	or	r16, r26
     68c:	1b 2b       	or	r17, r27
     68e:	e2 16       	cp	r14, r18
     690:	f3 06       	cpc	r15, r19
     692:	04 07       	cpc	r16, r20
     694:	15 07       	cpc	r17, r21
     696:	c0 f4       	brcc	.+48     	; 0x6c8 <__stack+0x269>
     698:	08 94       	sec
     69a:	a1 08       	sbc	r10, r1
     69c:	b1 08       	sbc	r11, r1
     69e:	c1 08       	sbc	r12, r1
     6a0:	d1 08       	sbc	r13, r1
     6a2:	e2 0c       	add	r14, r2
     6a4:	f3 1c       	adc	r15, r3
     6a6:	04 1d       	adc	r16, r4
     6a8:	15 1d       	adc	r17, r5
     6aa:	e2 14       	cp	r14, r2
     6ac:	f3 04       	cpc	r15, r3
     6ae:	04 05       	cpc	r16, r4
     6b0:	15 05       	cpc	r17, r5
     6b2:	50 f0       	brcs	.+20     	; 0x6c8 <__stack+0x269>
     6b4:	e2 16       	cp	r14, r18
     6b6:	f3 06       	cpc	r15, r19
     6b8:	04 07       	cpc	r16, r20
     6ba:	15 07       	cpc	r17, r21
     6bc:	28 f4       	brcc	.+10     	; 0x6c8 <__stack+0x269>
     6be:	08 94       	sec
     6c0:	a1 08       	sbc	r10, r1
     6c2:	b1 08       	sbc	r11, r1
     6c4:	c1 08       	sbc	r12, r1
     6c6:	d1 08       	sbc	r13, r1
     6c8:	d3 01       	movw	r26, r6
     6ca:	99 27       	eor	r25, r25
     6cc:	88 27       	eor	r24, r24
     6ce:	86 01       	movw	r16, r12
     6d0:	75 01       	movw	r14, r10
     6d2:	e8 2a       	or	r14, r24
     6d4:	f9 2a       	or	r15, r25
     6d6:	0a 2b       	or	r16, r26
     6d8:	1b 2b       	or	r17, r27
     6da:	e9 aa       	std	Y+49, r14	; 0x31
     6dc:	fa aa       	std	Y+50, r15	; 0x32
     6de:	0b ab       	std	Y+51, r16	; 0x33
     6e0:	1c ab       	std	Y+52, r17	; 0x34
     6e2:	cf c4       	rjmp	.+2462   	; 0x1082 <__stack+0xc23>
     6e4:	21 14       	cp	r2, r1
     6e6:	31 04       	cpc	r3, r1
     6e8:	41 04       	cpc	r4, r1
     6ea:	51 04       	cpc	r5, r1
     6ec:	71 f4       	brne	.+28     	; 0x70a <__stack+0x2ab>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     702:	c9 01       	movw	r24, r18
     704:	da 01       	movw	r26, r20
     706:	1c 01       	movw	r2, r24
     708:	2d 01       	movw	r4, r26
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 16       	cp	r2, r16
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	30 06       	cpc	r3, r16
     712:	01 e0       	ldi	r16, 0x01	; 1
     714:	40 06       	cpc	r4, r16
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	50 06       	cpc	r5, r16
     71a:	88 f4       	brcc	.+34     	; 0x73e <__stack+0x2df>
     71c:	1f ef       	ldi	r17, 0xFF	; 255
     71e:	21 16       	cp	r2, r17
     720:	31 04       	cpc	r3, r1
     722:	41 04       	cpc	r4, r1
     724:	51 04       	cpc	r5, r1
     726:	31 f0       	breq	.+12     	; 0x734 <__stack+0x2d5>
     728:	28 f0       	brcs	.+10     	; 0x734 <__stack+0x2d5>
     72a:	48 e0       	ldi	r20, 0x08	; 8
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	17 c0       	rjmp	.+46     	; 0x762 <__stack+0x303>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	12 c0       	rjmp	.+36     	; 0x762 <__stack+0x303>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	22 16       	cp	r2, r18
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	32 06       	cpc	r3, r18
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	42 06       	cpc	r4, r18
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	52 06       	cpc	r5, r18
     74e:	28 f0       	brcs	.+10     	; 0x75a <__stack+0x2fb>
     750:	48 e1       	ldi	r20, 0x18	; 24
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	04 c0       	rjmp	.+8      	; 0x762 <__stack+0x303>
     75a:	40 e1       	ldi	r20, 0x10	; 16
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	d2 01       	movw	r26, r4
     764:	c1 01       	movw	r24, r2
     766:	04 2e       	mov	r0, r20
     768:	04 c0       	rjmp	.+8      	; 0x772 <__stack+0x313>
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	0a 94       	dec	r0
     774:	d2 f7       	brpl	.-12     	; 0x76a <__stack+0x30b>
     776:	88 59       	subi	r24, 0x98	; 152
     778:	9e 4f       	sbci	r25, 0xFE	; 254
     77a:	dc 01       	movw	r26, r24
     77c:	2c 91       	ld	r18, X
     77e:	e0 e2       	ldi	r30, 0x20	; 32
     780:	ee 2e       	mov	r14, r30
     782:	f1 2c       	mov	r15, r1
     784:	01 2d       	mov	r16, r1
     786:	11 2d       	mov	r17, r1
     788:	d8 01       	movw	r26, r16
     78a:	c7 01       	movw	r24, r14
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	a6 0b       	sbc	r26, r22
     792:	b7 0b       	sbc	r27, r23
     794:	82 1b       	sub	r24, r18
     796:	91 09       	sbc	r25, r1
     798:	a1 09       	sbc	r26, r1
     79a:	b1 09       	sbc	r27, r1
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	a1 05       	cpc	r26, r1
     7a0:	b1 05       	cpc	r27, r1
     7a2:	61 f4       	brne	.+24     	; 0x7bc <__stack+0x35d>
     7a4:	64 01       	movw	r12, r8
     7a6:	53 01       	movw	r10, r6
     7a8:	a2 18       	sub	r10, r2
     7aa:	b3 08       	sbc	r11, r3
     7ac:	c4 08       	sbc	r12, r4
     7ae:	d5 08       	sbc	r13, r5
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	63 2e       	mov	r6, r19
     7b4:	71 2c       	mov	r7, r1
     7b6:	81 2c       	mov	r8, r1
     7b8:	91 2c       	mov	r9, r1
     7ba:	1e c1       	rjmp	.+572    	; 0x9f8 <__stack+0x599>
     7bc:	6f 96       	adiw	r28, 0x1f	; 31
     7be:	8f af       	std	Y+63, r24	; 0x3f
     7c0:	6f 97       	sbiw	r28, 0x1f	; 31
     7c2:	08 2e       	mov	r0, r24
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__stack+0x36f>
     7c6:	22 0c       	add	r2, r2
     7c8:	33 1c       	adc	r3, r3
     7ca:	44 1c       	adc	r4, r4
     7cc:	55 1c       	adc	r5, r5
     7ce:	0a 94       	dec	r0
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__stack+0x367>
     7d2:	ee 2d       	mov	r30, r14
     7d4:	e8 1b       	sub	r30, r24
     7d6:	64 01       	movw	r12, r8
     7d8:	53 01       	movw	r10, r6
     7da:	0e 2e       	mov	r0, r30
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__stack+0x387>
     7de:	d6 94       	lsr	r13
     7e0:	c7 94       	ror	r12
     7e2:	b7 94       	ror	r11
     7e4:	a7 94       	ror	r10
     7e6:	0a 94       	dec	r0
     7e8:	d2 f7       	brpl	.-12     	; 0x7de <__stack+0x37f>
     7ea:	a4 01       	movw	r20, r8
     7ec:	93 01       	movw	r18, r6
     7ee:	6f 96       	adiw	r28, 0x1f	; 31
     7f0:	0f ac       	ldd	r0, Y+63	; 0x3f
     7f2:	6f 97       	sbiw	r28, 0x1f	; 31
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__stack+0x39f>
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	44 1f       	adc	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	0a 94       	dec	r0
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <__stack+0x397>
     802:	6d a4       	ldd	r6, Y+45	; 0x2d
     804:	7e a4       	ldd	r7, Y+46	; 0x2e
     806:	8f a4       	ldd	r8, Y+47	; 0x2f
     808:	98 a8       	ldd	r9, Y+48	; 0x30
     80a:	0e 2e       	mov	r0, r30
     80c:	04 c0       	rjmp	.+8      	; 0x816 <__stack+0x3b7>
     80e:	96 94       	lsr	r9
     810:	87 94       	ror	r8
     812:	77 94       	ror	r7
     814:	67 94       	ror	r6
     816:	0a 94       	dec	r0
     818:	d2 f7       	brpl	.-12     	; 0x80e <__stack+0x3af>
     81a:	84 01       	movw	r16, r8
     81c:	73 01       	movw	r14, r6
     81e:	e2 2a       	or	r14, r18
     820:	f3 2a       	or	r15, r19
     822:	04 2b       	or	r16, r20
     824:	15 2b       	or	r17, r21
     826:	e9 a6       	std	Y+41, r14	; 0x29
     828:	fa a6       	std	Y+42, r15	; 0x2a
     82a:	0b a7       	std	Y+43, r16	; 0x2b
     82c:	1c a7       	std	Y+44, r17	; 0x2c
     82e:	32 01       	movw	r6, r4
     830:	88 24       	eor	r8, r8
     832:	99 24       	eor	r9, r9
     834:	92 01       	movw	r18, r4
     836:	81 01       	movw	r16, r2
     838:	20 70       	andi	r18, 0x00	; 0
     83a:	30 70       	andi	r19, 0x00	; 0
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	0c af       	std	Y+60, r16	; 0x3c
     840:	1d af       	std	Y+61, r17	; 0x3d
     842:	2e af       	std	Y+62, r18	; 0x3e
     844:	3f af       	std	Y+63, r19	; 0x3f
     846:	21 97       	sbiw	r28, 0x01	; 1
     848:	c6 01       	movw	r24, r12
     84a:	b5 01       	movw	r22, r10
     84c:	a4 01       	movw	r20, r8
     84e:	93 01       	movw	r18, r6
     850:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     854:	7b 01       	movw	r14, r22
     856:	8c 01       	movw	r16, r24
     858:	c6 01       	movw	r24, r12
     85a:	b5 01       	movw	r22, r10
     85c:	a4 01       	movw	r20, r8
     85e:	93 01       	movw	r18, r6
     860:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     864:	c9 01       	movw	r24, r18
     866:	da 01       	movw	r26, r20
     868:	25 96       	adiw	r28, 0x05	; 5
     86a:	8c af       	std	Y+60, r24	; 0x3c
     86c:	9d af       	std	Y+61, r25	; 0x3d
     86e:	ae af       	std	Y+62, r26	; 0x3e
     870:	bf af       	std	Y+63, r27	; 0x3f
     872:	25 97       	sbiw	r28, 0x05	; 5
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	2c ad       	ldd	r18, Y+60	; 0x3c
     87c:	3d ad       	ldd	r19, Y+61	; 0x3d
     87e:	4e ad       	ldd	r20, Y+62	; 0x3e
     880:	5f ad       	ldd	r21, Y+63	; 0x3f
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	87 01       	movw	r16, r14
     88e:	ff 24       	eor	r15, r15
     890:	ee 24       	eor	r14, r14
     892:	a9 a4       	ldd	r10, Y+41	; 0x29
     894:	ba a4       	ldd	r11, Y+42	; 0x2a
     896:	cb a4       	ldd	r12, Y+43	; 0x2b
     898:	dc a4       	ldd	r13, Y+44	; 0x2c
     89a:	c6 01       	movw	r24, r12
     89c:	aa 27       	eor	r26, r26
     89e:	bb 27       	eor	r27, r27
     8a0:	5c 01       	movw	r10, r24
     8a2:	6d 01       	movw	r12, r26
     8a4:	ae 28       	or	r10, r14
     8a6:	bf 28       	or	r11, r15
     8a8:	c0 2a       	or	r12, r16
     8aa:	d1 2a       	or	r13, r17
     8ac:	a2 16       	cp	r10, r18
     8ae:	b3 06       	cpc	r11, r19
     8b0:	c4 06       	cpc	r12, r20
     8b2:	d5 06       	cpc	r13, r21
     8b4:	60 f5       	brcc	.+88     	; 0x90e <__stack+0x4af>
     8b6:	25 96       	adiw	r28, 0x05	; 5
     8b8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8ba:	7d ad       	ldd	r23, Y+61	; 0x3d
     8bc:	8e ad       	ldd	r24, Y+62	; 0x3e
     8be:	9f ad       	ldd	r25, Y+63	; 0x3f
     8c0:	25 97       	sbiw	r28, 0x05	; 5
     8c2:	61 50       	subi	r22, 0x01	; 1
     8c4:	70 40       	sbci	r23, 0x00	; 0
     8c6:	80 40       	sbci	r24, 0x00	; 0
     8c8:	90 40       	sbci	r25, 0x00	; 0
     8ca:	25 96       	adiw	r28, 0x05	; 5
     8cc:	6c af       	std	Y+60, r22	; 0x3c
     8ce:	7d af       	std	Y+61, r23	; 0x3d
     8d0:	8e af       	std	Y+62, r24	; 0x3e
     8d2:	9f af       	std	Y+63, r25	; 0x3f
     8d4:	25 97       	sbiw	r28, 0x05	; 5
     8d6:	a2 0c       	add	r10, r2
     8d8:	b3 1c       	adc	r11, r3
     8da:	c4 1c       	adc	r12, r4
     8dc:	d5 1c       	adc	r13, r5
     8de:	a2 14       	cp	r10, r2
     8e0:	b3 04       	cpc	r11, r3
     8e2:	c4 04       	cpc	r12, r4
     8e4:	d5 04       	cpc	r13, r5
     8e6:	98 f0       	brcs	.+38     	; 0x90e <__stack+0x4af>
     8e8:	a2 16       	cp	r10, r18
     8ea:	b3 06       	cpc	r11, r19
     8ec:	c4 06       	cpc	r12, r20
     8ee:	d5 06       	cpc	r13, r21
     8f0:	70 f4       	brcc	.+28     	; 0x90e <__stack+0x4af>
     8f2:	61 50       	subi	r22, 0x01	; 1
     8f4:	70 40       	sbci	r23, 0x00	; 0
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	25 96       	adiw	r28, 0x05	; 5
     8fc:	6c af       	std	Y+60, r22	; 0x3c
     8fe:	7d af       	std	Y+61, r23	; 0x3d
     900:	8e af       	std	Y+62, r24	; 0x3e
     902:	9f af       	std	Y+63, r25	; 0x3f
     904:	25 97       	sbiw	r28, 0x05	; 5
     906:	a2 0c       	add	r10, r2
     908:	b3 1c       	adc	r11, r3
     90a:	c4 1c       	adc	r12, r4
     90c:	d5 1c       	adc	r13, r5
     90e:	a2 1a       	sub	r10, r18
     910:	b3 0a       	sbc	r11, r19
     912:	c4 0a       	sbc	r12, r20
     914:	d5 0a       	sbc	r13, r21
     916:	c6 01       	movw	r24, r12
     918:	b5 01       	movw	r22, r10
     91a:	a4 01       	movw	r20, r8
     91c:	93 01       	movw	r18, r6
     91e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	c6 01       	movw	r24, r12
     928:	b5 01       	movw	r22, r10
     92a:	a4 01       	movw	r20, r8
     92c:	93 01       	movw	r18, r6
     92e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	3c 01       	movw	r6, r24
     938:	4d 01       	movw	r8, r26
     93a:	c4 01       	movw	r24, r8
     93c:	b3 01       	movw	r22, r6
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	21 97       	sbiw	r28, 0x01	; 1
     94a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	89 a5       	ldd	r24, Y+41	; 0x29
     95a:	9a a5       	ldd	r25, Y+42	; 0x2a
     95c:	ab a5       	ldd	r26, Y+43	; 0x2b
     95e:	bc a5       	ldd	r27, Y+44	; 0x2c
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	a8 2a       	or	r10, r24
     96a:	b9 2a       	or	r11, r25
     96c:	ca 2a       	or	r12, r26
     96e:	db 2a       	or	r13, r27
     970:	a2 16       	cp	r10, r18
     972:	b3 06       	cpc	r11, r19
     974:	c4 06       	cpc	r12, r20
     976:	d5 06       	cpc	r13, r21
     978:	e0 f4       	brcc	.+56     	; 0x9b2 <__stack+0x553>
     97a:	08 94       	sec
     97c:	61 08       	sbc	r6, r1
     97e:	71 08       	sbc	r7, r1
     980:	81 08       	sbc	r8, r1
     982:	91 08       	sbc	r9, r1
     984:	a2 0c       	add	r10, r2
     986:	b3 1c       	adc	r11, r3
     988:	c4 1c       	adc	r12, r4
     98a:	d5 1c       	adc	r13, r5
     98c:	a2 14       	cp	r10, r2
     98e:	b3 04       	cpc	r11, r3
     990:	c4 04       	cpc	r12, r4
     992:	d5 04       	cpc	r13, r5
     994:	70 f0       	brcs	.+28     	; 0x9b2 <__stack+0x553>
     996:	a2 16       	cp	r10, r18
     998:	b3 06       	cpc	r11, r19
     99a:	c4 06       	cpc	r12, r20
     99c:	d5 06       	cpc	r13, r21
     99e:	48 f4       	brcc	.+18     	; 0x9b2 <__stack+0x553>
     9a0:	08 94       	sec
     9a2:	61 08       	sbc	r6, r1
     9a4:	71 08       	sbc	r7, r1
     9a6:	81 08       	sbc	r8, r1
     9a8:	91 08       	sbc	r9, r1
     9aa:	a2 0c       	add	r10, r2
     9ac:	b3 1c       	adc	r11, r3
     9ae:	c4 1c       	adc	r12, r4
     9b0:	d5 1c       	adc	r13, r5
     9b2:	8d a5       	ldd	r24, Y+45	; 0x2d
     9b4:	9e a5       	ldd	r25, Y+46	; 0x2e
     9b6:	af a5       	ldd	r26, Y+47	; 0x2f
     9b8:	b8 a9       	ldd	r27, Y+48	; 0x30
     9ba:	6f 96       	adiw	r28, 0x1f	; 31
     9bc:	0f ac       	ldd	r0, Y+63	; 0x3f
     9be:	6f 97       	sbiw	r28, 0x1f	; 31
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0x56b>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__stack+0x563>
     9ce:	8d a7       	std	Y+45, r24	; 0x2d
     9d0:	9e a7       	std	Y+46, r25	; 0x2e
     9d2:	af a7       	std	Y+47, r26	; 0x2f
     9d4:	b8 ab       	std	Y+48, r27	; 0x30
     9d6:	a2 1a       	sub	r10, r18
     9d8:	b3 0a       	sbc	r11, r19
     9da:	c4 0a       	sbc	r12, r20
     9dc:	d5 0a       	sbc	r13, r21
     9de:	25 96       	adiw	r28, 0x05	; 5
     9e0:	ec ac       	ldd	r14, Y+60	; 0x3c
     9e2:	fd ac       	ldd	r15, Y+61	; 0x3d
     9e4:	0e ad       	ldd	r16, Y+62	; 0x3e
     9e6:	1f ad       	ldd	r17, Y+63	; 0x3f
     9e8:	25 97       	sbiw	r28, 0x05	; 5
     9ea:	d7 01       	movw	r26, r14
     9ec:	99 27       	eor	r25, r25
     9ee:	88 27       	eor	r24, r24
     9f0:	68 2a       	or	r6, r24
     9f2:	79 2a       	or	r7, r25
     9f4:	8a 2a       	or	r8, r26
     9f6:	9b 2a       	or	r9, r27
     9f8:	82 01       	movw	r16, r4
     9fa:	22 27       	eor	r18, r18
     9fc:	33 27       	eor	r19, r19
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	0c af       	std	Y+60, r16	; 0x3c
     a02:	1d af       	std	Y+61, r17	; 0x3d
     a04:	2e af       	std	Y+62, r18	; 0x3e
     a06:	3f af       	std	Y+63, r19	; 0x3f
     a08:	29 97       	sbiw	r28, 0x09	; 9
     a0a:	a2 01       	movw	r20, r4
     a0c:	91 01       	movw	r18, r2
     a0e:	40 70       	andi	r20, 0x00	; 0
     a10:	50 70       	andi	r21, 0x00	; 0
     a12:	2d 96       	adiw	r28, 0x0d	; 13
     a14:	2c af       	std	Y+60, r18	; 0x3c
     a16:	3d af       	std	Y+61, r19	; 0x3d
     a18:	4e af       	std	Y+62, r20	; 0x3e
     a1a:	5f af       	std	Y+63, r21	; 0x3f
     a1c:	2d 97       	sbiw	r28, 0x0d	; 13
     a1e:	c6 01       	movw	r24, r12
     a20:	b5 01       	movw	r22, r10
     a22:	29 96       	adiw	r28, 0x09	; 9
     a24:	2c ad       	ldd	r18, Y+60	; 0x3c
     a26:	3d ad       	ldd	r19, Y+61	; 0x3d
     a28:	4e ad       	ldd	r20, Y+62	; 0x3e
     a2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
     a36:	c6 01       	movw	r24, r12
     a38:	b5 01       	movw	r22, r10
     a3a:	29 96       	adiw	r28, 0x09	; 9
     a3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a40:	4e ad       	ldd	r20, Y+62	; 0x3e
     a42:	5f ad       	ldd	r21, Y+63	; 0x3f
     a44:	29 97       	sbiw	r28, 0x09	; 9
     a46:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     a4a:	c9 01       	movw	r24, r18
     a4c:	da 01       	movw	r26, r20
     a4e:	61 96       	adiw	r28, 0x11	; 17
     a50:	8c af       	std	Y+60, r24	; 0x3c
     a52:	9d af       	std	Y+61, r25	; 0x3d
     a54:	ae af       	std	Y+62, r26	; 0x3e
     a56:	bf af       	std	Y+63, r27	; 0x3f
     a58:	61 97       	sbiw	r28, 0x11	; 17
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	2d 96       	adiw	r28, 0x0d	; 13
     a60:	2c ad       	ldd	r18, Y+60	; 0x3c
     a62:	3d ad       	ldd	r19, Y+61	; 0x3d
     a64:	4e ad       	ldd	r20, Y+62	; 0x3e
     a66:	5f ad       	ldd	r21, Y+63	; 0x3f
     a68:	2d 97       	sbiw	r28, 0x0d	; 13
     a6a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	87 01       	movw	r16, r14
     a74:	ff 24       	eor	r15, r15
     a76:	ee 24       	eor	r14, r14
     a78:	ad a4       	ldd	r10, Y+45	; 0x2d
     a7a:	be a4       	ldd	r11, Y+46	; 0x2e
     a7c:	cf a4       	ldd	r12, Y+47	; 0x2f
     a7e:	d8 a8       	ldd	r13, Y+48	; 0x30
     a80:	c6 01       	movw	r24, r12
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	57 01       	movw	r10, r14
     a88:	68 01       	movw	r12, r16
     a8a:	a8 2a       	or	r10, r24
     a8c:	b9 2a       	or	r11, r25
     a8e:	ca 2a       	or	r12, r26
     a90:	db 2a       	or	r13, r27
     a92:	a2 16       	cp	r10, r18
     a94:	b3 06       	cpc	r11, r19
     a96:	c4 06       	cpc	r12, r20
     a98:	d5 06       	cpc	r13, r21
     a9a:	60 f5       	brcc	.+88     	; 0xaf4 <__stack+0x695>
     a9c:	61 96       	adiw	r28, 0x11	; 17
     a9e:	6c ad       	ldd	r22, Y+60	; 0x3c
     aa0:	7d ad       	ldd	r23, Y+61	; 0x3d
     aa2:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa4:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa6:	61 97       	sbiw	r28, 0x11	; 17
     aa8:	61 50       	subi	r22, 0x01	; 1
     aaa:	70 40       	sbci	r23, 0x00	; 0
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	61 96       	adiw	r28, 0x11	; 17
     ab2:	6c af       	std	Y+60, r22	; 0x3c
     ab4:	7d af       	std	Y+61, r23	; 0x3d
     ab6:	8e af       	std	Y+62, r24	; 0x3e
     ab8:	9f af       	std	Y+63, r25	; 0x3f
     aba:	61 97       	sbiw	r28, 0x11	; 17
     abc:	a2 0c       	add	r10, r2
     abe:	b3 1c       	adc	r11, r3
     ac0:	c4 1c       	adc	r12, r4
     ac2:	d5 1c       	adc	r13, r5
     ac4:	a2 14       	cp	r10, r2
     ac6:	b3 04       	cpc	r11, r3
     ac8:	c4 04       	cpc	r12, r4
     aca:	d5 04       	cpc	r13, r5
     acc:	98 f0       	brcs	.+38     	; 0xaf4 <__stack+0x695>
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <__stack+0x695>
     ad8:	61 50       	subi	r22, 0x01	; 1
     ada:	70 40       	sbci	r23, 0x00	; 0
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	61 96       	adiw	r28, 0x11	; 17
     ae2:	6c af       	std	Y+60, r22	; 0x3c
     ae4:	7d af       	std	Y+61, r23	; 0x3d
     ae6:	8e af       	std	Y+62, r24	; 0x3e
     ae8:	9f af       	std	Y+63, r25	; 0x3f
     aea:	61 97       	sbiw	r28, 0x11	; 17
     aec:	a2 0c       	add	r10, r2
     aee:	b3 1c       	adc	r11, r3
     af0:	c4 1c       	adc	r12, r4
     af2:	d5 1c       	adc	r13, r5
     af4:	a2 1a       	sub	r10, r18
     af6:	b3 0a       	sbc	r11, r19
     af8:	c4 0a       	sbc	r12, r20
     afa:	d5 0a       	sbc	r13, r21
     afc:	c6 01       	movw	r24, r12
     afe:	b5 01       	movw	r22, r10
     b00:	29 96       	adiw	r28, 0x09	; 9
     b02:	2c ad       	ldd	r18, Y+60	; 0x3c
     b04:	3d ad       	ldd	r19, Y+61	; 0x3d
     b06:	4e ad       	ldd	r20, Y+62	; 0x3e
     b08:	5f ad       	ldd	r21, Y+63	; 0x3f
     b0a:	29 97       	sbiw	r28, 0x09	; 9
     b0c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	c6 01       	movw	r24, r12
     b16:	b5 01       	movw	r22, r10
     b18:	29 96       	adiw	r28, 0x09	; 9
     b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b20:	5f ad       	ldd	r21, Y+63	; 0x3f
     b22:	29 97       	sbiw	r28, 0x09	; 9
     b24:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     b28:	c9 01       	movw	r24, r18
     b2a:	da 01       	movw	r26, r20
     b2c:	5c 01       	movw	r10, r24
     b2e:	6d 01       	movw	r12, r26
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	2d 96       	adiw	r28, 0x0d	; 13
     b36:	2c ad       	ldd	r18, Y+60	; 0x3c
     b38:	3d ad       	ldd	r19, Y+61	; 0x3d
     b3a:	4e ad       	ldd	r20, Y+62	; 0x3e
     b3c:	5f ad       	ldd	r21, Y+63	; 0x3f
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	87 01       	movw	r16, r14
     b4a:	ff 24       	eor	r15, r15
     b4c:	ee 24       	eor	r14, r14
     b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
     b50:	9e a5       	ldd	r25, Y+46	; 0x2e
     b52:	af a5       	ldd	r26, Y+47	; 0x2f
     b54:	b8 a9       	ldd	r27, Y+48	; 0x30
     b56:	a0 70       	andi	r26, 0x00	; 0
     b58:	b0 70       	andi	r27, 0x00	; 0
     b5a:	e8 2a       	or	r14, r24
     b5c:	f9 2a       	or	r15, r25
     b5e:	0a 2b       	or	r16, r26
     b60:	1b 2b       	or	r17, r27
     b62:	e2 16       	cp	r14, r18
     b64:	f3 06       	cpc	r15, r19
     b66:	04 07       	cpc	r16, r20
     b68:	15 07       	cpc	r17, r21
     b6a:	c0 f4       	brcc	.+48     	; 0xb9c <__stack+0x73d>
     b6c:	08 94       	sec
     b6e:	a1 08       	sbc	r10, r1
     b70:	b1 08       	sbc	r11, r1
     b72:	c1 08       	sbc	r12, r1
     b74:	d1 08       	sbc	r13, r1
     b76:	e2 0c       	add	r14, r2
     b78:	f3 1c       	adc	r15, r3
     b7a:	04 1d       	adc	r16, r4
     b7c:	15 1d       	adc	r17, r5
     b7e:	e2 14       	cp	r14, r2
     b80:	f3 04       	cpc	r15, r3
     b82:	04 05       	cpc	r16, r4
     b84:	15 05       	cpc	r17, r5
     b86:	50 f0       	brcs	.+20     	; 0xb9c <__stack+0x73d>
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	28 f4       	brcc	.+10     	; 0xb9c <__stack+0x73d>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	61 96       	adiw	r28, 0x11	; 17
     b9e:	ec ac       	ldd	r14, Y+60	; 0x3c
     ba0:	fd ac       	ldd	r15, Y+61	; 0x3d
     ba2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ba4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ba6:	61 97       	sbiw	r28, 0x11	; 17
     ba8:	d7 01       	movw	r26, r14
     baa:	99 27       	eor	r25, r25
     bac:	88 27       	eor	r24, r24
     bae:	96 01       	movw	r18, r12
     bb0:	85 01       	movw	r16, r10
     bb2:	08 2b       	or	r16, r24
     bb4:	19 2b       	or	r17, r25
     bb6:	2a 2b       	or	r18, r26
     bb8:	3b 2b       	or	r19, r27
     bba:	09 ab       	std	Y+49, r16	; 0x31
     bbc:	1a ab       	std	Y+50, r17	; 0x32
     bbe:	2b ab       	std	Y+51, r18	; 0x33
     bc0:	3c ab       	std	Y+52, r19	; 0x34
     bc2:	62 c2       	rjmp	.+1220   	; 0x1088 <__stack+0xc29>
     bc4:	6e 14       	cp	r6, r14
     bc6:	7f 04       	cpc	r7, r15
     bc8:	80 06       	cpc	r8, r16
     bca:	91 06       	cpc	r9, r17
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__stack+0x771>
     bce:	51 c2       	rjmp	.+1186   	; 0x1072 <__stack+0xc13>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	e2 16       	cp	r14, r18
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	f2 06       	cpc	r15, r18
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	02 07       	cpc	r16, r18
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	12 07       	cpc	r17, r18
     be0:	88 f4       	brcc	.+34     	; 0xc04 <__stack+0x7a5>
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	e3 16       	cp	r14, r19
     be6:	f1 04       	cpc	r15, r1
     be8:	01 05       	cpc	r16, r1
     bea:	11 05       	cpc	r17, r1
     bec:	31 f0       	breq	.+12     	; 0xbfa <__stack+0x79b>
     bee:	28 f0       	brcs	.+10     	; 0xbfa <__stack+0x79b>
     bf0:	48 e0       	ldi	r20, 0x08	; 8
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <__stack+0x7c9>
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <__stack+0x7c9>
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	e4 16       	cp	r14, r20
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	f4 06       	cpc	r15, r20
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	04 07       	cpc	r16, r20
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	14 07       	cpc	r17, r20
     c14:	28 f0       	brcs	.+10     	; 0xc20 <__stack+0x7c1>
     c16:	48 e1       	ldi	r20, 0x18	; 24
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__stack+0x7c9>
     c20:	40 e1       	ldi	r20, 0x10	; 16
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	d8 01       	movw	r26, r16
     c2a:	c7 01       	movw	r24, r14
     c2c:	04 2e       	mov	r0, r20
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__stack+0x7d9>
     c30:	b6 95       	lsr	r27
     c32:	a7 95       	ror	r26
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__stack+0x7d1>
     c3c:	88 59       	subi	r24, 0x98	; 152
     c3e:	9e 4f       	sbci	r25, 0xFE	; 254
     c40:	dc 01       	movw	r26, r24
     c42:	2c 91       	ld	r18, X
     c44:	30 e2       	ldi	r19, 0x20	; 32
     c46:	a3 2e       	mov	r10, r19
     c48:	b1 2c       	mov	r11, r1
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	d6 01       	movw	r26, r12
     c50:	c5 01       	movw	r24, r10
     c52:	84 1b       	sub	r24, r20
     c54:	95 0b       	sbc	r25, r21
     c56:	a6 0b       	sbc	r26, r22
     c58:	b7 0b       	sbc	r27, r23
     c5a:	82 1b       	sub	r24, r18
     c5c:	91 09       	sbc	r25, r1
     c5e:	a1 09       	sbc	r26, r1
     c60:	b1 09       	sbc	r27, r1
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
     c68:	89 f4       	brne	.+34     	; 0xc8c <__stack+0x82d>
     c6a:	e6 14       	cp	r14, r6
     c6c:	f7 04       	cpc	r15, r7
     c6e:	08 05       	cpc	r16, r8
     c70:	19 05       	cpc	r17, r9
     c72:	08 f4       	brcc	.+2      	; 0xc76 <__stack+0x817>
     c74:	f2 c1       	rjmp	.+996    	; 0x105a <__stack+0xbfb>
     c76:	6d a4       	ldd	r6, Y+45	; 0x2d
     c78:	7e a4       	ldd	r7, Y+46	; 0x2e
     c7a:	8f a4       	ldd	r8, Y+47	; 0x2f
     c7c:	98 a8       	ldd	r9, Y+48	; 0x30
     c7e:	62 14       	cp	r6, r2
     c80:	73 04       	cpc	r7, r3
     c82:	84 04       	cpc	r8, r4
     c84:	95 04       	cpc	r9, r5
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__stack+0x82b>
     c88:	e8 c1       	rjmp	.+976    	; 0x105a <__stack+0xbfb>
     c8a:	f3 c1       	rjmp	.+998    	; 0x1072 <__stack+0xc13>
     c8c:	6e 96       	adiw	r28, 0x1e	; 30
     c8e:	8f af       	std	Y+63, r24	; 0x3f
     c90:	6e 97       	sbiw	r28, 0x1e	; 30
     c92:	08 2e       	mov	r0, r24
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x83f>
     c96:	ee 0c       	add	r14, r14
     c98:	ff 1c       	adc	r15, r15
     c9a:	00 1f       	adc	r16, r16
     c9c:	11 1f       	adc	r17, r17
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x837>
     ca2:	6a 2d       	mov	r22, r10
     ca4:	68 1b       	sub	r22, r24
     ca6:	d2 01       	movw	r26, r4
     ca8:	c1 01       	movw	r24, r2
     caa:	06 2e       	mov	r0, r22
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__stack+0x857>
     cae:	b6 95       	lsr	r27
     cb0:	a7 95       	ror	r26
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	0a 94       	dec	r0
     cb8:	d2 f7       	brpl	.-12     	; 0xcae <__stack+0x84f>
     cba:	5c 01       	movw	r10, r24
     cbc:	6d 01       	movw	r12, r26
     cbe:	ae 28       	or	r10, r14
     cc0:	bf 28       	or	r11, r15
     cc2:	c0 2a       	or	r12, r16
     cc4:	d1 2a       	or	r13, r17
     cc6:	ad a2       	std	Y+37, r10	; 0x25
     cc8:	be a2       	std	Y+38, r11	; 0x26
     cca:	cf a2       	std	Y+39, r12	; 0x27
     ccc:	d8 a6       	std	Y+40, r13	; 0x28
     cce:	72 01       	movw	r14, r4
     cd0:	61 01       	movw	r12, r2
     cd2:	6e 96       	adiw	r28, 0x1e	; 30
     cd4:	0f ac       	ldd	r0, Y+63	; 0x3f
     cd6:	6e 97       	sbiw	r28, 0x1e	; 30
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x883>
     cda:	cc 0c       	add	r12, r12
     cdc:	dd 1c       	adc	r13, r13
     cde:	ee 1c       	adc	r14, r14
     ce0:	ff 1c       	adc	r15, r15
     ce2:	0a 94       	dec	r0
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <__stack+0x87b>
     ce6:	c9 a2       	std	Y+33, r12	; 0x21
     ce8:	da a2       	std	Y+34, r13	; 0x22
     cea:	eb a2       	std	Y+35, r14	; 0x23
     cec:	fc a2       	std	Y+36, r15	; 0x24
     cee:	64 01       	movw	r12, r8
     cf0:	53 01       	movw	r10, r6
     cf2:	06 2e       	mov	r0, r22
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <__stack+0x89f>
     cf6:	d6 94       	lsr	r13
     cf8:	c7 94       	ror	r12
     cfa:	b7 94       	ror	r11
     cfc:	a7 94       	ror	r10
     cfe:	0a 94       	dec	r0
     d00:	d2 f7       	brpl	.-12     	; 0xcf6 <__stack+0x897>
     d02:	d4 01       	movw	r26, r8
     d04:	c3 01       	movw	r24, r6
     d06:	6e 96       	adiw	r28, 0x1e	; 30
     d08:	0f ac       	ldd	r0, Y+63	; 0x3f
     d0a:	6e 97       	sbiw	r28, 0x1e	; 30
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__stack+0x8b7>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	aa 1f       	adc	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	0a 94       	dec	r0
     d18:	d2 f7       	brpl	.-12     	; 0xd0e <__stack+0x8af>
     d1a:	ed a4       	ldd	r14, Y+45	; 0x2d
     d1c:	fe a4       	ldd	r15, Y+46	; 0x2e
     d1e:	0f a5       	ldd	r16, Y+47	; 0x2f
     d20:	18 a9       	ldd	r17, Y+48	; 0x30
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x8cd>
     d24:	16 95       	lsr	r17
     d26:	07 95       	ror	r16
     d28:	f7 94       	ror	r15
     d2a:	e7 94       	ror	r14
     d2c:	6a 95       	dec	r22
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x8c5>
     d30:	37 01       	movw	r6, r14
     d32:	48 01       	movw	r8, r16
     d34:	68 2a       	or	r6, r24
     d36:	79 2a       	or	r7, r25
     d38:	8a 2a       	or	r8, r26
     d3a:	9b 2a       	or	r9, r27
     d3c:	6d 8e       	std	Y+29, r6	; 0x1d
     d3e:	7e 8e       	std	Y+30, r7	; 0x1e
     d40:	8f 8e       	std	Y+31, r8	; 0x1f
     d42:	98 a2       	std	Y+32, r9	; 0x20
     d44:	ed a0       	ldd	r14, Y+37	; 0x25
     d46:	fe a0       	ldd	r15, Y+38	; 0x26
     d48:	0f a1       	ldd	r16, Y+39	; 0x27
     d4a:	18 a5       	ldd	r17, Y+40	; 0x28
     d4c:	38 01       	movw	r6, r16
     d4e:	88 24       	eor	r8, r8
     d50:	99 24       	eor	r9, r9
     d52:	98 01       	movw	r18, r16
     d54:	87 01       	movw	r16, r14
     d56:	20 70       	andi	r18, 0x00	; 0
     d58:	30 70       	andi	r19, 0x00	; 0
     d5a:	65 96       	adiw	r28, 0x15	; 21
     d5c:	0c af       	std	Y+60, r16	; 0x3c
     d5e:	1d af       	std	Y+61, r17	; 0x3d
     d60:	2e af       	std	Y+62, r18	; 0x3e
     d62:	3f af       	std	Y+63, r19	; 0x3f
     d64:	65 97       	sbiw	r28, 0x15	; 21
     d66:	c6 01       	movw	r24, r12
     d68:	b5 01       	movw	r22, r10
     d6a:	a4 01       	movw	r20, r8
     d6c:	93 01       	movw	r18, r6
     d6e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     d72:	7b 01       	movw	r14, r22
     d74:	8c 01       	movw	r16, r24
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	a4 01       	movw	r20, r8
     d7c:	93 01       	movw	r18, r6
     d7e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     d82:	c9 01       	movw	r24, r18
     d84:	da 01       	movw	r26, r20
     d86:	1c 01       	movw	r2, r24
     d88:	2d 01       	movw	r4, r26
     d8a:	c2 01       	movw	r24, r4
     d8c:	b1 01       	movw	r22, r2
     d8e:	65 96       	adiw	r28, 0x15	; 21
     d90:	2c ad       	ldd	r18, Y+60	; 0x3c
     d92:	3d ad       	ldd	r19, Y+61	; 0x3d
     d94:	4e ad       	ldd	r20, Y+62	; 0x3e
     d96:	5f ad       	ldd	r21, Y+63	; 0x3f
     d98:	65 97       	sbiw	r28, 0x15	; 21
     d9a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	87 01       	movw	r16, r14
     da4:	ff 24       	eor	r15, r15
     da6:	ee 24       	eor	r14, r14
     da8:	ad 8c       	ldd	r10, Y+29	; 0x1d
     daa:	be 8c       	ldd	r11, Y+30	; 0x1e
     dac:	cf 8c       	ldd	r12, Y+31	; 0x1f
     dae:	d8 a0       	ldd	r13, Y+32	; 0x20
     db0:	c6 01       	movw	r24, r12
     db2:	aa 27       	eor	r26, r26
     db4:	bb 27       	eor	r27, r27
     db6:	57 01       	movw	r10, r14
     db8:	68 01       	movw	r12, r16
     dba:	a8 2a       	or	r10, r24
     dbc:	b9 2a       	or	r11, r25
     dbe:	ca 2a       	or	r12, r26
     dc0:	db 2a       	or	r13, r27
     dc2:	a2 16       	cp	r10, r18
     dc4:	b3 06       	cpc	r11, r19
     dc6:	c4 06       	cpc	r12, r20
     dc8:	d5 06       	cpc	r13, r21
     dca:	00 f5       	brcc	.+64     	; 0xe0c <__stack+0x9ad>
     dcc:	08 94       	sec
     dce:	21 08       	sbc	r2, r1
     dd0:	31 08       	sbc	r3, r1
     dd2:	41 08       	sbc	r4, r1
     dd4:	51 08       	sbc	r5, r1
     dd6:	ed a0       	ldd	r14, Y+37	; 0x25
     dd8:	fe a0       	ldd	r15, Y+38	; 0x26
     dda:	0f a1       	ldd	r16, Y+39	; 0x27
     ddc:	18 a5       	ldd	r17, Y+40	; 0x28
     dde:	ae 0c       	add	r10, r14
     de0:	bf 1c       	adc	r11, r15
     de2:	c0 1e       	adc	r12, r16
     de4:	d1 1e       	adc	r13, r17
     de6:	ae 14       	cp	r10, r14
     de8:	bf 04       	cpc	r11, r15
     dea:	c0 06       	cpc	r12, r16
     dec:	d1 06       	cpc	r13, r17
     dee:	70 f0       	brcs	.+28     	; 0xe0c <__stack+0x9ad>
     df0:	a2 16       	cp	r10, r18
     df2:	b3 06       	cpc	r11, r19
     df4:	c4 06       	cpc	r12, r20
     df6:	d5 06       	cpc	r13, r21
     df8:	48 f4       	brcc	.+18     	; 0xe0c <__stack+0x9ad>
     dfa:	08 94       	sec
     dfc:	21 08       	sbc	r2, r1
     dfe:	31 08       	sbc	r3, r1
     e00:	41 08       	sbc	r4, r1
     e02:	51 08       	sbc	r5, r1
     e04:	ae 0c       	add	r10, r14
     e06:	bf 1c       	adc	r11, r15
     e08:	c0 1e       	adc	r12, r16
     e0a:	d1 1e       	adc	r13, r17
     e0c:	a2 1a       	sub	r10, r18
     e0e:	b3 0a       	sbc	r11, r19
     e10:	c4 0a       	sbc	r12, r20
     e12:	d5 0a       	sbc	r13, r21
     e14:	c6 01       	movw	r24, r12
     e16:	b5 01       	movw	r22, r10
     e18:	a4 01       	movw	r20, r8
     e1a:	93 01       	movw	r18, r6
     e1c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     e20:	7b 01       	movw	r14, r22
     e22:	8c 01       	movw	r16, r24
     e24:	c6 01       	movw	r24, r12
     e26:	b5 01       	movw	r22, r10
     e28:	a4 01       	movw	r20, r8
     e2a:	93 01       	movw	r18, r6
     e2c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__udivmodsi4>
     e30:	c9 01       	movw	r24, r18
     e32:	da 01       	movw	r26, r20
     e34:	3c 01       	movw	r6, r24
     e36:	4d 01       	movw	r8, r26
     e38:	c4 01       	movw	r24, r8
     e3a:	b3 01       	movw	r22, r6
     e3c:	65 96       	adiw	r28, 0x15	; 21
     e3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e40:	3d ad       	ldd	r19, Y+61	; 0x3d
     e42:	4e ad       	ldd	r20, Y+62	; 0x3e
     e44:	5f ad       	ldd	r21, Y+63	; 0x3f
     e46:	65 97       	sbiw	r28, 0x15	; 21
     e48:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	87 01       	movw	r16, r14
     e52:	ff 24       	eor	r15, r15
     e54:	ee 24       	eor	r14, r14
     e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e58:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e5a:	af 8d       	ldd	r26, Y+31	; 0x1f
     e5c:	b8 a1       	ldd	r27, Y+32	; 0x20
     e5e:	a0 70       	andi	r26, 0x00	; 0
     e60:	b0 70       	andi	r27, 0x00	; 0
     e62:	57 01       	movw	r10, r14
     e64:	68 01       	movw	r12, r16
     e66:	a8 2a       	or	r10, r24
     e68:	b9 2a       	or	r11, r25
     e6a:	ca 2a       	or	r12, r26
     e6c:	db 2a       	or	r13, r27
     e6e:	a2 16       	cp	r10, r18
     e70:	b3 06       	cpc	r11, r19
     e72:	c4 06       	cpc	r12, r20
     e74:	d5 06       	cpc	r13, r21
     e76:	00 f5       	brcc	.+64     	; 0xeb8 <__stack+0xa59>
     e78:	08 94       	sec
     e7a:	61 08       	sbc	r6, r1
     e7c:	71 08       	sbc	r7, r1
     e7e:	81 08       	sbc	r8, r1
     e80:	91 08       	sbc	r9, r1
     e82:	6d a1       	ldd	r22, Y+37	; 0x25
     e84:	7e a1       	ldd	r23, Y+38	; 0x26
     e86:	8f a1       	ldd	r24, Y+39	; 0x27
     e88:	98 a5       	ldd	r25, Y+40	; 0x28
     e8a:	a6 0e       	add	r10, r22
     e8c:	b7 1e       	adc	r11, r23
     e8e:	c8 1e       	adc	r12, r24
     e90:	d9 1e       	adc	r13, r25
     e92:	a6 16       	cp	r10, r22
     e94:	b7 06       	cpc	r11, r23
     e96:	c8 06       	cpc	r12, r24
     e98:	d9 06       	cpc	r13, r25
     e9a:	70 f0       	brcs	.+28     	; 0xeb8 <__stack+0xa59>
     e9c:	a2 16       	cp	r10, r18
     e9e:	b3 06       	cpc	r11, r19
     ea0:	c4 06       	cpc	r12, r20
     ea2:	d5 06       	cpc	r13, r21
     ea4:	48 f4       	brcc	.+18     	; 0xeb8 <__stack+0xa59>
     ea6:	08 94       	sec
     ea8:	61 08       	sbc	r6, r1
     eaa:	71 08       	sbc	r7, r1
     eac:	81 08       	sbc	r8, r1
     eae:	91 08       	sbc	r9, r1
     eb0:	a6 0e       	add	r10, r22
     eb2:	b7 1e       	adc	r11, r23
     eb4:	c8 1e       	adc	r12, r24
     eb6:	d9 1e       	adc	r13, r25
     eb8:	d6 01       	movw	r26, r12
     eba:	c5 01       	movw	r24, r10
     ebc:	82 1b       	sub	r24, r18
     ebe:	93 0b       	sbc	r25, r19
     ec0:	a4 0b       	sbc	r26, r20
     ec2:	b5 0b       	sbc	r27, r21
     ec4:	89 8f       	std	Y+25, r24	; 0x19
     ec6:	9a 8f       	std	Y+26, r25	; 0x1a
     ec8:	ab 8f       	std	Y+27, r26	; 0x1b
     eca:	bc 8f       	std	Y+28, r27	; 0x1c
     ecc:	d1 01       	movw	r26, r2
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	64 01       	movw	r12, r8
     ed4:	53 01       	movw	r10, r6
     ed6:	a8 2a       	or	r10, r24
     ed8:	b9 2a       	or	r11, r25
     eda:	ca 2a       	or	r12, r26
     edc:	db 2a       	or	r13, r27
     ede:	a9 aa       	std	Y+49, r10	; 0x31
     ee0:	ba aa       	std	Y+50, r11	; 0x32
     ee2:	cb aa       	std	Y+51, r12	; 0x33
     ee4:	dc aa       	std	Y+52, r13	; 0x34
     ee6:	86 01       	movw	r16, r12
     ee8:	75 01       	movw	r14, r10
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	e2 22       	and	r14, r18
     ef4:	f3 22       	and	r15, r19
     ef6:	04 23       	and	r16, r20
     ef8:	15 23       	and	r17, r21
     efa:	a6 01       	movw	r20, r12
     efc:	66 27       	eor	r22, r22
     efe:	77 27       	eor	r23, r23
     f00:	6d 96       	adiw	r28, 0x1d	; 29
     f02:	4c af       	std	Y+60, r20	; 0x3c
     f04:	5d af       	std	Y+61, r21	; 0x3d
     f06:	6e af       	std	Y+62, r22	; 0x3e
     f08:	7f af       	std	Y+63, r23	; 0x3f
     f0a:	6d 97       	sbiw	r28, 0x1d	; 29
     f0c:	a9 a0       	ldd	r10, Y+33	; 0x21
     f0e:	ba a0       	ldd	r11, Y+34	; 0x22
     f10:	cb a0       	ldd	r12, Y+35	; 0x23
     f12:	dc a0       	ldd	r13, Y+36	; 0x24
     f14:	6f ef       	ldi	r22, 0xFF	; 255
     f16:	7f ef       	ldi	r23, 0xFF	; 255
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a6 22       	and	r10, r22
     f1e:	b7 22       	and	r11, r23
     f20:	c8 22       	and	r12, r24
     f22:	d9 22       	and	r13, r25
     f24:	89 a1       	ldd	r24, Y+33	; 0x21
     f26:	9a a1       	ldd	r25, Y+34	; 0x22
     f28:	ab a1       	ldd	r26, Y+35	; 0x23
     f2a:	bc a1       	ldd	r27, Y+36	; 0x24
     f2c:	1d 01       	movw	r2, r26
     f2e:	44 24       	eor	r4, r4
     f30:	55 24       	eor	r5, r5
     f32:	c8 01       	movw	r24, r16
     f34:	b7 01       	movw	r22, r14
     f36:	a6 01       	movw	r20, r12
     f38:	95 01       	movw	r18, r10
     f3a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     f3e:	69 96       	adiw	r28, 0x19	; 25
     f40:	6c af       	std	Y+60, r22	; 0x3c
     f42:	7d af       	std	Y+61, r23	; 0x3d
     f44:	8e af       	std	Y+62, r24	; 0x3e
     f46:	9f af       	std	Y+63, r25	; 0x3f
     f48:	69 97       	sbiw	r28, 0x19	; 25
     f4a:	c8 01       	movw	r24, r16
     f4c:	b7 01       	movw	r22, r14
     f4e:	a2 01       	movw	r20, r4
     f50:	91 01       	movw	r18, r2
     f52:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     f56:	3b 01       	movw	r6, r22
     f58:	4c 01       	movw	r8, r24
     f5a:	6d 96       	adiw	r28, 0x1d	; 29
     f5c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f5e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f60:	8e ad       	ldd	r24, Y+62	; 0x3e
     f62:	9f ad       	ldd	r25, Y+63	; 0x3f
     f64:	6d 97       	sbiw	r28, 0x1d	; 29
     f66:	a6 01       	movw	r20, r12
     f68:	95 01       	movw	r18, r10
     f6a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	6d 96       	adiw	r28, 0x1d	; 29
     f74:	6c ad       	ldd	r22, Y+60	; 0x3c
     f76:	7d ad       	ldd	r23, Y+61	; 0x3d
     f78:	8e ad       	ldd	r24, Y+62	; 0x3e
     f7a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f7c:	6d 97       	sbiw	r28, 0x1d	; 29
     f7e:	a2 01       	movw	r20, r4
     f80:	91 01       	movw	r18, r2
     f82:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsi3>
     f86:	5b 01       	movw	r10, r22
     f88:	6c 01       	movw	r12, r24
     f8a:	a8 01       	movw	r20, r16
     f8c:	97 01       	movw	r18, r14
     f8e:	26 0d       	add	r18, r6
     f90:	37 1d       	adc	r19, r7
     f92:	48 1d       	adc	r20, r8
     f94:	59 1d       	adc	r21, r9
     f96:	69 96       	adiw	r28, 0x19	; 25
     f98:	6c ac       	ldd	r6, Y+60	; 0x3c
     f9a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f9c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f9e:	9f ac       	ldd	r9, Y+63	; 0x3f
     fa0:	69 97       	sbiw	r28, 0x19	; 25
     fa2:	c4 01       	movw	r24, r8
     fa4:	aa 27       	eor	r26, r26
     fa6:	bb 27       	eor	r27, r27
     fa8:	28 0f       	add	r18, r24
     faa:	39 1f       	adc	r19, r25
     fac:	4a 1f       	adc	r20, r26
     fae:	5b 1f       	adc	r21, r27
     fb0:	2e 15       	cp	r18, r14
     fb2:	3f 05       	cpc	r19, r15
     fb4:	40 07       	cpc	r20, r16
     fb6:	51 07       	cpc	r21, r17
     fb8:	48 f4       	brcc	.+18     	; 0xfcc <__stack+0xb6d>
     fba:	e1 2c       	mov	r14, r1
     fbc:	f1 2c       	mov	r15, r1
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	06 2f       	mov	r16, r22
     fc2:	11 2d       	mov	r17, r1
     fc4:	ae 0c       	add	r10, r14
     fc6:	bf 1c       	adc	r11, r15
     fc8:	c0 1e       	adc	r12, r16
     fca:	d1 1e       	adc	r13, r17
     fcc:	ca 01       	movw	r24, r20
     fce:	aa 27       	eor	r26, r26
     fd0:	bb 27       	eor	r27, r27
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	6a 0d       	add	r22, r10
     fd8:	7b 1d       	adc	r23, r11
     fda:	8c 1d       	adc	r24, r12
     fdc:	9d 1d       	adc	r25, r13
     fde:	69 8c       	ldd	r6, Y+25	; 0x19
     fe0:	7a 8c       	ldd	r7, Y+26	; 0x1a
     fe2:	8b 8c       	ldd	r8, Y+27	; 0x1b
     fe4:	9c 8c       	ldd	r9, Y+28	; 0x1c
     fe6:	66 16       	cp	r6, r22
     fe8:	77 06       	cpc	r7, r23
     fea:	88 06       	cpc	r8, r24
     fec:	99 06       	cpc	r9, r25
     fee:	40 f1       	brcs	.+80     	; 0x1040 <__stack+0xbe1>
     ff0:	66 15       	cp	r22, r6
     ff2:	77 05       	cpc	r23, r7
     ff4:	88 05       	cpc	r24, r8
     ff6:	99 05       	cpc	r25, r9
     ff8:	09 f0       	breq	.+2      	; 0xffc <__stack+0xb9d>
     ffa:	43 c0       	rjmp	.+134    	; 0x1082 <__stack+0xc23>
     ffc:	d9 01       	movw	r26, r18
     ffe:	99 27       	eor	r25, r25
    1000:	88 27       	eor	r24, r24
    1002:	69 96       	adiw	r28, 0x19	; 25
    1004:	2c ad       	ldd	r18, Y+60	; 0x3c
    1006:	3d ad       	ldd	r19, Y+61	; 0x3d
    1008:	4e ad       	ldd	r20, Y+62	; 0x3e
    100a:	5f ad       	ldd	r21, Y+63	; 0x3f
    100c:	69 97       	sbiw	r28, 0x19	; 25
    100e:	40 70       	andi	r20, 0x00	; 0
    1010:	50 70       	andi	r21, 0x00	; 0
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	a4 1f       	adc	r26, r20
    1018:	b5 1f       	adc	r27, r21
    101a:	2d a5       	ldd	r18, Y+45	; 0x2d
    101c:	3e a5       	ldd	r19, Y+46	; 0x2e
    101e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1020:	58 a9       	ldd	r21, Y+48	; 0x30
    1022:	6e 96       	adiw	r28, 0x1e	; 30
    1024:	0f ac       	ldd	r0, Y+63	; 0x3f
    1026:	6e 97       	sbiw	r28, 0x1e	; 30
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <__stack+0xbd3>
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	44 1f       	adc	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	0a 94       	dec	r0
    1034:	d2 f7       	brpl	.-12     	; 0x102a <__stack+0xbcb>
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	4a 07       	cpc	r20, r26
    103c:	5b 07       	cpc	r21, r27
    103e:	08 f5       	brcc	.+66     	; 0x1082 <__stack+0xc23>
    1040:	09 a9       	ldd	r16, Y+49	; 0x31
    1042:	1a a9       	ldd	r17, Y+50	; 0x32
    1044:	2b a9       	ldd	r18, Y+51	; 0x33
    1046:	3c a9       	ldd	r19, Y+52	; 0x34
    1048:	01 50       	subi	r16, 0x01	; 1
    104a:	10 40       	sbci	r17, 0x00	; 0
    104c:	20 40       	sbci	r18, 0x00	; 0
    104e:	30 40       	sbci	r19, 0x00	; 0
    1050:	09 ab       	std	Y+49, r16	; 0x31
    1052:	1a ab       	std	Y+50, r17	; 0x32
    1054:	2b ab       	std	Y+51, r18	; 0x33
    1056:	3c ab       	std	Y+52, r19	; 0x34
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <__stack+0xc23>
    105a:	66 24       	eor	r6, r6
    105c:	77 24       	eor	r7, r7
    105e:	43 01       	movw	r8, r6
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	29 ab       	std	Y+49, r18	; 0x31
    106a:	3a ab       	std	Y+50, r19	; 0x32
    106c:	4b ab       	std	Y+51, r20	; 0x33
    106e:	5c ab       	std	Y+52, r21	; 0x34
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <__stack+0xc29>
    1072:	66 24       	eor	r6, r6
    1074:	77 24       	eor	r7, r7
    1076:	43 01       	movw	r8, r6
    1078:	19 aa       	std	Y+49, r1	; 0x31
    107a:	1a aa       	std	Y+50, r1	; 0x32
    107c:	1b aa       	std	Y+51, r1	; 0x33
    107e:	1c aa       	std	Y+52, r1	; 0x34
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <__stack+0xc29>
    1082:	66 24       	eor	r6, r6
    1084:	77 24       	eor	r7, r7
    1086:	43 01       	movw	r8, r6
    1088:	fe 01       	movw	r30, r28
    108a:	71 96       	adiw	r30, 0x11	; 17
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	df 01       	movw	r26, r30
    1090:	1d 92       	st	X+, r1
    1092:	8a 95       	dec	r24
    1094:	e9 f7       	brne	.-6      	; 0x1090 <__stack+0xc31>
    1096:	a9 a8       	ldd	r10, Y+49	; 0x31
    1098:	ba a8       	ldd	r11, Y+50	; 0x32
    109a:	cb a8       	ldd	r12, Y+51	; 0x33
    109c:	dc a8       	ldd	r13, Y+52	; 0x34
    109e:	a9 8a       	std	Y+17, r10	; 0x11
    10a0:	ba 8a       	std	Y+18, r11	; 0x12
    10a2:	cb 8a       	std	Y+19, r12	; 0x13
    10a4:	dc 8a       	std	Y+20, r13	; 0x14
    10a6:	6d 8a       	std	Y+21, r6	; 0x15
    10a8:	7e 8a       	std	Y+22, r7	; 0x16
    10aa:	8f 8a       	std	Y+23, r8	; 0x17
    10ac:	98 8e       	std	Y+24, r9	; 0x18
    10ae:	29 a9       	ldd	r18, Y+49	; 0x31
    10b0:	3a 89       	ldd	r19, Y+18	; 0x12
    10b2:	4b 89       	ldd	r20, Y+19	; 0x13
    10b4:	5c 89       	ldd	r21, Y+20	; 0x14
    10b6:	66 2d       	mov	r22, r6
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	c2 5a       	subi	r28, 0xA2	; 162
    10c0:	df 4f       	sbci	r29, 0xFF	; 255
    10c2:	e2 e1       	ldi	r30, 0x12	; 18
    10c4:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

000010c8 <_fpadd_parts>:
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e6       	ldi	r30, 0x6A	; 106
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
    10d4:	dc 01       	movw	r26, r24
    10d6:	2b 01       	movw	r4, r22
    10d8:	fa 01       	movw	r30, r20
    10da:	9c 91       	ld	r25, X
    10dc:	92 30       	cpi	r25, 0x02	; 2
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <_fpadd_parts+0x1a>
    10e0:	39 c1       	rjmp	.+626    	; 0x1354 <_fpadd_parts+0x28c>
    10e2:	eb 01       	movw	r28, r22
    10e4:	88 81       	ld	r24, Y
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <_fpadd_parts+0x24>
    10ea:	33 c1       	rjmp	.+614    	; 0x1352 <_fpadd_parts+0x28a>
    10ec:	94 30       	cpi	r25, 0x04	; 4
    10ee:	69 f4       	brne	.+26     	; 0x110a <_fpadd_parts+0x42>
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <_fpadd_parts+0x2e>
    10f4:	2f c1       	rjmp	.+606    	; 0x1354 <_fpadd_parts+0x28c>
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	9c 91       	ld	r25, X
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	98 17       	cp	r25, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <_fpadd_parts+0x3c>
    1102:	28 c1       	rjmp	.+592    	; 0x1354 <_fpadd_parts+0x28c>
    1104:	a0 e6       	ldi	r26, 0x60	; 96
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	25 c1       	rjmp	.+586    	; 0x1354 <_fpadd_parts+0x28c>
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	09 f4       	brne	.+2      	; 0x1110 <_fpadd_parts+0x48>
    110e:	21 c1       	rjmp	.+578    	; 0x1352 <_fpadd_parts+0x28a>
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	a9 f4       	brne	.+42     	; 0x113e <_fpadd_parts+0x76>
    1114:	92 30       	cpi	r25, 0x02	; 2
    1116:	09 f0       	breq	.+2      	; 0x111a <_fpadd_parts+0x52>
    1118:	1d c1       	rjmp	.+570    	; 0x1354 <_fpadd_parts+0x28c>
    111a:	9a 01       	movw	r18, r20
    111c:	ad 01       	movw	r20, r26
    111e:	88 e0       	ldi	r24, 0x08	; 8
    1120:	ea 01       	movw	r28, r20
    1122:	09 90       	ld	r0, Y+
    1124:	ae 01       	movw	r20, r28
    1126:	e9 01       	movw	r28, r18
    1128:	09 92       	st	Y+, r0
    112a:	9e 01       	movw	r18, r28
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	c1 f7       	brne	.-16     	; 0x1120 <_fpadd_parts+0x58>
    1130:	e2 01       	movw	r28, r4
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	9c 91       	ld	r25, X
    1138:	89 23       	and	r24, r25
    113a:	81 83       	std	Z+1, r24	; 0x01
    113c:	08 c1       	rjmp	.+528    	; 0x134e <_fpadd_parts+0x286>
    113e:	92 30       	cpi	r25, 0x02	; 2
    1140:	09 f4       	brne	.+2      	; 0x1144 <_fpadd_parts+0x7c>
    1142:	07 c1       	rjmp	.+526    	; 0x1352 <_fpadd_parts+0x28a>
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	2d 90       	ld	r2, X+
    1148:	3c 90       	ld	r3, X
    114a:	13 97       	sbiw	r26, 0x03	; 3
    114c:	eb 01       	movw	r28, r22
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	14 96       	adiw	r26, 0x04	; 4
    1154:	ad 90       	ld	r10, X+
    1156:	bd 90       	ld	r11, X+
    1158:	cd 90       	ld	r12, X+
    115a:	dc 90       	ld	r13, X
    115c:	17 97       	sbiw	r26, 0x07	; 7
    115e:	ec 80       	ldd	r14, Y+4	; 0x04
    1160:	fd 80       	ldd	r15, Y+5	; 0x05
    1162:	0e 81       	ldd	r16, Y+6	; 0x06
    1164:	1f 81       	ldd	r17, Y+7	; 0x07
    1166:	91 01       	movw	r18, r2
    1168:	28 1b       	sub	r18, r24
    116a:	39 0b       	sbc	r19, r25
    116c:	b9 01       	movw	r22, r18
    116e:	37 ff       	sbrs	r19, 7
    1170:	04 c0       	rjmp	.+8      	; 0x117a <_fpadd_parts+0xb2>
    1172:	66 27       	eor	r22, r22
    1174:	77 27       	eor	r23, r23
    1176:	62 1b       	sub	r22, r18
    1178:	73 0b       	sbc	r23, r19
    117a:	60 32       	cpi	r22, 0x20	; 32
    117c:	71 05       	cpc	r23, r1
    117e:	0c f0       	brlt	.+2      	; 0x1182 <_fpadd_parts+0xba>
    1180:	61 c0       	rjmp	.+194    	; 0x1244 <_fpadd_parts+0x17c>
    1182:	12 16       	cp	r1, r18
    1184:	13 06       	cpc	r1, r19
    1186:	6c f5       	brge	.+90     	; 0x11e2 <_fpadd_parts+0x11a>
    1188:	37 01       	movw	r6, r14
    118a:	48 01       	movw	r8, r16
    118c:	06 2e       	mov	r0, r22
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <_fpadd_parts+0xd0>
    1190:	96 94       	lsr	r9
    1192:	87 94       	ror	r8
    1194:	77 94       	ror	r7
    1196:	67 94       	ror	r6
    1198:	0a 94       	dec	r0
    119a:	d2 f7       	brpl	.-12     	; 0x1190 <_fpadd_parts+0xc8>
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <_fpadd_parts+0xe6>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	6a 95       	dec	r22
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <_fpadd_parts+0xde>
    11b2:	21 50       	subi	r18, 0x01	; 1
    11b4:	30 40       	sbci	r19, 0x00	; 0
    11b6:	40 40       	sbci	r20, 0x00	; 0
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	2e 21       	and	r18, r14
    11bc:	3f 21       	and	r19, r15
    11be:	40 23       	and	r20, r16
    11c0:	51 23       	and	r21, r17
    11c2:	21 15       	cp	r18, r1
    11c4:	31 05       	cpc	r19, r1
    11c6:	41 05       	cpc	r20, r1
    11c8:	51 05       	cpc	r21, r1
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <_fpadd_parts+0x10c>
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	79 01       	movw	r14, r18
    11d6:	8a 01       	movw	r16, r20
    11d8:	e6 28       	or	r14, r6
    11da:	f7 28       	or	r15, r7
    11dc:	08 29       	or	r16, r8
    11de:	19 29       	or	r17, r9
    11e0:	3c c0       	rjmp	.+120    	; 0x125a <_fpadd_parts+0x192>
    11e2:	23 2b       	or	r18, r19
    11e4:	d1 f1       	breq	.+116    	; 0x125a <_fpadd_parts+0x192>
    11e6:	26 0e       	add	r2, r22
    11e8:	37 1e       	adc	r3, r23
    11ea:	35 01       	movw	r6, r10
    11ec:	46 01       	movw	r8, r12
    11ee:	06 2e       	mov	r0, r22
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <_fpadd_parts+0x132>
    11f2:	96 94       	lsr	r9
    11f4:	87 94       	ror	r8
    11f6:	77 94       	ror	r7
    11f8:	67 94       	ror	r6
    11fa:	0a 94       	dec	r0
    11fc:	d2 f7       	brpl	.-12     	; 0x11f2 <_fpadd_parts+0x12a>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <_fpadd_parts+0x148>
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	44 1f       	adc	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	6a 95       	dec	r22
    1212:	d2 f7       	brpl	.-12     	; 0x1208 <_fpadd_parts+0x140>
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	30 40       	sbci	r19, 0x00	; 0
    1218:	40 40       	sbci	r20, 0x00	; 0
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	2a 21       	and	r18, r10
    121e:	3b 21       	and	r19, r11
    1220:	4c 21       	and	r20, r12
    1222:	5d 21       	and	r21, r13
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	41 05       	cpc	r20, r1
    122a:	51 05       	cpc	r21, r1
    122c:	21 f0       	breq	.+8      	; 0x1236 <_fpadd_parts+0x16e>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	59 01       	movw	r10, r18
    1238:	6a 01       	movw	r12, r20
    123a:	a6 28       	or	r10, r6
    123c:	b7 28       	or	r11, r7
    123e:	c8 28       	or	r12, r8
    1240:	d9 28       	or	r13, r9
    1242:	0b c0       	rjmp	.+22     	; 0x125a <_fpadd_parts+0x192>
    1244:	82 15       	cp	r24, r2
    1246:	93 05       	cpc	r25, r3
    1248:	2c f0       	brlt	.+10     	; 0x1254 <_fpadd_parts+0x18c>
    124a:	1c 01       	movw	r2, r24
    124c:	aa 24       	eor	r10, r10
    124e:	bb 24       	eor	r11, r11
    1250:	65 01       	movw	r12, r10
    1252:	03 c0       	rjmp	.+6      	; 0x125a <_fpadd_parts+0x192>
    1254:	ee 24       	eor	r14, r14
    1256:	ff 24       	eor	r15, r15
    1258:	87 01       	movw	r16, r14
    125a:	11 96       	adiw	r26, 0x01	; 1
    125c:	9c 91       	ld	r25, X
    125e:	d2 01       	movw	r26, r4
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	8c 91       	ld	r24, X
    1264:	98 17       	cp	r25, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <_fpadd_parts+0x1a2>
    1268:	45 c0       	rjmp	.+138    	; 0x12f4 <_fpadd_parts+0x22c>
    126a:	99 23       	and	r25, r25
    126c:	39 f0       	breq	.+14     	; 0x127c <_fpadd_parts+0x1b4>
    126e:	a8 01       	movw	r20, r16
    1270:	97 01       	movw	r18, r14
    1272:	2a 19       	sub	r18, r10
    1274:	3b 09       	sbc	r19, r11
    1276:	4c 09       	sbc	r20, r12
    1278:	5d 09       	sbc	r21, r13
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <_fpadd_parts+0x1c0>
    127c:	a6 01       	movw	r20, r12
    127e:	95 01       	movw	r18, r10
    1280:	2e 19       	sub	r18, r14
    1282:	3f 09       	sbc	r19, r15
    1284:	40 0b       	sbc	r20, r16
    1286:	51 0b       	sbc	r21, r17
    1288:	57 fd       	sbrc	r21, 7
    128a:	08 c0       	rjmp	.+16     	; 0x129c <_fpadd_parts+0x1d4>
    128c:	11 82       	std	Z+1, r1	; 0x01
    128e:	33 82       	std	Z+3, r3	; 0x03
    1290:	22 82       	std	Z+2, r2	; 0x02
    1292:	24 83       	std	Z+4, r18	; 0x04
    1294:	35 83       	std	Z+5, r19	; 0x05
    1296:	46 83       	std	Z+6, r20	; 0x06
    1298:	57 83       	std	Z+7, r21	; 0x07
    129a:	1d c0       	rjmp	.+58     	; 0x12d6 <_fpadd_parts+0x20e>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	81 83       	std	Z+1, r24	; 0x01
    12a0:	33 82       	std	Z+3, r3	; 0x03
    12a2:	22 82       	std	Z+2, r2	; 0x02
    12a4:	88 27       	eor	r24, r24
    12a6:	99 27       	eor	r25, r25
    12a8:	dc 01       	movw	r26, r24
    12aa:	82 1b       	sub	r24, r18
    12ac:	93 0b       	sbc	r25, r19
    12ae:	a4 0b       	sbc	r26, r20
    12b0:	b5 0b       	sbc	r27, r21
    12b2:	84 83       	std	Z+4, r24	; 0x04
    12b4:	95 83       	std	Z+5, r25	; 0x05
    12b6:	a6 83       	std	Z+6, r26	; 0x06
    12b8:	b7 83       	std	Z+7, r27	; 0x07
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <_fpadd_parts+0x20e>
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	44 1f       	adc	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	24 83       	std	Z+4, r18	; 0x04
    12c6:	35 83       	std	Z+5, r19	; 0x05
    12c8:	46 83       	std	Z+6, r20	; 0x06
    12ca:	57 83       	std	Z+7, r21	; 0x07
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	93 83       	std	Z+3, r25	; 0x03
    12d4:	82 83       	std	Z+2, r24	; 0x02
    12d6:	24 81       	ldd	r18, Z+4	; 0x04
    12d8:	35 81       	ldd	r19, Z+5	; 0x05
    12da:	46 81       	ldd	r20, Z+6	; 0x06
    12dc:	57 81       	ldd	r21, Z+7	; 0x07
    12de:	da 01       	movw	r26, r20
    12e0:	c9 01       	movw	r24, r18
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	a1 09       	sbc	r26, r1
    12e6:	b1 09       	sbc	r27, r1
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	af 4f       	sbci	r26, 0xFF	; 255
    12ee:	bf 43       	sbci	r27, 0x3F	; 63
    12f0:	28 f3       	brcs	.-54     	; 0x12bc <_fpadd_parts+0x1f4>
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <_fpadd_parts+0x242>
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	33 82       	std	Z+3, r3	; 0x03
    12f8:	22 82       	std	Z+2, r2	; 0x02
    12fa:	ea 0c       	add	r14, r10
    12fc:	fb 1c       	adc	r15, r11
    12fe:	0c 1d       	adc	r16, r12
    1300:	1d 1d       	adc	r17, r13
    1302:	e4 82       	std	Z+4, r14	; 0x04
    1304:	f5 82       	std	Z+5, r15	; 0x05
    1306:	06 83       	std	Z+6, r16	; 0x06
    1308:	17 83       	std	Z+7, r17	; 0x07
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	80 83       	st	Z, r24
    130e:	24 81       	ldd	r18, Z+4	; 0x04
    1310:	35 81       	ldd	r19, Z+5	; 0x05
    1312:	46 81       	ldd	r20, Z+6	; 0x06
    1314:	57 81       	ldd	r21, Z+7	; 0x07
    1316:	57 ff       	sbrs	r21, 7
    1318:	1a c0       	rjmp	.+52     	; 0x134e <_fpadd_parts+0x286>
    131a:	c9 01       	movw	r24, r18
    131c:	aa 27       	eor	r26, r26
    131e:	97 fd       	sbrc	r25, 7
    1320:	a0 95       	com	r26
    1322:	ba 2f       	mov	r27, r26
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	a0 70       	andi	r26, 0x00	; 0
    132a:	b0 70       	andi	r27, 0x00	; 0
    132c:	56 95       	lsr	r21
    132e:	47 95       	ror	r20
    1330:	37 95       	ror	r19
    1332:	27 95       	ror	r18
    1334:	82 2b       	or	r24, r18
    1336:	93 2b       	or	r25, r19
    1338:	a4 2b       	or	r26, r20
    133a:	b5 2b       	or	r27, r21
    133c:	84 83       	std	Z+4, r24	; 0x04
    133e:	95 83       	std	Z+5, r25	; 0x05
    1340:	a6 83       	std	Z+6, r26	; 0x06
    1342:	b7 83       	std	Z+7, r27	; 0x07
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	93 83       	std	Z+3, r25	; 0x03
    134c:	82 83       	std	Z+2, r24	; 0x02
    134e:	df 01       	movw	r26, r30
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <_fpadd_parts+0x28c>
    1352:	d2 01       	movw	r26, r4
    1354:	cd 01       	movw	r24, r26
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	e2 e1       	ldi	r30, 0x12	; 18
    135c:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00001360 <__subsf3>:
    1360:	a0 e2       	ldi	r26, 0x20	; 32
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e6 eb       	ldi	r30, 0xB6	; 182
    1366:	f9 e0       	ldi	r31, 0x09	; 9
    1368:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
    136c:	69 83       	std	Y+1, r22	; 0x01
    136e:	7a 83       	std	Y+2, r23	; 0x02
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	2d 83       	std	Y+5, r18	; 0x05
    1376:	3e 83       	std	Y+6, r19	; 0x06
    1378:	4f 83       	std	Y+7, r20	; 0x07
    137a:	58 87       	std	Y+8, r21	; 0x08
    137c:	e9 e0       	ldi	r30, 0x09	; 9
    137e:	ee 2e       	mov	r14, r30
    1380:	f1 2c       	mov	r15, r1
    1382:	ec 0e       	add	r14, r28
    1384:	fd 1e       	adc	r15, r29
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	b7 01       	movw	r22, r14
    138c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1390:	8e 01       	movw	r16, r28
    1392:	0f 5e       	subi	r16, 0xEF	; 239
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	ce 01       	movw	r24, r28
    1398:	05 96       	adiw	r24, 0x05	; 5
    139a:	b8 01       	movw	r22, r16
    139c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	89 27       	eor	r24, r25
    13a6:	8a 8b       	std	Y+18, r24	; 0x12
    13a8:	c7 01       	movw	r24, r14
    13aa:	b8 01       	movw	r22, r16
    13ac:	ae 01       	movw	r20, r28
    13ae:	47 5e       	subi	r20, 0xE7	; 231
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_fpadd_parts>
    13b6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__pack_f>
    13ba:	a0 96       	adiw	r28, 0x20	; 32
    13bc:	e6 e0       	ldi	r30, 0x06	; 6
    13be:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

000013c2 <__addsf3>:
    13c2:	a0 e2       	ldi	r26, 0x20	; 32
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e7 ee       	ldi	r30, 0xE7	; 231
    13c8:	f9 e0       	ldi	r31, 0x09	; 9
    13ca:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
    13ce:	69 83       	std	Y+1, r22	; 0x01
    13d0:	7a 83       	std	Y+2, r23	; 0x02
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	2d 83       	std	Y+5, r18	; 0x05
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	4f 83       	std	Y+7, r20	; 0x07
    13dc:	58 87       	std	Y+8, r21	; 0x08
    13de:	f9 e0       	ldi	r31, 0x09	; 9
    13e0:	ef 2e       	mov	r14, r31
    13e2:	f1 2c       	mov	r15, r1
    13e4:	ec 0e       	add	r14, r28
    13e6:	fd 1e       	adc	r15, r29
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	b7 01       	movw	r22, r14
    13ee:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    13f2:	8e 01       	movw	r16, r28
    13f4:	0f 5e       	subi	r16, 0xEF	; 239
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	ce 01       	movw	r24, r28
    13fa:	05 96       	adiw	r24, 0x05	; 5
    13fc:	b8 01       	movw	r22, r16
    13fe:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1402:	c7 01       	movw	r24, r14
    1404:	b8 01       	movw	r22, r16
    1406:	ae 01       	movw	r20, r28
    1408:	47 5e       	subi	r20, 0xE7	; 231
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_fpadd_parts>
    1410:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__pack_f>
    1414:	a0 96       	adiw	r28, 0x20	; 32
    1416:	e6 e0       	ldi	r30, 0x06	; 6
    1418:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

0000141c <__mulsf3>:
    141c:	a0 e2       	ldi	r26, 0x20	; 32
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e1       	ldi	r30, 0x14	; 20
    1422:	fa e0       	ldi	r31, 0x0A	; 10
    1424:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
    1428:	69 83       	std	Y+1, r22	; 0x01
    142a:	7a 83       	std	Y+2, r23	; 0x02
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	2d 83       	std	Y+5, r18	; 0x05
    1432:	3e 83       	std	Y+6, r19	; 0x06
    1434:	4f 83       	std	Y+7, r20	; 0x07
    1436:	58 87       	std	Y+8, r21	; 0x08
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	be 01       	movw	r22, r28
    143e:	67 5f       	subi	r22, 0xF7	; 247
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1446:	ce 01       	movw	r24, r28
    1448:	05 96       	adiw	r24, 0x05	; 5
    144a:	be 01       	movw	r22, r28
    144c:	6f 5e       	subi	r22, 0xEF	; 239
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1454:	99 85       	ldd	r25, Y+9	; 0x09
    1456:	92 30       	cpi	r25, 0x02	; 2
    1458:	88 f0       	brcs	.+34     	; 0x147c <__mulsf3+0x60>
    145a:	89 89       	ldd	r24, Y+17	; 0x11
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	c8 f0       	brcs	.+50     	; 0x1492 <__mulsf3+0x76>
    1460:	94 30       	cpi	r25, 0x04	; 4
    1462:	19 f4       	brne	.+6      	; 0x146a <__mulsf3+0x4e>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	51 f4       	brne	.+20     	; 0x147c <__mulsf3+0x60>
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__mulsf3+0x56>
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	29 f4       	brne	.+10     	; 0x1478 <__mulsf3+0x5c>
    146e:	92 30       	cpi	r25, 0x02	; 2
    1470:	81 f4       	brne	.+32     	; 0x1492 <__mulsf3+0x76>
    1472:	80 e6       	ldi	r24, 0x60	; 96
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	c6 c0       	rjmp	.+396    	; 0x1604 <__mulsf3+0x1e8>
    1478:	92 30       	cpi	r25, 0x02	; 2
    147a:	49 f4       	brne	.+18     	; 0x148e <__mulsf3+0x72>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	8a 89       	ldd	r24, Y+18	; 0x12
    1482:	98 13       	cpse	r25, r24
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	2a 87       	std	Y+10, r18	; 0x0a
    1488:	ce 01       	movw	r24, r28
    148a:	09 96       	adiw	r24, 0x09	; 9
    148c:	bb c0       	rjmp	.+374    	; 0x1604 <__mulsf3+0x1e8>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	49 f4       	brne	.+18     	; 0x14a4 <__mulsf3+0x88>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	8a 89       	ldd	r24, Y+18	; 0x12
    1498:	98 13       	cpse	r25, r24
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	2a 8b       	std	Y+18, r18	; 0x12
    149e:	ce 01       	movw	r24, r28
    14a0:	41 96       	adiw	r24, 0x11	; 17
    14a2:	b0 c0       	rjmp	.+352    	; 0x1604 <__mulsf3+0x1e8>
    14a4:	2d 84       	ldd	r2, Y+13	; 0x0d
    14a6:	3e 84       	ldd	r3, Y+14	; 0x0e
    14a8:	4f 84       	ldd	r4, Y+15	; 0x0f
    14aa:	58 88       	ldd	r5, Y+16	; 0x10
    14ac:	6d 88       	ldd	r6, Y+21	; 0x15
    14ae:	7e 88       	ldd	r7, Y+22	; 0x16
    14b0:	8f 88       	ldd	r8, Y+23	; 0x17
    14b2:	98 8c       	ldd	r9, Y+24	; 0x18
    14b4:	ee 24       	eor	r14, r14
    14b6:	ff 24       	eor	r15, r15
    14b8:	87 01       	movw	r16, r14
    14ba:	aa 24       	eor	r10, r10
    14bc:	bb 24       	eor	r11, r11
    14be:	65 01       	movw	r12, r10
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	e0 e0       	ldi	r30, 0x00	; 0
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	c1 01       	movw	r24, r2
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	89 2b       	or	r24, r25
    14d4:	e9 f0       	breq	.+58     	; 0x1510 <__mulsf3+0xf4>
    14d6:	e6 0c       	add	r14, r6
    14d8:	f7 1c       	adc	r15, r7
    14da:	08 1d       	adc	r16, r8
    14dc:	19 1d       	adc	r17, r9
    14de:	9a 01       	movw	r18, r20
    14e0:	ab 01       	movw	r20, r22
    14e2:	2a 0d       	add	r18, r10
    14e4:	3b 1d       	adc	r19, r11
    14e6:	4c 1d       	adc	r20, r12
    14e8:	5d 1d       	adc	r21, r13
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e6 14       	cp	r14, r6
    14f4:	f7 04       	cpc	r15, r7
    14f6:	08 05       	cpc	r16, r8
    14f8:	19 05       	cpc	r17, r9
    14fa:	20 f4       	brcc	.+8      	; 0x1504 <__mulsf3+0xe8>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ba 01       	movw	r22, r20
    1506:	a9 01       	movw	r20, r18
    1508:	48 0f       	add	r20, r24
    150a:	59 1f       	adc	r21, r25
    150c:	6a 1f       	adc	r22, r26
    150e:	7b 1f       	adc	r23, r27
    1510:	aa 0c       	add	r10, r10
    1512:	bb 1c       	adc	r11, r11
    1514:	cc 1c       	adc	r12, r12
    1516:	dd 1c       	adc	r13, r13
    1518:	97 fe       	sbrs	r9, 7
    151a:	08 c0       	rjmp	.+16     	; 0x152c <__mulsf3+0x110>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	a8 2a       	or	r10, r24
    1526:	b9 2a       	or	r11, r25
    1528:	ca 2a       	or	r12, r26
    152a:	db 2a       	or	r13, r27
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	e0 32       	cpi	r30, 0x20	; 32
    1530:	f1 05       	cpc	r31, r1
    1532:	49 f0       	breq	.+18     	; 0x1546 <__mulsf3+0x12a>
    1534:	66 0c       	add	r6, r6
    1536:	77 1c       	adc	r7, r7
    1538:	88 1c       	adc	r8, r8
    153a:	99 1c       	adc	r9, r9
    153c:	56 94       	lsr	r5
    153e:	47 94       	ror	r4
    1540:	37 94       	ror	r3
    1542:	27 94       	ror	r2
    1544:	c3 cf       	rjmp	.-122    	; 0x14cc <__mulsf3+0xb0>
    1546:	fa 85       	ldd	r31, Y+10	; 0x0a
    1548:	ea 89       	ldd	r30, Y+18	; 0x12
    154a:	2b 89       	ldd	r18, Y+19	; 0x13
    154c:	3c 89       	ldd	r19, Y+20	; 0x14
    154e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1550:	9c 85       	ldd	r25, Y+12	; 0x0c
    1552:	28 0f       	add	r18, r24
    1554:	39 1f       	adc	r19, r25
    1556:	2e 5f       	subi	r18, 0xFE	; 254
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	17 c0       	rjmp	.+46     	; 0x158a <__mulsf3+0x16e>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	89 2b       	or	r24, r25
    1564:	61 f0       	breq	.+24     	; 0x157e <__mulsf3+0x162>
    1566:	16 95       	lsr	r17
    1568:	07 95       	ror	r16
    156a:	f7 94       	ror	r15
    156c:	e7 94       	ror	r14
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e8       	ldi	r27, 0x80	; 128
    1576:	e8 2a       	or	r14, r24
    1578:	f9 2a       	or	r15, r25
    157a:	0a 2b       	or	r16, r26
    157c:	1b 2b       	or	r17, r27
    157e:	76 95       	lsr	r23
    1580:	67 95       	ror	r22
    1582:	57 95       	ror	r21
    1584:	47 95       	ror	r20
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	77 fd       	sbrc	r23, 7
    158c:	e7 cf       	rjmp	.-50     	; 0x155c <__mulsf3+0x140>
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <__mulsf3+0x18c>
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	17 fd       	sbrc	r17, 7
    159a:	41 60       	ori	r20, 0x01	; 1
    159c:	ee 0c       	add	r14, r14
    159e:	ff 1c       	adc	r15, r15
    15a0:	00 1f       	adc	r16, r16
    15a2:	11 1f       	adc	r17, r17
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	30 40       	sbci	r19, 0x00	; 0
    15a8:	40 30       	cpi	r20, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	59 07       	cpc	r21, r25
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	69 07       	cpc	r22, r25
    15b2:	90 e4       	ldi	r25, 0x40	; 64
    15b4:	79 07       	cpc	r23, r25
    15b6:	60 f3       	brcs	.-40     	; 0x1590 <__mulsf3+0x174>
    15b8:	2b 8f       	std	Y+27, r18	; 0x1b
    15ba:	3c 8f       	std	Y+28, r19	; 0x1c
    15bc:	db 01       	movw	r26, r22
    15be:	ca 01       	movw	r24, r20
    15c0:	8f 77       	andi	r24, 0x7F	; 127
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	a0 70       	andi	r26, 0x00	; 0
    15c6:	b0 70       	andi	r27, 0x00	; 0
    15c8:	80 34       	cpi	r24, 0x40	; 64
    15ca:	91 05       	cpc	r25, r1
    15cc:	a1 05       	cpc	r26, r1
    15ce:	b1 05       	cpc	r27, r1
    15d0:	61 f4       	brne	.+24     	; 0x15ea <__mulsf3+0x1ce>
    15d2:	47 fd       	sbrc	r20, 7
    15d4:	0a c0       	rjmp	.+20     	; 0x15ea <__mulsf3+0x1ce>
    15d6:	e1 14       	cp	r14, r1
    15d8:	f1 04       	cpc	r15, r1
    15da:	01 05       	cpc	r16, r1
    15dc:	11 05       	cpc	r17, r1
    15de:	29 f0       	breq	.+10     	; 0x15ea <__mulsf3+0x1ce>
    15e0:	40 5c       	subi	r20, 0xC0	; 192
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	6f 4f       	sbci	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	40 78       	andi	r20, 0x80	; 128
    15ea:	1a 8e       	std	Y+26, r1	; 0x1a
    15ec:	fe 17       	cp	r31, r30
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <__mulsf3+0x1d8>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	8a 8f       	std	Y+26, r24	; 0x1a
    15f4:	4d 8f       	std	Y+29, r20	; 0x1d
    15f6:	5e 8f       	std	Y+30, r21	; 0x1e
    15f8:	6f 8f       	std	Y+31, r22	; 0x1f
    15fa:	78 a3       	std	Y+32, r23	; 0x20
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	ce 01       	movw	r24, r28
    1602:	49 96       	adiw	r24, 0x19	; 25
    1604:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__pack_f>
    1608:	a0 96       	adiw	r28, 0x20	; 32
    160a:	e2 e1       	ldi	r30, 0x12	; 18
    160c:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00001610 <__gtsf2>:
    1610:	a8 e1       	ldi	r26, 0x18	; 24
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
    161c:	69 83       	std	Y+1, r22	; 0x01
    161e:	7a 83       	std	Y+2, r23	; 0x02
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	2d 83       	std	Y+5, r18	; 0x05
    1626:	3e 83       	std	Y+6, r19	; 0x06
    1628:	4f 83       	std	Y+7, r20	; 0x07
    162a:	58 87       	std	Y+8, r21	; 0x08
    162c:	89 e0       	ldi	r24, 0x09	; 9
    162e:	e8 2e       	mov	r14, r24
    1630:	f1 2c       	mov	r15, r1
    1632:	ec 0e       	add	r14, r28
    1634:	fd 1e       	adc	r15, r29
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	b7 01       	movw	r22, r14
    163c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1640:	8e 01       	movw	r16, r28
    1642:	0f 5e       	subi	r16, 0xEF	; 239
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	ce 01       	movw	r24, r28
    1648:	05 96       	adiw	r24, 0x05	; 5
    164a:	b8 01       	movw	r22, r16
    164c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	40 f0       	brcs	.+16     	; 0x1666 <__gtsf2+0x56>
    1656:	89 89       	ldd	r24, Y+17	; 0x11
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	28 f0       	brcs	.+10     	; 0x1666 <__gtsf2+0x56>
    165c:	c7 01       	movw	r24, r14
    165e:	b8 01       	movw	r22, r16
    1660:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fpcmp_parts_f>
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <__gtsf2+0x58>
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	68 96       	adiw	r28, 0x18	; 24
    166a:	e6 e0       	ldi	r30, 0x06	; 6
    166c:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

00001670 <__gesf2>:
    1670:	a8 e1       	ldi	r26, 0x18	; 24
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e3       	ldi	r30, 0x3E	; 62
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
    167c:	69 83       	std	Y+1, r22	; 0x01
    167e:	7a 83       	std	Y+2, r23	; 0x02
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	3e 83       	std	Y+6, r19	; 0x06
    1688:	4f 83       	std	Y+7, r20	; 0x07
    168a:	58 87       	std	Y+8, r21	; 0x08
    168c:	89 e0       	ldi	r24, 0x09	; 9
    168e:	e8 2e       	mov	r14, r24
    1690:	f1 2c       	mov	r15, r1
    1692:	ec 0e       	add	r14, r28
    1694:	fd 1e       	adc	r15, r29
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	b7 01       	movw	r22, r14
    169c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    16a0:	8e 01       	movw	r16, r28
    16a2:	0f 5e       	subi	r16, 0xEF	; 239
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	ce 01       	movw	r24, r28
    16a8:	05 96       	adiw	r24, 0x05	; 5
    16aa:	b8 01       	movw	r22, r16
    16ac:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	40 f0       	brcs	.+16     	; 0x16c6 <__gesf2+0x56>
    16b6:	89 89       	ldd	r24, Y+17	; 0x11
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	28 f0       	brcs	.+10     	; 0x16c6 <__gesf2+0x56>
    16bc:	c7 01       	movw	r24, r14
    16be:	b8 01       	movw	r22, r16
    16c0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fpcmp_parts_f>
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <__gesf2+0x58>
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
    16c8:	68 96       	adiw	r28, 0x18	; 24
    16ca:	e6 e0       	ldi	r30, 0x06	; 6
    16cc:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

000016d0 <__ltsf2>:
    16d0:	a8 e1       	ldi	r26, 0x18	; 24
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ee e6       	ldi	r30, 0x6E	; 110
    16d6:	fb e0       	ldi	r31, 0x0B	; 11
    16d8:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
    16dc:	69 83       	std	Y+1, r22	; 0x01
    16de:	7a 83       	std	Y+2, r23	; 0x02
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	2d 83       	std	Y+5, r18	; 0x05
    16e6:	3e 83       	std	Y+6, r19	; 0x06
    16e8:	4f 83       	std	Y+7, r20	; 0x07
    16ea:	58 87       	std	Y+8, r21	; 0x08
    16ec:	89 e0       	ldi	r24, 0x09	; 9
    16ee:	e8 2e       	mov	r14, r24
    16f0:	f1 2c       	mov	r15, r1
    16f2:	ec 0e       	add	r14, r28
    16f4:	fd 1e       	adc	r15, r29
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	b7 01       	movw	r22, r14
    16fc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1700:	8e 01       	movw	r16, r28
    1702:	0f 5e       	subi	r16, 0xEF	; 239
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	ce 01       	movw	r24, r28
    1708:	05 96       	adiw	r24, 0x05	; 5
    170a:	b8 01       	movw	r22, r16
    170c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	40 f0       	brcs	.+16     	; 0x1726 <__ltsf2+0x56>
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	28 f0       	brcs	.+10     	; 0x1726 <__ltsf2+0x56>
    171c:	c7 01       	movw	r24, r14
    171e:	b8 01       	movw	r22, r16
    1720:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fpcmp_parts_f>
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <__ltsf2+0x58>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	68 96       	adiw	r28, 0x18	; 24
    172a:	e6 e0       	ldi	r30, 0x06	; 6
    172c:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

00001730 <__fixsfsi>:
    1730:	ac e0       	ldi	r26, 0x0C	; 12
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__prologue_saves__+0x20>
    173c:	69 83       	std	Y+1, r22	; 0x01
    173e:	7a 83       	std	Y+2, r23	; 0x02
    1740:	8b 83       	std	Y+3, r24	; 0x03
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	be 01       	movw	r22, r28
    174a:	6b 5f       	subi	r22, 0xFB	; 251
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__unpack_f>
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	61 f1       	breq	.+88     	; 0x17b0 <__fixsfsi+0x80>
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	50 f1       	brcs	.+84     	; 0x17b0 <__fixsfsi+0x80>
    175c:	84 30       	cpi	r24, 0x04	; 4
    175e:	21 f4       	brne	.+8      	; 0x1768 <__fixsfsi+0x38>
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	88 23       	and	r24, r24
    1764:	51 f1       	breq	.+84     	; 0x17ba <__fixsfsi+0x8a>
    1766:	2e c0       	rjmp	.+92     	; 0x17c4 <__fixsfsi+0x94>
    1768:	2f 81       	ldd	r18, Y+7	; 0x07
    176a:	38 85       	ldd	r19, Y+8	; 0x08
    176c:	37 fd       	sbrc	r19, 7
    176e:	20 c0       	rjmp	.+64     	; 0x17b0 <__fixsfsi+0x80>
    1770:	6e 81       	ldd	r22, Y+6	; 0x06
    1772:	2f 31       	cpi	r18, 0x1F	; 31
    1774:	31 05       	cpc	r19, r1
    1776:	1c f0       	brlt	.+6      	; 0x177e <__fixsfsi+0x4e>
    1778:	66 23       	and	r22, r22
    177a:	f9 f0       	breq	.+62     	; 0x17ba <__fixsfsi+0x8a>
    177c:	23 c0       	rjmp	.+70     	; 0x17c4 <__fixsfsi+0x94>
    177e:	8e e1       	ldi	r24, 0x1E	; 30
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	82 1b       	sub	r24, r18
    1784:	93 0b       	sbc	r25, r19
    1786:	29 85       	ldd	r18, Y+9	; 0x09
    1788:	3a 85       	ldd	r19, Y+10	; 0x0a
    178a:	4b 85       	ldd	r20, Y+11	; 0x0b
    178c:	5c 85       	ldd	r21, Y+12	; 0x0c
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__fixsfsi+0x68>
    1790:	56 95       	lsr	r21
    1792:	47 95       	ror	r20
    1794:	37 95       	ror	r19
    1796:	27 95       	ror	r18
    1798:	8a 95       	dec	r24
    179a:	d2 f7       	brpl	.-12     	; 0x1790 <__fixsfsi+0x60>
    179c:	66 23       	and	r22, r22
    179e:	b1 f0       	breq	.+44     	; 0x17cc <__fixsfsi+0x9c>
    17a0:	50 95       	com	r21
    17a2:	40 95       	com	r20
    17a4:	30 95       	com	r19
    17a6:	21 95       	neg	r18
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	4f 4f       	sbci	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	0e c0       	rjmp	.+28     	; 0x17cc <__fixsfsi+0x9c>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <__fixsfsi+0x9c>
    17ba:	2f ef       	ldi	r18, 0xFF	; 255
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f ef       	ldi	r20, 0xFF	; 255
    17c0:	5f e7       	ldi	r21, 0x7F	; 127
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <__fixsfsi+0x9c>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e8       	ldi	r21, 0x80	; 128
    17cc:	b9 01       	movw	r22, r18
    17ce:	ca 01       	movw	r24, r20
    17d0:	2c 96       	adiw	r28, 0x0c	; 12
    17d2:	e2 e0       	ldi	r30, 0x02	; 2
    17d4:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__epilogue_restores__+0x20>

000017d8 <__pack_f>:
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	fc 01       	movw	r30, r24
    17e4:	e4 80       	ldd	r14, Z+4	; 0x04
    17e6:	f5 80       	ldd	r15, Z+5	; 0x05
    17e8:	06 81       	ldd	r16, Z+6	; 0x06
    17ea:	17 81       	ldd	r17, Z+7	; 0x07
    17ec:	d1 80       	ldd	r13, Z+1	; 0x01
    17ee:	80 81       	ld	r24, Z
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	48 f4       	brcc	.+18     	; 0x1806 <__pack_f+0x2e>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e1       	ldi	r26, 0x10	; 16
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 2a       	or	r14, r24
    17fe:	f9 2a       	or	r15, r25
    1800:	0a 2b       	or	r16, r26
    1802:	1b 2b       	or	r17, r27
    1804:	a5 c0       	rjmp	.+330    	; 0x1950 <__pack_f+0x178>
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	09 f4       	brne	.+2      	; 0x180c <__pack_f+0x34>
    180a:	9f c0       	rjmp	.+318    	; 0x194a <__pack_f+0x172>
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	21 f4       	brne	.+8      	; 0x1818 <__pack_f+0x40>
    1810:	ee 24       	eor	r14, r14
    1812:	ff 24       	eor	r15, r15
    1814:	87 01       	movw	r16, r14
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <__pack_f+0x4a>
    1818:	e1 14       	cp	r14, r1
    181a:	f1 04       	cpc	r15, r1
    181c:	01 05       	cpc	r16, r1
    181e:	11 05       	cpc	r17, r1
    1820:	19 f4       	brne	.+6      	; 0x1828 <__pack_f+0x50>
    1822:	e0 e0       	ldi	r30, 0x00	; 0
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	96 c0       	rjmp	.+300    	; 0x1954 <__pack_f+0x17c>
    1828:	62 81       	ldd	r22, Z+2	; 0x02
    182a:	73 81       	ldd	r23, Z+3	; 0x03
    182c:	9f ef       	ldi	r25, 0xFF	; 255
    182e:	62 38       	cpi	r22, 0x82	; 130
    1830:	79 07       	cpc	r23, r25
    1832:	0c f0       	brlt	.+2      	; 0x1836 <__pack_f+0x5e>
    1834:	5b c0       	rjmp	.+182    	; 0x18ec <__pack_f+0x114>
    1836:	22 e8       	ldi	r18, 0x82	; 130
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	26 1b       	sub	r18, r22
    183c:	37 0b       	sbc	r19, r23
    183e:	2a 31       	cpi	r18, 0x1A	; 26
    1840:	31 05       	cpc	r19, r1
    1842:	2c f0       	brlt	.+10     	; 0x184e <__pack_f+0x76>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	2a c0       	rjmp	.+84     	; 0x18a2 <__pack_f+0xca>
    184e:	b8 01       	movw	r22, r16
    1850:	a7 01       	movw	r20, r14
    1852:	02 2e       	mov	r0, r18
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__pack_f+0x86>
    1856:	76 95       	lsr	r23
    1858:	67 95       	ror	r22
    185a:	57 95       	ror	r21
    185c:	47 95       	ror	r20
    185e:	0a 94       	dec	r0
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <__pack_f+0x7e>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <__pack_f+0x9c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	aa 1f       	adc	r26, r26
    1872:	bb 1f       	adc	r27, r27
    1874:	2a 95       	dec	r18
    1876:	d2 f7       	brpl	.-12     	; 0x186c <__pack_f+0x94>
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	a1 09       	sbc	r26, r1
    187c:	b1 09       	sbc	r27, r1
    187e:	8e 21       	and	r24, r14
    1880:	9f 21       	and	r25, r15
    1882:	a0 23       	and	r26, r16
    1884:	b1 23       	and	r27, r17
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	a1 05       	cpc	r26, r1
    188a:	b1 05       	cpc	r27, r1
    188c:	21 f0       	breq	.+8      	; 0x1896 <__pack_f+0xbe>
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	9a 01       	movw	r18, r20
    1898:	ab 01       	movw	r20, r22
    189a:	28 2b       	or	r18, r24
    189c:	39 2b       	or	r19, r25
    189e:	4a 2b       	or	r20, r26
    18a0:	5b 2b       	or	r21, r27
    18a2:	da 01       	movw	r26, r20
    18a4:	c9 01       	movw	r24, r18
    18a6:	8f 77       	andi	r24, 0x7F	; 127
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	a0 70       	andi	r26, 0x00	; 0
    18ac:	b0 70       	andi	r27, 0x00	; 0
    18ae:	80 34       	cpi	r24, 0x40	; 64
    18b0:	91 05       	cpc	r25, r1
    18b2:	a1 05       	cpc	r26, r1
    18b4:	b1 05       	cpc	r27, r1
    18b6:	39 f4       	brne	.+14     	; 0x18c6 <__pack_f+0xee>
    18b8:	27 ff       	sbrs	r18, 7
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <__pack_f+0xf6>
    18bc:	20 5c       	subi	r18, 0xC0	; 192
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	4f 4f       	sbci	r20, 0xFF	; 255
    18c2:	5f 4f       	sbci	r21, 0xFF	; 255
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <__pack_f+0xf6>
    18c6:	21 5c       	subi	r18, 0xC1	; 193
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	4f 4f       	sbci	r20, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255
    18ce:	e0 e0       	ldi	r30, 0x00	; 0
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	20 30       	cpi	r18, 0x00	; 0
    18d4:	a0 e0       	ldi	r26, 0x00	; 0
    18d6:	3a 07       	cpc	r19, r26
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	4a 07       	cpc	r20, r26
    18dc:	a0 e4       	ldi	r26, 0x40	; 64
    18de:	5a 07       	cpc	r21, r26
    18e0:	10 f0       	brcs	.+4      	; 0x18e6 <__pack_f+0x10e>
    18e2:	e1 e0       	ldi	r30, 0x01	; 1
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	79 01       	movw	r14, r18
    18e8:	8a 01       	movw	r16, r20
    18ea:	27 c0       	rjmp	.+78     	; 0x193a <__pack_f+0x162>
    18ec:	60 38       	cpi	r22, 0x80	; 128
    18ee:	71 05       	cpc	r23, r1
    18f0:	64 f5       	brge	.+88     	; 0x194a <__pack_f+0x172>
    18f2:	fb 01       	movw	r30, r22
    18f4:	e1 58       	subi	r30, 0x81	; 129
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	d8 01       	movw	r26, r16
    18fa:	c7 01       	movw	r24, r14
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	a0 70       	andi	r26, 0x00	; 0
    1902:	b0 70       	andi	r27, 0x00	; 0
    1904:	80 34       	cpi	r24, 0x40	; 64
    1906:	91 05       	cpc	r25, r1
    1908:	a1 05       	cpc	r26, r1
    190a:	b1 05       	cpc	r27, r1
    190c:	39 f4       	brne	.+14     	; 0x191c <__pack_f+0x144>
    190e:	e7 fe       	sbrs	r14, 7
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__pack_f+0x154>
    1912:	80 e4       	ldi	r24, 0x40	; 64
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__pack_f+0x14c>
    191c:	8f e3       	ldi	r24, 0x3F	; 63
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 0e       	add	r14, r24
    1926:	f9 1e       	adc	r15, r25
    1928:	0a 1f       	adc	r16, r26
    192a:	1b 1f       	adc	r17, r27
    192c:	17 ff       	sbrs	r17, 7
    192e:	05 c0       	rjmp	.+10     	; 0x193a <__pack_f+0x162>
    1930:	16 95       	lsr	r17
    1932:	07 95       	ror	r16
    1934:	f7 94       	ror	r15
    1936:	e7 94       	ror	r14
    1938:	31 96       	adiw	r30, 0x01	; 1
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	16 95       	lsr	r17
    193e:	07 95       	ror	r16
    1940:	f7 94       	ror	r15
    1942:	e7 94       	ror	r14
    1944:	8a 95       	dec	r24
    1946:	d1 f7       	brne	.-12     	; 0x193c <__pack_f+0x164>
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <__pack_f+0x17c>
    194a:	ee 24       	eor	r14, r14
    194c:	ff 24       	eor	r15, r15
    194e:	87 01       	movw	r16, r14
    1950:	ef ef       	ldi	r30, 0xFF	; 255
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	6e 2f       	mov	r22, r30
    1956:	67 95       	ror	r22
    1958:	66 27       	eor	r22, r22
    195a:	67 95       	ror	r22
    195c:	90 2f       	mov	r25, r16
    195e:	9f 77       	andi	r25, 0x7F	; 127
    1960:	d7 94       	ror	r13
    1962:	dd 24       	eor	r13, r13
    1964:	d7 94       	ror	r13
    1966:	8e 2f       	mov	r24, r30
    1968:	86 95       	lsr	r24
    196a:	49 2f       	mov	r20, r25
    196c:	46 2b       	or	r20, r22
    196e:	58 2f       	mov	r21, r24
    1970:	5d 29       	or	r21, r13
    1972:	b7 01       	movw	r22, r14
    1974:	ca 01       	movw	r24, r20
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	08 95       	ret

00001982 <__unpack_f>:
    1982:	fc 01       	movw	r30, r24
    1984:	db 01       	movw	r26, r22
    1986:	40 81       	ld	r20, Z
    1988:	51 81       	ldd	r21, Z+1	; 0x01
    198a:	22 81       	ldd	r18, Z+2	; 0x02
    198c:	62 2f       	mov	r22, r18
    198e:	6f 77       	andi	r22, 0x7F	; 127
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	22 1f       	adc	r18, r18
    1994:	22 27       	eor	r18, r18
    1996:	22 1f       	adc	r18, r18
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	89 2f       	mov	r24, r25
    199c:	88 0f       	add	r24, r24
    199e:	82 2b       	or	r24, r18
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	99 1f       	adc	r25, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	99 1f       	adc	r25, r25
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	9c 93       	st	X, r25
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	21 15       	cp	r18, r1
    19b2:	31 05       	cpc	r19, r1
    19b4:	a9 f5       	brne	.+106    	; 0x1a20 <__unpack_f+0x9e>
    19b6:	41 15       	cp	r20, r1
    19b8:	51 05       	cpc	r21, r1
    19ba:	61 05       	cpc	r22, r1
    19bc:	71 05       	cpc	r23, r1
    19be:	11 f4       	brne	.+4      	; 0x19c4 <__unpack_f+0x42>
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	37 c0       	rjmp	.+110    	; 0x1a32 <__unpack_f+0xb0>
    19c4:	82 e8       	ldi	r24, 0x82	; 130
    19c6:	9f ef       	ldi	r25, 0xFF	; 255
    19c8:	13 96       	adiw	r26, 0x03	; 3
    19ca:	9c 93       	st	X, r25
    19cc:	8e 93       	st	-X, r24
    19ce:	12 97       	sbiw	r26, 0x02	; 2
    19d0:	9a 01       	movw	r18, r20
    19d2:	ab 01       	movw	r20, r22
    19d4:	67 e0       	ldi	r22, 0x07	; 7
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	44 1f       	adc	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	6a 95       	dec	r22
    19e0:	d1 f7       	brne	.-12     	; 0x19d6 <__unpack_f+0x54>
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	8c 93       	st	X, r24
    19e6:	0d c0       	rjmp	.+26     	; 0x1a02 <__unpack_f+0x80>
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	44 1f       	adc	r20, r20
    19ee:	55 1f       	adc	r21, r21
    19f0:	12 96       	adiw	r26, 0x02	; 2
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	13 97       	sbiw	r26, 0x03	; 3
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	13 96       	adiw	r26, 0x03	; 3
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	20 30       	cpi	r18, 0x00	; 0
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	38 07       	cpc	r19, r24
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	48 07       	cpc	r20, r24
    1a0c:	80 e4       	ldi	r24, 0x40	; 64
    1a0e:	58 07       	cpc	r21, r24
    1a10:	58 f3       	brcs	.-42     	; 0x19e8 <__unpack_f+0x66>
    1a12:	14 96       	adiw	r26, 0x04	; 4
    1a14:	2d 93       	st	X+, r18
    1a16:	3d 93       	st	X+, r19
    1a18:	4d 93       	st	X+, r20
    1a1a:	5c 93       	st	X, r21
    1a1c:	17 97       	sbiw	r26, 0x07	; 7
    1a1e:	08 95       	ret
    1a20:	2f 3f       	cpi	r18, 0xFF	; 255
    1a22:	31 05       	cpc	r19, r1
    1a24:	79 f4       	brne	.+30     	; 0x1a44 <__unpack_f+0xc2>
    1a26:	41 15       	cp	r20, r1
    1a28:	51 05       	cpc	r21, r1
    1a2a:	61 05       	cpc	r22, r1
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	19 f4       	brne	.+6      	; 0x1a36 <__unpack_f+0xb4>
    1a30:	84 e0       	ldi	r24, 0x04	; 4
    1a32:	8c 93       	st	X, r24
    1a34:	08 95       	ret
    1a36:	64 ff       	sbrs	r22, 4
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <__unpack_f+0xbe>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8c 93       	st	X, r24
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <__unpack_f+0xe2>
    1a40:	1c 92       	st	X, r1
    1a42:	10 c0       	rjmp	.+32     	; 0x1a64 <__unpack_f+0xe2>
    1a44:	2f 57       	subi	r18, 0x7F	; 127
    1a46:	30 40       	sbci	r19, 0x00	; 0
    1a48:	13 96       	adiw	r26, 0x03	; 3
    1a4a:	3c 93       	st	X, r19
    1a4c:	2e 93       	st	-X, r18
    1a4e:	12 97       	sbiw	r26, 0x02	; 2
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	8c 93       	st	X, r24
    1a54:	87 e0       	ldi	r24, 0x07	; 7
    1a56:	44 0f       	add	r20, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	66 1f       	adc	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	8a 95       	dec	r24
    1a60:	d1 f7       	brne	.-12     	; 0x1a56 <__unpack_f+0xd4>
    1a62:	70 64       	ori	r23, 0x40	; 64
    1a64:	14 96       	adiw	r26, 0x04	; 4
    1a66:	4d 93       	st	X+, r20
    1a68:	5d 93       	st	X+, r21
    1a6a:	6d 93       	st	X+, r22
    1a6c:	7c 93       	st	X, r23
    1a6e:	17 97       	sbiw	r26, 0x07	; 7
    1a70:	08 95       	ret

00001a72 <__fpcmp_parts_f>:
    1a72:	1f 93       	push	r17
    1a74:	dc 01       	movw	r26, r24
    1a76:	fb 01       	movw	r30, r22
    1a78:	9c 91       	ld	r25, X
    1a7a:	92 30       	cpi	r25, 0x02	; 2
    1a7c:	08 f4       	brcc	.+2      	; 0x1a80 <__fpcmp_parts_f+0xe>
    1a7e:	47 c0       	rjmp	.+142    	; 0x1b0e <__fpcmp_parts_f+0x9c>
    1a80:	80 81       	ld	r24, Z
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <__fpcmp_parts_f+0x16>
    1a86:	43 c0       	rjmp	.+134    	; 0x1b0e <__fpcmp_parts_f+0x9c>
    1a88:	94 30       	cpi	r25, 0x04	; 4
    1a8a:	51 f4       	brne	.+20     	; 0x1aa0 <__fpcmp_parts_f+0x2e>
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	1c 91       	ld	r17, X
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	99 f5       	brne	.+102    	; 0x1afa <__fpcmp_parts_f+0x88>
    1a94:	81 81       	ldd	r24, Z+1	; 0x01
    1a96:	68 2f       	mov	r22, r24
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	61 1b       	sub	r22, r17
    1a9c:	71 09       	sbc	r23, r1
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <__fpcmp_parts_f+0xac>
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	21 f0       	breq	.+8      	; 0x1aac <__fpcmp_parts_f+0x3a>
    1aa4:	92 30       	cpi	r25, 0x02	; 2
    1aa6:	31 f4       	brne	.+12     	; 0x1ab4 <__fpcmp_parts_f+0x42>
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	b9 f1       	breq	.+110    	; 0x1b1a <__fpcmp_parts_f+0xa8>
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	88 23       	and	r24, r24
    1ab0:	89 f1       	breq	.+98     	; 0x1b14 <__fpcmp_parts_f+0xa2>
    1ab2:	2d c0       	rjmp	.+90     	; 0x1b0e <__fpcmp_parts_f+0x9c>
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	1c 91       	ld	r17, X
    1ab8:	11 97       	sbiw	r26, 0x01	; 1
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	f1 f0       	breq	.+60     	; 0x1afa <__fpcmp_parts_f+0x88>
    1abe:	81 81       	ldd	r24, Z+1	; 0x01
    1ac0:	18 17       	cp	r17, r24
    1ac2:	d9 f4       	brne	.+54     	; 0x1afa <__fpcmp_parts_f+0x88>
    1ac4:	12 96       	adiw	r26, 0x02	; 2
    1ac6:	2d 91       	ld	r18, X+
    1ac8:	3c 91       	ld	r19, X
    1aca:	13 97       	sbiw	r26, 0x03	; 3
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	94 f0       	brlt	.+36     	; 0x1afa <__fpcmp_parts_f+0x88>
    1ad6:	28 17       	cp	r18, r24
    1ad8:	39 07       	cpc	r19, r25
    1ada:	bc f0       	brlt	.+46     	; 0x1b0a <__fpcmp_parts_f+0x98>
    1adc:	14 96       	adiw	r26, 0x04	; 4
    1ade:	8d 91       	ld	r24, X+
    1ae0:	9d 91       	ld	r25, X+
    1ae2:	0d 90       	ld	r0, X+
    1ae4:	bc 91       	ld	r27, X
    1ae6:	a0 2d       	mov	r26, r0
    1ae8:	24 81       	ldd	r18, Z+4	; 0x04
    1aea:	35 81       	ldd	r19, Z+5	; 0x05
    1aec:	46 81       	ldd	r20, Z+6	; 0x06
    1aee:	57 81       	ldd	r21, Z+7	; 0x07
    1af0:	28 17       	cp	r18, r24
    1af2:	39 07       	cpc	r19, r25
    1af4:	4a 07       	cpc	r20, r26
    1af6:	5b 07       	cpc	r21, r27
    1af8:	18 f4       	brcc	.+6      	; 0x1b00 <__fpcmp_parts_f+0x8e>
    1afa:	11 23       	and	r17, r17
    1afc:	41 f0       	breq	.+16     	; 0x1b0e <__fpcmp_parts_f+0x9c>
    1afe:	0a c0       	rjmp	.+20     	; 0x1b14 <__fpcmp_parts_f+0xa2>
    1b00:	82 17       	cp	r24, r18
    1b02:	93 07       	cpc	r25, r19
    1b04:	a4 07       	cpc	r26, r20
    1b06:	b5 07       	cpc	r27, r21
    1b08:	40 f4       	brcc	.+16     	; 0x1b1a <__fpcmp_parts_f+0xa8>
    1b0a:	11 23       	and	r17, r17
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <__fpcmp_parts_f+0xa2>
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <__fpcmp_parts_f+0xac>
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	7f ef       	ldi	r23, 0xFF	; 255
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <__fpcmp_parts_f+0xac>
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	cb 01       	movw	r24, r22
    1b20:	1f 91       	pop	r17
    1b22:	08 95       	ret

00001b24 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <GPIO_setupPinDirection+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <GPIO_setupPinDirection+0x8>
    1b2c:	0f 92       	push	r0
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6a 83       	std	Y+2, r22	; 0x02
    1b36:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	88 30       	cpi	r24, 0x08	; 8
    1b3c:	08 f0       	brcs	.+2      	; 0x1b40 <GPIO_setupPinDirection+0x1c>
    1b3e:	d5 c0       	rjmp	.+426    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <GPIO_setupPinDirection+0x24>
    1b46:	d1 c0       	rjmp	.+418    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	3d 83       	std	Y+5, r19	; 0x05
    1b50:	2c 83       	std	Y+4, r18	; 0x04
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	9d 81       	ldd	r25, Y+5	; 0x05
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <GPIO_setupPinDirection+0x3a>
    1b5c:	43 c0       	rjmp	.+134    	; 0x1be4 <GPIO_setupPinDirection+0xc0>
    1b5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b60:	3d 81       	ldd	r19, Y+5	; 0x05
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <GPIO_setupPinDirection+0x4e>
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	71 f0       	breq	.+28     	; 0x1b8c <GPIO_setupPinDirection+0x68>
    1b70:	bc c0       	rjmp	.+376    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
    1b72:	2c 81       	ldd	r18, Y+4	; 0x04
    1b74:	3d 81       	ldd	r19, Y+5	; 0x05
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <GPIO_setupPinDirection+0x5a>
    1b7c:	5f c0       	rjmp	.+190    	; 0x1c3c <GPIO_setupPinDirection+0x118>
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <GPIO_setupPinDirection+0x66>
    1b88:	85 c0       	rjmp	.+266    	; 0x1c94 <GPIO_setupPinDirection+0x170>
    1b8a:	af c0       	rjmp	.+350    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	a1 f4       	brne	.+40     	; 0x1bba <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b92:	aa e3       	ldi	r26, 0x3A	; 58
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ea e3       	ldi	r30, 0x3A	; 58
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_setupPinDirection+0x8c>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_setupPinDirection+0x88>
    1bb4:	84 2b       	or	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	98 c0       	rjmp	.+304    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bba:	aa e3       	ldi	r26, 0x3A	; 58
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	ea e3       	ldi	r30, 0x3A	; 58
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_setupPinDirection+0xb4>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_setupPinDirection+0xb0>
    1bdc:	80 95       	com	r24
    1bde:	84 23       	and	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	83 c0       	rjmp	.+262    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	a1 f4       	brne	.+40     	; 0x1c12 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1bea:	a7 e3       	ldi	r26, 0x37	; 55
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e7 e3       	ldi	r30, 0x37	; 55
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_setupPinDirection+0xe4>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_setupPinDirection+0xe0>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	6c c0       	rjmp	.+216    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c12:	a7 e3       	ldi	r26, 0x37	; 55
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e7 e3       	ldi	r30, 0x37	; 55
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_setupPinDirection+0x10c>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_setupPinDirection+0x108>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	57 c0       	rjmp	.+174    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	a1 f4       	brne	.+40     	; 0x1c6a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c42:	a4 e3       	ldi	r26, 0x34	; 52
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e4 e3       	ldi	r30, 0x34	; 52
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_setupPinDirection+0x13c>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_setupPinDirection+0x138>
    1c64:	84 2b       	or	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	40 c0       	rjmp	.+128    	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c6a:	a4 e3       	ldi	r26, 0x34	; 52
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e4 e3       	ldi	r30, 0x34	; 52
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_setupPinDirection+0x164>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_setupPinDirection+0x160>
    1c8c:	80 95       	com	r24
    1c8e:	84 23       	and	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	2b c0       	rjmp	.+86     	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	a1 f4       	brne	.+40     	; 0x1cc2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c9a:	a1 e3       	ldi	r26, 0x31	; 49
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e1 e3       	ldi	r30, 0x31	; 49
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_setupPinDirection+0x194>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_setupPinDirection+0x190>
    1cbc:	84 2b       	or	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cc2:	a1 e3       	ldi	r26, 0x31	; 49
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e1 e3       	ldi	r30, 0x31	; 49
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_setupPinDirection+0x1bc>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_setupPinDirection+0x1b8>
    1ce4:	80 95       	com	r24
    1ce6:	84 23       	and	r24, r20
    1ce8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePin+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_writePin+0x8>
    1d02:	0f 92       	push	r0
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	6a 83       	std	Y+2, r22	; 0x02
    1d0c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <GPIO_writePin+0x1c>
    1d14:	d5 c0       	rjmp	.+426    	; 0x1ec0 <GPIO_writePin+0x1c6>
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	84 30       	cpi	r24, 0x04	; 4
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <GPIO_writePin+0x24>
    1d1c:	d1 c0       	rjmp	.+418    	; 0x1ec0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3d 83       	std	Y+5, r19	; 0x05
    1d26:	2c 83       	std	Y+4, r18	; 0x04
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <GPIO_writePin+0x3a>
    1d32:	43 c0       	rjmp	.+134    	; 0x1dba <GPIO_writePin+0xc0>
    1d34:	2c 81       	ldd	r18, Y+4	; 0x04
    1d36:	3d 81       	ldd	r19, Y+5	; 0x05
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <GPIO_writePin+0x4e>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	71 f0       	breq	.+28     	; 0x1d62 <GPIO_writePin+0x68>
    1d46:	bc c0       	rjmp	.+376    	; 0x1ec0 <GPIO_writePin+0x1c6>
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <GPIO_writePin+0x5a>
    1d52:	5f c0       	rjmp	.+190    	; 0x1e12 <GPIO_writePin+0x118>
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	9d 81       	ldd	r25, Y+5	; 0x05
    1d58:	83 30       	cpi	r24, 0x03	; 3
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <GPIO_writePin+0x66>
    1d5e:	85 c0       	rjmp	.+266    	; 0x1e6a <GPIO_writePin+0x170>
    1d60:	af c0       	rjmp	.+350    	; 0x1ec0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	a1 f4       	brne	.+40     	; 0x1d90 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d68:	ab e3       	ldi	r26, 0x3B	; 59
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	eb e3       	ldi	r30, 0x3B	; 59
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <GPIO_writePin+0x8c>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <GPIO_writePin+0x88>
    1d8a:	84 2b       	or	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	98 c0       	rjmp	.+304    	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e3       	ldi	r30, 0x3B	; 59
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <GPIO_writePin+0xb4>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <GPIO_writePin+0xb0>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	83 c0       	rjmp	.+262    	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	a1 f4       	brne	.+40     	; 0x1de8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1dc0:	a8 e3       	ldi	r26, 0x38	; 56
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e8 e3       	ldi	r30, 0x38	; 56
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <GPIO_writePin+0xe4>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <GPIO_writePin+0xe0>
    1de2:	84 2b       	or	r24, r20
    1de4:	8c 93       	st	X, r24
    1de6:	6c c0       	rjmp	.+216    	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1de8:	a8 e3       	ldi	r26, 0x38	; 56
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e8 e3       	ldi	r30, 0x38	; 56
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <GPIO_writePin+0x10c>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <GPIO_writePin+0x108>
    1e0a:	80 95       	com	r24
    1e0c:	84 23       	and	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	57 c0       	rjmp	.+174    	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	a1 f4       	brne	.+40     	; 0x1e40 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_writePin+0x13c>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_writePin+0x138>
    1e3a:	84 2b       	or	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	40 c0       	rjmp	.+128    	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e40:	a5 e3       	ldi	r26, 0x35	; 53
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <GPIO_writePin+0x164>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <GPIO_writePin+0x160>
    1e62:	80 95       	com	r24
    1e64:	84 23       	and	r24, r20
    1e66:	8c 93       	st	X, r24
    1e68:	2b c0       	rjmp	.+86     	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	a1 f4       	brne	.+40     	; 0x1e98 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e70:	a2 e3       	ldi	r26, 0x32	; 50
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e2 e3       	ldi	r30, 0x32	; 50
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <GPIO_writePin+0x194>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <GPIO_writePin+0x190>
    1e92:	84 2b       	or	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e98:	a2 e3       	ldi	r26, 0x32	; 50
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e2 e3       	ldi	r30, 0x32	; 50
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <GPIO_writePin+0x1bc>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <GPIO_writePin+0x1b8>
    1eba:	80 95       	com	r24
    1ebc:	84 23       	and	r24, r20
    1ebe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <GPIO_readPin+0x6>
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <GPIO_readPin+0x8>
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1ee2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 30       	cpi	r24, 0x08	; 8
    1ee8:	08 f0       	brcs	.+2      	; 0x1eec <GPIO_readPin+0x1c>
    1eea:	84 c0       	rjmp	.+264    	; 0x1ff4 <GPIO_readPin+0x124>
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <GPIO_readPin+0x24>
    1ef2:	80 c0       	rjmp	.+256    	; 0x1ff4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	3d 83       	std	Y+5, r19	; 0x05
    1efc:	2c 83       	std	Y+4, r18	; 0x04
    1efe:	4c 81       	ldd	r20, Y+4	; 0x04
    1f00:	5d 81       	ldd	r21, Y+5	; 0x05
    1f02:	41 30       	cpi	r20, 0x01	; 1
    1f04:	51 05       	cpc	r21, r1
    1f06:	79 f1       	breq	.+94     	; 0x1f66 <GPIO_readPin+0x96>
    1f08:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	91 05       	cpc	r25, r1
    1f10:	34 f4       	brge	.+12     	; 0x1f1e <GPIO_readPin+0x4e>
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	21 15       	cp	r18, r1
    1f18:	31 05       	cpc	r19, r1
    1f1a:	69 f0       	breq	.+26     	; 0x1f36 <GPIO_readPin+0x66>
    1f1c:	6b c0       	rjmp	.+214    	; 0x1ff4 <GPIO_readPin+0x124>
    1f1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f20:	5d 81       	ldd	r21, Y+5	; 0x05
    1f22:	42 30       	cpi	r20, 0x02	; 2
    1f24:	51 05       	cpc	r21, r1
    1f26:	b9 f1       	breq	.+110    	; 0x1f96 <GPIO_readPin+0xc6>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <GPIO_readPin+0x64>
    1f32:	49 c0       	rjmp	.+146    	; 0x1fc6 <GPIO_readPin+0xf6>
    1f34:	5f c0       	rjmp	.+190    	; 0x1ff4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f36:	e9 e3       	ldi	r30, 0x39	; 57
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a9 01       	movw	r20, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_readPin+0x7e>
    1f4a:	55 95       	asr	r21
    1f4c:	47 95       	ror	r20
    1f4e:	8a 95       	dec	r24
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_readPin+0x7a>
    1f52:	ca 01       	movw	r24, r20
    1f54:	81 70       	andi	r24, 0x01	; 1
    1f56:	90 70       	andi	r25, 0x00	; 0
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	49 c0       	rjmp	.+146    	; 0x1ff4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	47 c0       	rjmp	.+142    	; 0x1ff4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f66:	e6 e3       	ldi	r30, 0x36	; 54
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a9 01       	movw	r20, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <GPIO_readPin+0xae>
    1f7a:	55 95       	asr	r21
    1f7c:	47 95       	ror	r20
    1f7e:	8a 95       	dec	r24
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <GPIO_readPin+0xaa>
    1f82:	ca 01       	movw	r24, r20
    1f84:	81 70       	andi	r24, 0x01	; 1
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	88 23       	and	r24, r24
    1f8a:	19 f0       	breq	.+6      	; 0x1f92 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	31 c0       	rjmp	.+98     	; 0x1ff4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f92:	19 82       	std	Y+1, r1	; 0x01
    1f94:	2f c0       	rjmp	.+94     	; 0x1ff4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f96:	e3 e3       	ldi	r30, 0x33	; 51
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a9 01       	movw	r20, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <GPIO_readPin+0xde>
    1faa:	55 95       	asr	r21
    1fac:	47 95       	ror	r20
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <GPIO_readPin+0xda>
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	88 23       	and	r24, r24
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	19 c0       	rjmp	.+50     	; 0x1ff4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
    1fc4:	17 c0       	rjmp	.+46     	; 0x1ff4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1fc6:	e0 e3       	ldi	r30, 0x30	; 48
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <GPIO_readPin+0x10e>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <GPIO_readPin+0x10a>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	90 70       	andi	r25, 0x00	; 0
    1fe8:	88 23       	and	r24, r24
    1fea:	19 f0       	breq	.+6      	; 0x1ff2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ff2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <GPIO_setupPortDirection+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <GPIO_setupPortDirection+0x8>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	84 30       	cpi	r24, 0x04	; 4
    201a:	90 f5       	brcc	.+100    	; 0x2080 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	3c 83       	std	Y+4, r19	; 0x04
    2024:	2b 83       	std	Y+3, r18	; 0x03
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	91 05       	cpc	r25, r1
    202e:	d1 f0       	breq	.+52     	; 0x2064 <GPIO_setupPortDirection+0x5e>
    2030:	2b 81       	ldd	r18, Y+3	; 0x03
    2032:	3c 81       	ldd	r19, Y+4	; 0x04
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	31 05       	cpc	r19, r1
    2038:	2c f4       	brge	.+10     	; 0x2044 <GPIO_setupPortDirection+0x3e>
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	61 f0       	breq	.+24     	; 0x205a <GPIO_setupPortDirection+0x54>
    2042:	1e c0       	rjmp	.+60     	; 0x2080 <GPIO_setupPortDirection+0x7a>
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	22 30       	cpi	r18, 0x02	; 2
    204a:	31 05       	cpc	r19, r1
    204c:	81 f0       	breq	.+32     	; 0x206e <GPIO_setupPortDirection+0x68>
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	91 05       	cpc	r25, r1
    2056:	81 f0       	breq	.+32     	; 0x2078 <GPIO_setupPortDirection+0x72>
    2058:	13 c0       	rjmp	.+38     	; 0x2080 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    205a:	ea e3       	ldi	r30, 0x3A	; 58
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	80 83       	st	Z, r24
    2062:	0e c0       	rjmp	.+28     	; 0x2080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2064:	e7 e3       	ldi	r30, 0x37	; 55
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	80 83       	st	Z, r24
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    206e:	e4 e3       	ldi	r30, 0x34	; 52
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	80 83       	st	Z, r24
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2078:	e1 e3       	ldi	r30, 0x31	; 49
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_writePort+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <GPIO_writePort+0x8>
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	90 f5       	brcc	.+100    	; 0x2108 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	3c 83       	std	Y+4, r19	; 0x04
    20ac:	2b 83       	std	Y+3, r18	; 0x03
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	91 05       	cpc	r25, r1
    20b6:	d1 f0       	breq	.+52     	; 0x20ec <GPIO_writePort+0x5e>
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	3c 81       	ldd	r19, Y+4	; 0x04
    20bc:	22 30       	cpi	r18, 0x02	; 2
    20be:	31 05       	cpc	r19, r1
    20c0:	2c f4       	brge	.+10     	; 0x20cc <GPIO_writePort+0x3e>
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	61 f0       	breq	.+24     	; 0x20e2 <GPIO_writePort+0x54>
    20ca:	1e c0       	rjmp	.+60     	; 0x2108 <GPIO_writePort+0x7a>
    20cc:	2b 81       	ldd	r18, Y+3	; 0x03
    20ce:	3c 81       	ldd	r19, Y+4	; 0x04
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	31 05       	cpc	r19, r1
    20d4:	81 f0       	breq	.+32     	; 0x20f6 <GPIO_writePort+0x68>
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	91 05       	cpc	r25, r1
    20de:	81 f0       	breq	.+32     	; 0x2100 <GPIO_writePort+0x72>
    20e0:	13 c0       	rjmp	.+38     	; 0x2108 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    20e2:	eb e3       	ldi	r30, 0x3B	; 59
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	80 83       	st	Z, r24
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20ec:	e8 e3       	ldi	r30, 0x38	; 56
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	80 83       	st	Z, r24
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20f6:	e5 e3       	ldi	r30, 0x35	; 53
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	80 83       	st	Z, r24
    20fe:	04 c0       	rjmp	.+8      	; 0x2108 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2100:	e2 e3       	ldi	r30, 0x32	; 50
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	80 83       	st	Z, r24
			break;
		}
	}
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <GPIO_readPort+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <GPIO_readPort+0x8>
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2124:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	90 f5       	brcc	.+100    	; 0x2190 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3c 83       	std	Y+4, r19	; 0x04
    2134:	2b 83       	std	Y+3, r18	; 0x03
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	91 05       	cpc	r25, r1
    213e:	d1 f0       	breq	.+52     	; 0x2174 <GPIO_readPort+0x5e>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	2c f4       	brge	.+10     	; 0x2154 <GPIO_readPort+0x3e>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	61 f0       	breq	.+24     	; 0x216a <GPIO_readPort+0x54>
    2152:	1e c0       	rjmp	.+60     	; 0x2190 <GPIO_readPort+0x7a>
    2154:	2b 81       	ldd	r18, Y+3	; 0x03
    2156:	3c 81       	ldd	r19, Y+4	; 0x04
    2158:	22 30       	cpi	r18, 0x02	; 2
    215a:	31 05       	cpc	r19, r1
    215c:	81 f0       	breq	.+32     	; 0x217e <GPIO_readPort+0x68>
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	91 05       	cpc	r25, r1
    2166:	81 f0       	breq	.+32     	; 0x2188 <GPIO_readPort+0x72>
    2168:	13 c0       	rjmp	.+38     	; 0x2190 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    216a:	e9 e3       	ldi	r30, 0x39	; 57
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2174:	e6 e3       	ldi	r30, 0x36	; 54
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    217e:	e3 e3       	ldi	r30, 0x33	; 51
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2188:	e0 e3       	ldi	r30, 0x30	; 48
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <main>:
/*global ticks to count seconds counted by timer
 and been volatile to be able to used in ISR code */
uint8 g_secondsCounter=0;

int main()
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <main+0x6>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	/* turn on the LCD module to display on it  */
	LCD_init();
    21aa:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_init>
	/* turn on the UART module to be able to communicate with CONTROL_ECU */
	UART_init(&UART_configuration);
    21ae:	88 e6       	ldi	r24, 0x68	; 104
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	0e 94 09 1c 	call	0x3812	; 0x3812 <UART_init>
	/* display welcome message on the screen when the user turn on the system */
	LCD_displayStringRowColumn(0,2,"DOOR LOCKER SECURITY SYSTEM");
    21b6:	20 e6       	ldi	r18, 0x60	; 96
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	a9 01       	movw	r20, r18
    21c0:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,12,"WELCOME");
    21c4:	2c e7       	ldi	r18, 0x7C	; 124
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	6c e0       	ldi	r22, 0x0C	; 12
    21cc:	a9 01       	movw	r20, r18
    21ce:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	/*_delay_ms(4000);*/

	SREG |= (1<<7);       /* Enable I-Bit for Interrupts */
    21d2:	af e5       	ldi	r26, 0x5F	; 95
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef e5       	ldi	r30, 0x5F	; 95
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	8c 93       	st	X, r24
	 * his password or there is password already at the EEPROM
	 * first time ==> setup new password
	 * not first time ==> display the main menu
	 */
	while (1){
		sendCommand(CHECK_IF_SAVED);
    21e0:	8b e0       	ldi	r24, 0x0B	; 11
    21e2:	0e 94 0a 11 	call	0x2214	; 0x2214 <sendCommand>
		switch(receiveCommand()){
    21e6:	0e 94 22 11 	call	0x2244	; 0x2244 <receiveCommand>
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	3a 83       	std	Y+2, r19	; 0x02
    21f0:	29 83       	std	Y+1, r18	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	8c 30       	cpi	r24, 0x0C	; 12
    21f8:	91 05       	cpc	r25, r1
    21fa:	31 f0       	breq	.+12     	; 0x2208 <main+0x68>
    21fc:	29 81       	ldd	r18, Y+1	; 0x01
    21fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2200:	2d 30       	cpi	r18, 0x0D	; 13
    2202:	31 05       	cpc	r19, r1
    2204:	21 f0       	breq	.+8      	; 0x220e <main+0x6e>
    2206:	ec cf       	rjmp	.-40     	; 0x21e0 <main+0x40>
		case SAVED:
			mainOptionsDisplay();
    2208:	0e 94 58 13 	call	0x26b0	; 0x26b0 <mainOptionsDisplay>
    220c:	e9 cf       	rjmp	.-46     	; 0x21e0 <main+0x40>
			break;
		case NOT_SAVED:
			enterNewPassword();
    220e:	0e 94 19 12 	call	0x2432	; 0x2432 <enterNewPassword>
    2212:	e6 cf       	rjmp	.-52     	; 0x21e0 <main+0x40>

00002214 <sendCommand>:
 * function to send common command between two ECUs to the other ECU
 * every command sent indicate to specific action both ECUs know it
 * and making sure that both ECUs are ready to receive and send at specific time
 */
void sendCommand(uint8 command)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01

	UART_sendByte(READY);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
	while(UART_receiveByte() != READY){};
    2226:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	e1 f7       	brne	.-8      	; 0x2226 <sendCommand+0x12>
	UART_sendByte(command);
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
	while(UART_receiveByte() != DONE){};
    2234:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	e1 f7       	brne	.-8      	; 0x2234 <sendCommand+0x20>

}
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <receiveCommand>:
 * function to receive common command between two ECUs from the other ECU
 * every command sent indicate to specific action both ECUs know it
 * and making sure that both ECUs are ready to receive and send at specific time
 */
uint8 receiveCommand(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62

	while(UART_receiveByte() != READY){};
    224c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	e1 f7       	brne	.-8      	; 0x224c <receiveCommand+0x8>
	UART_sendByte(READY);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
	g_command=UART_receiveByte();
    225a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    225e:	80 93 86 02 	sts	0x0286, r24
	UART_sendByte(DONE);
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
	return g_command;
    2268:	80 91 86 02 	lds	r24, 0x0286
}
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <getPassword>:
/*
 * Description:
 * function to get the password from user and check if it valid or not and print ****
 * on the screen instead of the password and store it in global variable
 */
void getPassword(void){
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	60 97       	sbiw	r28, 0x10	; 16
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
	uint8 counter=0,key;
    2286:	18 8a       	std	Y+16, r1	; 0x10
	key=KEYPAD_getPressedKey();
    2288:	0e 94 67 15 	call	0x2ace	; 0x2ace <KEYPAD_getPressedKey>
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	98 c0       	rjmp	.+304    	; 0x23c0 <getPassword+0x14e>
	while(key != '=')
	{
		key=KEYPAD_getPressedKey();
    2290:	0e 94 67 15 	call	0x2ace	; 0x2ace <KEYPAD_getPressedKey>
    2294:	8f 87       	std	Y+15, r24	; 0x0f
		if( (key != '+' &&key != '-' &&key != '*' && key != '%' && key != '=') || (key>= 0 && key<= 9) )
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	8b 32       	cpi	r24, 0x2B	; 43
    229a:	61 f0       	breq	.+24     	; 0x22b4 <getPassword+0x42>
    229c:	8f 85       	ldd	r24, Y+15	; 0x0f
    229e:	8d 32       	cpi	r24, 0x2D	; 45
    22a0:	49 f0       	breq	.+18     	; 0x22b4 <getPassword+0x42>
    22a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a4:	8a 32       	cpi	r24, 0x2A	; 42
    22a6:	31 f0       	breq	.+12     	; 0x22b4 <getPassword+0x42>
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	85 32       	cpi	r24, 0x25	; 37
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <getPassword+0x42>
    22ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b0:	8d 33       	cpi	r24, 0x3D	; 61
    22b2:	19 f4       	brne	.+6      	; 0x22ba <getPassword+0x48>
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	8a 30       	cpi	r24, 0x0A	; 10
    22b8:	88 f4       	brcc	.+34     	; 0x22dc <getPassword+0x6a>
		{
			if(counter < PASSWORD_SIZE)
    22ba:	88 89       	ldd	r24, Y+16	; 0x10
    22bc:	85 30       	cpi	r24, 0x05	; 5
    22be:	70 f4       	brcc	.+28     	; 0x22dc <getPassword+0x6a>
			{
				g_password[counter]=key;
    22c0:	88 89       	ldd	r24, Y+16	; 0x10
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	fc 01       	movw	r30, r24
    22c8:	ef 57       	subi	r30, 0x7F	; 127
    22ca:	fd 4f       	sbci	r31, 0xFD	; 253
    22cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ce:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    22d0:	8a e2       	ldi	r24, 0x2A	; 42
    22d2:	0e 94 76 18 	call	0x30ec	; 0x30ec <LCD_displayCharacter>
				counter++;
    22d6:	88 89       	ldd	r24, Y+16	; 0x10
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	88 8b       	std	Y+16, r24	; 0x10
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e8       	ldi	r25, 0x80	; 128
    22e0:	ab eb       	ldi	r26, 0xBB	; 187
    22e2:	b4 e4       	ldi	r27, 0x44	; 68
    22e4:	8b 87       	std	Y+11, r24	; 0x0b
    22e6:	9c 87       	std	Y+12, r25	; 0x0c
    22e8:	ad 87       	std	Y+13, r26	; 0x0d
    22ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	53 e4       	ldi	r21, 0x43	; 67
    22fc:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	8f 83       	std	Y+7, r24	; 0x07
    2306:	98 87       	std	Y+8, r25	; 0x08
    2308:	a9 87       	std	Y+9, r26	; 0x09
    230a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <getPassword+0xbc>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <getPassword+0x13a>
	else if (__tmp > 65535)
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <getPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	0f c0       	rjmp	.+30     	; 0x238e <getPassword+0x11c>
    2370:	89 e1       	ldi	r24, 0x19	; 25
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <getPassword+0x10a>
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <getPassword+0xfe>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <getPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <getPassword+0x146>
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
 * on the screen instead of the password and store it in global variable
 */
void getPassword(void){
	uint8 counter=0,key;
	key=KEYPAD_getPressedKey();
	while(key != '=')
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c2:	8d 33       	cpi	r24, 0x3D	; 61
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <getPassword+0x156>
    23c6:	64 cf       	rjmp	.-312    	; 0x2290 <getPassword+0x1e>
				counter++;
			}
		}
		_delay_ms(1500);
	}
}
    23c8:	60 96       	adiw	r28, 0x10	; 16
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <sendPassword>:
 * description:
 * function to send the password to CONTROL_ECU
 * but at first check if CONTROL_ECU is ready to receive or not
 */
void sendPassword(uint8 *password_arr)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <sendPassword+0x6>
    23e0:	0f 92       	push	r0
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    23e8:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(READY);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
	while(UART_receiveByte() != READY){};
    23f0:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <sendPassword+0x16>
	/* as soon as  CONTROL_ECU is ready HMI_ECU starts to send the password */
	for(uint8 i=0;i<PASSWORD_SIZE;i++)
    23f8:	19 82       	std	Y+1, r1	; 0x01
    23fa:	0e c0       	rjmp	.+28     	; 0x2418 <sendPassword+0x3e>
	{
		UART_sendByte(password_arr[i]);
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	fc 01       	movw	r30, r24
    2408:	e2 0f       	add	r30, r18
    240a:	f3 1f       	adc	r31, r19
    240c:	80 81       	ld	r24, Z
    240e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_sendByte>
void sendPassword(uint8 *password_arr)
{
	UART_sendByte(READY);
	while(UART_receiveByte() != READY){};
	/* as soon as  CONTROL_ECU is ready HMI_ECU starts to send the password */
	for(uint8 i=0;i<PASSWORD_SIZE;i++)
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	85 30       	cpi	r24, 0x05	; 5
    241c:	78 f3       	brcs	.-34     	; 0x23fc <sendPassword+0x22>
	{
		UART_sendByte(password_arr[i]);
	}
	while(UART_receiveByte() != DONE){};
    241e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <UART_receiveByte>
    2422:	82 30       	cpi	r24, 0x02	; 2
    2424:	e1 f7       	brne	.-8      	; 0x241e <sendPassword+0x44>
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <enterNewPassword>:

/*
 * description:
 * function to display enter new password screen
 */
void enterNewPassword(void){
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	6c 97       	sbiw	r28, 0x1c	; 28
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2446:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLEASE ENTER NEW PASSWORD(5): ");
    244a:	24 e8       	ldi	r18, 0x84	; 132
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	a9 01       	movw	r20, r18
    2454:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_moveCursor(1,13);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	6d e0       	ldi	r22, 0x0D	; 13
    245c:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_moveCursor>
	getPassword(); /* take password from user and store it in global variable */
    2460:	0e 94 39 11 	call	0x2272	; 0x2272 <getPassword>
	/*send command to CONTROL_ECU to make sure to let it know
     that it is sending the password  */
	sendCommand(PASSWORD_SEND);
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	0e 94 0a 11 	call	0x2214	; 0x2214 <sendCommand>
	sendPassword(g_password); /* sending the password to CONTROL_ECU */
    246a:	81 e8       	ldi	r24, 0x81	; 129
    246c:	92 e0       	ldi	r25, 0x02	; 2
    246e:	0e 94 ed 11 	call	0x23da	; 0x23da <sendPassword>
	LCD_clearScreen();
    2472:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	/* ask the user to Re-enter the password */
	LCD_displayStringRowColumn(0,0,"PLEASE RE-ENTER PASSWORD(5): ");
    2476:	23 ea       	ldi	r18, 0xA3	; 163
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_moveCursor(1,13);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	6d e0       	ldi	r22, 0x0D	; 13
    2488:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_moveCursor>
	getPassword(); /* take the password from the user and store it in the same global variable*/
    248c:	0e 94 39 11 	call	0x2272	; 0x2272 <getPassword>
	/*send command to CONTROL_ECU to ask it
     to check if two passwords are the same or not */
	sendCommand(PASSWORD_CONFIRMATION_SEND);
    2490:	86 e0       	ldi	r24, 0x06	; 6
    2492:	0e 94 0a 11 	call	0x2214	; 0x2214 <sendCommand>
	/* sending the Re-entered password to CONTROL_ECU to get the confirmation*/
	sendPassword(g_password);
    2496:	81 e8       	ldi	r24, 0x81	; 129
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	0e 94 ed 11 	call	0x23da	; 0x23da <sendPassword>
	 * if it is PASSWORD_MATCH is means that it checked on the two password
	 * and they are matched and password has been changed so display message
	 * on the screen that NEW PASSWORD IS SET
	 * if the command is PASSWORD_MISMATCHED it means that two passwords are not matched
	 * and ask the user to enter new password again until entering two matched passwords */
	if(receiveCommand()==PASSWORD_MATCH){
    249e:	0e 94 22 11 	call	0x2244	; 0x2244 <receiveCommand>
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <enterNewPassword+0x76>
    24a6:	7e c0       	rjmp	.+252    	; 0x25a4 <enterNewPassword+0x172>
		LCD_clearScreen();
    24a8:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
		LCD_displayStringRowColumn(0,6,"NEW PASSWORD IS SET");
    24ac:	21 ec       	ldi	r18, 0xC1	; 193
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	66 e0       	ldi	r22, 0x06	; 6
    24b4:	a9 01       	movw	r20, r18
    24b6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	aa e7       	ldi	r26, 0x7A	; 122
    24c0:	b5 e4       	ldi	r27, 0x45	; 69
    24c2:	89 8f       	std	Y+25, r24	; 0x19
    24c4:	9a 8f       	std	Y+26, r25	; 0x1a
    24c6:	ab 8f       	std	Y+27, r26	; 0x1b
    24c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	69 8d       	ldd	r22, Y+25	; 0x19
    24cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	53 e4       	ldi	r21, 0x43	; 67
    24da:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8d 8b       	std	Y+21, r24	; 0x15
    24e4:	9e 8b       	std	Y+22, r25	; 0x16
    24e6:	af 8b       	std	Y+23, r26	; 0x17
    24e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <enterNewPassword+0xda>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	3f c0       	rjmp	.+126    	; 0x258a <enterNewPassword+0x158>
	else if (__tmp > 65535)
    250c:	6d 89       	ldd	r22, Y+21	; 0x15
    250e:	7e 89       	ldd	r23, Y+22	; 0x16
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <enterNewPassword+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	69 8d       	ldd	r22, Y+25	; 0x19
    2526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9c 8b       	std	Y+20, r25	; 0x14
    254a:	8b 8b       	std	Y+19, r24	; 0x13
    254c:	0f c0       	rjmp	.+30     	; 0x256c <enterNewPassword+0x13a>
    254e:	89 e1       	ldi	r24, 0x19	; 25
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9a 8b       	std	Y+18, r25	; 0x12
    2554:	89 8b       	std	Y+17, r24	; 0x11
    2556:	89 89       	ldd	r24, Y+17	; 0x11
    2558:	9a 89       	ldd	r25, Y+18	; 0x12
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <enterNewPassword+0x128>
    255e:	9a 8b       	std	Y+18, r25	; 0x12
    2560:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	9c 89       	ldd	r25, Y+20	; 0x14
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <enterNewPassword+0x11c>
    2574:	14 c0       	rjmp	.+40     	; 0x259e <enterNewPassword+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	98 8b       	std	Y+16, r25	; 0x10
    2590:	8f 87       	std	Y+15, r24	; 0x0f
    2592:	8f 85       	ldd	r24, Y+15	; 0x0f
    2594:	98 89       	ldd	r25, Y+16	; 0x10
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <enterNewPassword+0x164>
    259a:	98 8b       	std	Y+16, r25	; 0x10
    259c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4000);
		mainOptionsDisplay();
    259e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <mainOptionsDisplay>
    25a2:	7d c0       	rjmp	.+250    	; 0x269e <enterNewPassword+0x26c>
	}
	else{
		LCD_clearScreen();
    25a4:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
		LCD_displayStringRowColumn(0,8,"MISMATCHING!!");
    25a8:	25 ed       	ldi	r18, 0xD5	; 213
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	68 e0       	ldi	r22, 0x08	; 8
    25b0:	a9 01       	movw	r20, r18
    25b2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	aa e7       	ldi	r26, 0x7A	; 122
    25bc:	b5 e4       	ldi	r27, 0x45	; 69
    25be:	8b 87       	std	Y+11, r24	; 0x0b
    25c0:	9c 87       	std	Y+12, r25	; 0x0c
    25c2:	ad 87       	std	Y+13, r26	; 0x0d
    25c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	53 e4       	ldi	r21, 0x43	; 67
    25d6:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8f 83       	std	Y+7, r24	; 0x07
    25e0:	98 87       	std	Y+8, r25	; 0x08
    25e2:	a9 87       	std	Y+9, r26	; 0x09
    25e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <enterNewPassword+0x1d6>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <enterNewPassword+0x254>
	else if (__tmp > 65535)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <enterNewPassword+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <enterNewPassword+0x236>
    264a:	89 e1       	ldi	r24, 0x19	; 25
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	8b 83       	std	Y+3, r24	; 0x03
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <enterNewPassword+0x224>
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <enterNewPassword+0x218>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <enterNewPassword+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <enterNewPassword+0x260>
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		enterNewPassword();
    269a:	0e 94 19 12 	call	0x2432	; 0x2432 <enterNewPassword>
	}
}
    269e:	6c 96       	adiw	r28, 0x1c	; 28
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <mainOptionsDisplay>:
/*
 * description:
 * function to display main options screen and get the user's choice
 * then pass it to another function called mainOptions
 */
void mainOptionsDisplay(void){
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
	mainOptionData data;
	LCD_clearScreen();
    26ba:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,7,"+: OPEN DOOR ");
    26be:	23 ee       	ldi	r18, 0xE3	; 227
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	67 e0       	ldi	r22, 0x07	; 7
    26c6:	a9 01       	movw	r20, r18
    26c8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,7,"-: CHANGE PAWSSWORD ");
    26cc:	21 ef       	ldi	r18, 0xF1	; 241
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	67 e0       	ldi	r22, 0x07	; 7
    26d4:	a9 01       	movw	r20, r18
    26d6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	data =KEYPAD_getPressedKey() ;
    26da:	0e 94 67 15 	call	0x2ace	; 0x2ace <KEYPAD_getPressedKey>
    26de:	89 83       	std	Y+1, r24	; 0x01
	mainOptions(data);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	0e 94 77 13 	call	0x26ee	; 0x26ee <mainOptions>
}
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <mainOptions>:
 * and if the password is not correct, it gives the user the chance to
 * try 2 - times again
 * if he entered the password wrong 3- times
 * it display an error message for 60-seconds then return to the main options screen
 */
void mainOptions(mainOptionData data){
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	a1 97       	sbiw	r28, 0x21	; 33
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
    2704:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	/* ask the user to enter the password */
	LCD_displayStringRowColumn(0,0,"PLEASE ENTER THE PASSWORD(5): ");
    2708:	26 e0       	ldi	r18, 0x06	; 6
    270a:	31 e0       	ldi	r19, 0x01	; 1
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	a9 01       	movw	r20, r18
    2712:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_moveCursor(1,13);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	6d e0       	ldi	r22, 0x0D	; 13
    271a:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_moveCursor>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e8       	ldi	r25, 0x80	; 128
    2722:	ab e3       	ldi	r26, 0x3B	; 59
    2724:	b5 e4       	ldi	r27, 0x45	; 69
    2726:	89 8f       	std	Y+25, r24	; 0x19
    2728:	9a 8f       	std	Y+26, r25	; 0x1a
    272a:	ab 8f       	std	Y+27, r26	; 0x1b
    272c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272e:	69 8d       	ldd	r22, Y+25	; 0x19
    2730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	4a e7       	ldi	r20, 0x7A	; 122
    273c:	53 e4       	ldi	r21, 0x43	; 67
    273e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	8d 8b       	std	Y+21, r24	; 0x15
    2748:	9e 8b       	std	Y+22, r25	; 0x16
    274a:	af 8b       	std	Y+23, r26	; 0x17
    274c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    274e:	6d 89       	ldd	r22, Y+21	; 0x15
    2750:	7e 89       	ldd	r23, Y+22	; 0x16
    2752:	8f 89       	ldd	r24, Y+23	; 0x17
    2754:	98 8d       	ldd	r25, Y+24	; 0x18
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	2c f4       	brge	.+10     	; 0x2770 <mainOptions+0x82>
		__ticks = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9c 8b       	std	Y+20, r25	; 0x14
    276c:	8b 8b       	std	Y+19, r24	; 0x13
    276e:	3f c0       	rjmp	.+126    	; 0x27ee <mainOptions+0x100>
	else if (__tmp > 65535)
    2770:	6d 89       	ldd	r22, Y+21	; 0x15
    2772:	7e 89       	ldd	r23, Y+22	; 0x16
    2774:	8f 89       	ldd	r24, Y+23	; 0x17
    2776:	98 8d       	ldd	r25, Y+24	; 0x18
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	3f ef       	ldi	r19, 0xFF	; 255
    277c:	4f e7       	ldi	r20, 0x7F	; 127
    277e:	57 e4       	ldi	r21, 0x47	; 71
    2780:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2784:	18 16       	cp	r1, r24
    2786:	4c f5       	brge	.+82     	; 0x27da <mainOptions+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2788:	69 8d       	ldd	r22, Y+25	; 0x19
    278a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    278c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <mainOptions+0xe2>
    27b2:	89 e1       	ldi	r24, 0x19	; 25
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9a 8b       	std	Y+18, r25	; 0x12
    27b8:	89 8b       	std	Y+17, r24	; 0x11
    27ba:	89 89       	ldd	r24, Y+17	; 0x11
    27bc:	9a 89       	ldd	r25, Y+18	; 0x12
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <mainOptions+0xd0>
    27c2:	9a 8b       	std	Y+18, r25	; 0x12
    27c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	9c 8b       	std	Y+20, r25	; 0x14
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	69 f7       	brne	.-38     	; 0x27b2 <mainOptions+0xc4>
    27d8:	14 c0       	rjmp	.+40     	; 0x2802 <mainOptions+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	98 8b       	std	Y+16, r25	; 0x10
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
    27f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f8:	98 89       	ldd	r25, Y+16	; 0x10
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <mainOptions+0x10c>
    27fe:	98 8b       	std	Y+16, r25	; 0x10
    2800:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	/*get the password from the user and send it to CONTROL_ECU to
	 * check if the entered password is correct or not */
	getPassword();
    2802:	0e 94 39 11 	call	0x2272	; 0x2272 <getPassword>
	sendCommand(CHECK_PASSWORD);
    2806:	89 e0       	ldi	r24, 0x09	; 9
    2808:	0e 94 0a 11 	call	0x2214	; 0x2214 <sendCommand>
	sendPassword(g_password);
    280c:	81 e8       	ldi	r24, 0x81	; 129
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	0e 94 ed 11 	call	0x23da	; 0x23da <sendPassword>
	 * screen after displaying a message which indicate that the entered password is wrong
	 * 3- if the CONTROL_ECU replies with ERROR_MESSAGE that indicate that the user
	 * entered the password wrong three times so it displaying an error message for 60-seconds
	 * then return to the main options menu
	 * */
	switch (receiveCommand()){
    2814:	0e 94 22 11 	call	0x2244	; 0x2244 <receiveCommand>
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	39 a3       	std	Y+33, r19	; 0x21
    281e:	28 a3       	std	Y+32, r18	; 0x20
    2820:	88 a1       	ldd	r24, Y+32	; 0x20
    2822:	99 a1       	ldd	r25, Y+33	; 0x21
    2824:	85 30       	cpi	r24, 0x05	; 5
    2826:	91 05       	cpc	r25, r1
    2828:	29 f1       	breq	.+74     	; 0x2874 <mainOptions+0x186>
    282a:	28 a1       	ldd	r18, Y+32	; 0x20
    282c:	39 a1       	ldd	r19, Y+33	; 0x21
    282e:	2a 30       	cpi	r18, 0x0A	; 10
    2830:	31 05       	cpc	r19, r1
    2832:	09 f4       	brne	.+2      	; 0x2836 <mainOptions+0x148>
    2834:	9e c0       	rjmp	.+316    	; 0x2972 <mainOptions+0x284>
    2836:	88 a1       	ldd	r24, Y+32	; 0x20
    2838:	99 a1       	ldd	r25, Y+33	; 0x21
    283a:	84 30       	cpi	r24, 0x04	; 4
    283c:	91 05       	cpc	r25, r1
    283e:	09 f0       	breq	.+2      	; 0x2842 <mainOptions+0x154>
    2840:	9a c0       	rjmp	.+308    	; 0x2976 <mainOptions+0x288>
	case PASSWORD_MATCH:
		switch (data){
    2842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	3f 8f       	std	Y+31, r19	; 0x1f
    284a:	2e 8f       	std	Y+30, r18	; 0x1e
    284c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    284e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2850:	8b 32       	cpi	r24, 0x2B	; 43
    2852:	91 05       	cpc	r25, r1
    2854:	31 f0       	breq	.+12     	; 0x2862 <mainOptions+0x174>
    2856:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2858:	3f 8d       	ldd	r19, Y+31	; 0x1f
    285a:	2d 32       	cpi	r18, 0x2D	; 45
    285c:	31 05       	cpc	r19, r1
    285e:	39 f0       	breq	.+14     	; 0x286e <mainOptions+0x180>
    2860:	8a c0       	rjmp	.+276    	; 0x2976 <mainOptions+0x288>
		case PLUS :
			sendCommand(OPEN_DOOR);
    2862:	88 e0       	ldi	r24, 0x08	; 8
    2864:	0e 94 0a 11 	call	0x2214	; 0x2214 <sendCommand>
			doorOpeningAndClosing();
    2868:	0e 94 ee 14 	call	0x29dc	; 0x29dc <doorOpeningAndClosing>
    286c:	84 c0       	rjmp	.+264    	; 0x2976 <mainOptions+0x288>
			break;
		case MINUS:
			enterNewPassword();
    286e:	0e 94 19 12 	call	0x2432	; 0x2432 <enterNewPassword>
    2872:	81 c0       	rjmp	.+258    	; 0x2976 <mainOptions+0x288>
			break;
		}
		break;
		case PASSWORD_MISMATCH:
			LCD_clearScreen();
    2874:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
			LCD_displayStringRowColumn(0,8,"WRONG PASSWORD!!!");
    2878:	25 e2       	ldi	r18, 0x25	; 37
    287a:	31 e0       	ldi	r19, 0x01	; 1
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	68 e0       	ldi	r22, 0x08	; 8
    2880:	a9 01       	movw	r20, r18
    2882:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	aa e7       	ldi	r26, 0x7A	; 122
    288c:	b5 e4       	ldi	r27, 0x45	; 69
    288e:	8b 87       	std	Y+11, r24	; 0x0b
    2890:	9c 87       	std	Y+12, r25	; 0x0c
    2892:	ad 87       	std	Y+13, r26	; 0x0d
    2894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	6b 85       	ldd	r22, Y+11	; 0x0b
    2898:	7c 85       	ldd	r23, Y+12	; 0x0c
    289a:	8d 85       	ldd	r24, Y+13	; 0x0d
    289c:	9e 85       	ldd	r25, Y+14	; 0x0e
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a e7       	ldi	r20, 0x7A	; 122
    28a4:	53 e4       	ldi	r21, 0x43	; 67
    28a6:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8f 83       	std	Y+7, r24	; 0x07
    28b0:	98 87       	std	Y+8, r25	; 0x08
    28b2:	a9 87       	std	Y+9, r26	; 0x09
    28b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <mainOptions+0x1ea>
		__ticks = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
    28d6:	3f c0       	rjmp	.+126    	; 0x2956 <mainOptions+0x268>
	else if (__tmp > 65535)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	4c f5       	brge	.+82     	; 0x2942 <mainOptions+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <mainOptions+0x24a>
    291a:	89 e1       	ldi	r24, 0x19	; 25
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 83       	std	Y+4, r25	; 0x04
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <mainOptions+0x238>
    292a:	9c 83       	std	Y+4, r25	; 0x04
    292c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <mainOptions+0x22c>
    2940:	14 c0       	rjmp	.+40     	; 0x296a <mainOptions+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	6f 81       	ldd	r22, Y+7	; 0x07
    2944:	78 85       	ldd	r23, Y+8	; 0x08
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	9a 83       	std	Y+2, r25	; 0x02
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <mainOptions+0x274>
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(4000);
			mainOptions(data);
    296a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296c:	0e 94 77 13 	call	0x26ee	; 0x26ee <mainOptions>
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <mainOptions+0x288>
			break;
		case ERROR_MESSAGE:
			ERROR_messageDisplay();
    2972:	0e 94 48 15 	call	0x2a90	; 0x2a90 <ERROR_messageDisplay>
			break;
	}
}
    2976:	a1 96       	adiw	r28, 0x21	; 33
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <TIMER0_motorCount>:
/*
 * description:
 * the ISR for TIMER0 to count a specific time for a message to be displayed on
 * screen during motor rotation
 */
void TIMER0_motorCount(void){
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2990:	80 91 7c 02 	lds	r24, 0x027C
    2994:	90 91 7d 02 	lds	r25, 0x027D
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	90 93 7d 02 	sts	0x027D, r25
    299e:	80 93 7c 02 	sts	0x027C, r24
	/* counting number of seconds according to number of interrupts */
	if (g_tick % (NUM_OF_INTERRUPTS_PER_SECOND )== 0)
    29a2:	80 91 7c 02 	lds	r24, 0x027C
    29a6:	90 91 7d 02 	lds	r25, 0x027D
    29aa:	83 70       	andi	r24, 0x03	; 3
    29ac:	90 70       	andi	r25, 0x00	; 0
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	29 f4       	brne	.+10     	; 0x29bc <TIMER0_motorCount+0x34>
	{
		g_secondsCounter++;
    29b2:	80 91 7e 02 	lds	r24, 0x027E
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	80 93 7e 02 	sts	0x027E, r24
	}

	if (g_secondsCounter == ( SECONDS_NUM_OPENING + SECONDS_NUM_CLOSING + SECONDS_NUM_HOLD )  )
    29bc:	80 91 7e 02 	lds	r24, 0x027E
    29c0:	81 32       	cpi	r24, 0x21	; 33
    29c2:	49 f4       	brne	.+18     	; 0x29d6 <TIMER0_motorCount+0x4e>
	{
		/* turn off the timer after counting a specific time*/
		g_tick=0;
    29c4:	10 92 7d 02 	sts	0x027D, r1
    29c8:	10 92 7c 02 	sts	0x027C, r1
		g_secondsCounter=0;
    29cc:	10 92 7e 02 	sts	0x027E, r1
		TIMER_deinit(TIMER_0);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <TIMER_deinit>
	}
}
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <doorOpeningAndClosing>:
 * description:
 * function to display messages on the screen to let user know
 * that the door is opening or closing according to the movement
 * of the motor and returning to the main options menu after finishing
 */
void doorOpeningAndClosing(void){
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    29e4:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	TIMER_init(&TIMER_configuration); /*turn on the timer to count */
    29e8:	84 e7       	ldi	r24, 0x74	; 116
    29ea:	92 e0       	ldi	r25, 0x02	; 2
    29ec:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <TIMER_init>
	TIMER_setCallBack(TIMER0_motorCount,TIMER_0); /* passing the ISR of timer0  */
    29f0:	84 ec       	ldi	r24, 0xC4	; 196
    29f2:	94 e1       	ldi	r25, 0x14	; 20
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <TIMER_setCallBack>
	/* display a message on the screen to let the user know that the door is opening */
	LCD_displayStringRowColumn(0,8,"DOOR IS OPENING");
    29fa:	27 e3       	ldi	r18, 0x37	; 55
    29fc:	31 e0       	ldi	r19, 0x01	; 1
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	68 e0       	ldi	r22, 0x08	; 8
    2a02:	a9 01       	movw	r20, r18
    2a04:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	while (g_secondsCounter!=SECONDS_NUM_OPENING){
    2a08:	80 91 7e 02 	lds	r24, 0x027E
    2a0c:	8f 30       	cpi	r24, 0x0F	; 15
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <doorOpeningAndClosing+0x2c>

	}LCD_clearScreen();
    2a10:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	while ( g_secondsCounter != (SECONDS_NUM_OPENING + SECONDS_NUM_HOLD)){
    2a14:	80 91 7e 02 	lds	r24, 0x027E
    2a18:	82 31       	cpi	r24, 0x12	; 18
    2a1a:	e1 f7       	brne	.-8      	; 0x2a14 <doorOpeningAndClosing+0x38>
	}
	/* display a message on the screen to let the user know that the door is closing */
	LCD_displayStringRowColumn(0,8,"DOOR IS CLOSING");
    2a1c:	27 e4       	ldi	r18, 0x47	; 71
    2a1e:	31 e0       	ldi	r19, 0x01	; 1
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	68 e0       	ldi	r22, 0x08	; 8
    2a24:	a9 01       	movw	r20, r18
    2a26:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	while ( g_secondsCounter != (SECONDS_NUM_OPENING + SECONDS_NUM_CLOSING+SECONDS_NUM_HOLD-1)){
    2a2a:	80 91 7e 02 	lds	r24, 0x027E
    2a2e:	80 32       	cpi	r24, 0x20	; 32
    2a30:	e1 f7       	brne	.-8      	; 0x2a2a <doorOpeningAndClosing+0x4e>
	}
	mainOptionsDisplay();
    2a32:	0e 94 58 13 	call	0x26b0	; 0x26b0 <mainOptionsDisplay>
}
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <TIMER0_errorScreen>:
/*
 * description:
 * the ISR for TIMER0 to count a specific time for an error message to be displayed on
 * screen during a specific time
 */
void TIMER0_errorScreen(void){
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2a44:	80 91 7c 02 	lds	r24, 0x027C
    2a48:	90 91 7d 02 	lds	r25, 0x027D
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	90 93 7d 02 	sts	0x027D, r25
    2a52:	80 93 7c 02 	sts	0x027C, r24
	if ((g_tick % NUM_OF_INTERRUPTS_PER_SECOND)==0){
    2a56:	80 91 7c 02 	lds	r24, 0x027C
    2a5a:	90 91 7d 02 	lds	r25, 0x027D
    2a5e:	83 70       	andi	r24, 0x03	; 3
    2a60:	90 70       	andi	r25, 0x00	; 0
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <TIMER0_errorScreen+0x34>
		g_secondsCounter++;
    2a66:	80 91 7e 02 	lds	r24, 0x027E
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	80 93 7e 02 	sts	0x027E, r24

	}
	if (g_secondsCounter==SECONDS_NUM_ERROR)
    2a70:	80 91 7e 02 	lds	r24, 0x027E
    2a74:	8c 33       	cpi	r24, 0x3C	; 60
    2a76:	49 f4       	brne	.+18     	; 0x2a8a <TIMER0_errorScreen+0x4e>
	{
		g_secondsCounter=0;
    2a78:	10 92 7e 02 	sts	0x027E, r1
		g_tick=0;
    2a7c:	10 92 7d 02 	sts	0x027D, r1
    2a80:	10 92 7c 02 	sts	0x027C, r1
		TIMER_deinit(TIMER_0);
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <TIMER_deinit>
	}
}
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <ERROR_messageDisplay>:
/*
 * description:
 * function to display error message on the screen for specific time
 * and return to the main options screen after finishing the required time
 */
void ERROR_messageDisplay(void){
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	TIMER_init(&TIMER_configuration);
    2a98:	84 e7       	ldi	r24, 0x74	; 116
    2a9a:	92 e0       	ldi	r25, 0x02	; 2
    2a9c:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <TIMER_init>
	TIMER_setCallBack(TIMER0_errorScreen,TIMER_0); /* passing the ISR of TIMER0 */
    2aa0:	8e e1       	ldi	r24, 0x1E	; 30
    2aa2:	95 e1       	ldi	r25, 0x15	; 21
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <TIMER_setCallBack>
	LCD_clearScreen();
    2aaa:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,12,"THIEF!!!");
    2aae:	27 e5       	ldi	r18, 0x57	; 87
    2ab0:	31 e0       	ldi	r19, 0x01	; 1
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	6c e0       	ldi	r22, 0x0C	; 12
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	while (g_secondsCounter != (SECONDS_NUM_ERROR-1)){
    2abc:	80 91 7e 02 	lds	r24, 0x027E
    2ac0:	8b 33       	cpi	r24, 0x3B	; 59
    2ac2:	e1 f7       	brne	.-8      	; 0x2abc <ERROR_messageDisplay+0x2c>

	}
	mainOptionsDisplay();/*returning to the main options screen */
    2ac4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <mainOptionsDisplay>
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <KEYPAD_getPressedKey+0x6>
    2ad4:	0f 92       	push	r0
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2ada:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2adc:	1b 82       	std	Y+3, r1	; 0x03
    2ade:	43 c0       	rjmp	.+134    	; 0x2b66 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	0e 94 03 10 	call	0x2006	; 0x2006 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	98 2f       	mov	r25, r24
    2aec:	9c 5f       	subi	r25, 0xFC	; 252
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	69 2f       	mov	r22, r25
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9c 01       	movw	r18, r24
    2b00:	2c 5f       	subi	r18, 0xFC	; 252
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <KEYPAD_getPressedKey+0x40>
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	2a 95       	dec	r18
    2b10:	e2 f7       	brpl	.-8      	; 0x2b0a <KEYPAD_getPressedKey+0x3c>
    2b12:	80 95       	com	r24
    2b14:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	69 81       	ldd	r22, Y+1	; 0x01
    2b1a:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2b1e:	1a 82       	std	Y+2, r1	; 0x02
    2b20:	1c c0       	rjmp	.+56     	; 0x2b5a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	6a 81       	ldd	r22, Y+2	; 0x02
    2b26:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <GPIO_readPin>
    2b2a:	88 23       	and	r24, r24
    2b2c:	99 f4       	brne	.+38     	; 0x2b54 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	89 0f       	add	r24, r25
    2b42:	8f 5f       	subi	r24, 0xFF	; 255
    2b44:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	8a 83       	std	Y+2, r24	; 0x02
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	84 30       	cpi	r24, 0x04	; 4
    2b5e:	08 f3       	brcs	.-62     	; 0x2b22 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	84 30       	cpi	r24, 0x04	; 4
    2b6a:	08 f4       	brcc	.+2      	; 0x2b6e <KEYPAD_getPressedKey+0xa0>
    2b6c:	b9 cf       	rjmp	.-142    	; 0x2ae0 <KEYPAD_getPressedKey+0x12>
    2b6e:	b6 cf       	rjmp	.-148    	; 0x2adc <KEYPAD_getPressedKey+0xe>

00002b70 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	3c 83       	std	Y+4, r19	; 0x04
    2b88:	2b 83       	std	Y+3, r18	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	88 30       	cpi	r24, 0x08	; 8
    2b90:	91 05       	cpc	r25, r1
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2b94:	70 c0       	rjmp	.+224    	; 0x2c76 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2b96:	2b 81       	ldd	r18, Y+3	; 0x03
    2b98:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9a:	29 30       	cpi	r18, 0x09	; 9
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	5c f5       	brge	.+86     	; 0x2bf6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	84 30       	cpi	r24, 0x04	; 4
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2baa:	59 c0       	rjmp	.+178    	; 0x2c5e <KEYPAD_4x4_adjustKeyNumber+0xee>
    2bac:	2b 81       	ldd	r18, Y+3	; 0x03
    2bae:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb0:	25 30       	cpi	r18, 0x05	; 5
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	9c f4       	brge	.+38     	; 0x2bdc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	82 30       	cpi	r24, 0x02	; 2
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2bc0:	48 c0       	rjmp	.+144    	; 0x2c52 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc6:	23 30       	cpi	r18, 0x03	; 3
    2bc8:	31 05       	cpc	r19, r1
    2bca:	0c f0       	brlt	.+2      	; 0x2bce <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2bcc:	45 c0       	rjmp	.+138    	; 0x2c58 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2bd8:	39 c0       	rjmp	.+114    	; 0x2c4c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2bda:	67 c0       	rjmp	.+206    	; 0x2caa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bde:	3c 81       	ldd	r19, Y+4	; 0x04
    2be0:	26 30       	cpi	r18, 0x06	; 6
    2be2:	31 05       	cpc	r19, r1
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2be6:	41 c0       	rjmp	.+130    	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	87 30       	cpi	r24, 0x07	; 7
    2bee:	91 05       	cpc	r25, r1
    2bf0:	0c f0       	brlt	.+2      	; 0x2bf4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2bf2:	3e c0       	rjmp	.+124    	; 0x2c70 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2bf4:	37 c0       	rjmp	.+110    	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2bf6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bf8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfa:	2c 30       	cpi	r18, 0x0C	; 12
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2c00:	46 c0       	rjmp	.+140    	; 0x2c8e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	8d 30       	cpi	r24, 0x0D	; 13
    2c08:	91 05       	cpc	r25, r1
    2c0a:	5c f4       	brge	.+22     	; 0x2c22 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c10:	2a 30       	cpi	r18, 0x0A	; 10
    2c12:	31 05       	cpc	r19, r1
    2c14:	b1 f1       	breq	.+108    	; 0x2c82 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	8b 30       	cpi	r24, 0x0B	; 11
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	a4 f5       	brge	.+104    	; 0x2c88 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c20:	2d c0       	rjmp	.+90     	; 0x2c7c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c22:	2b 81       	ldd	r18, Y+3	; 0x03
    2c24:	3c 81       	ldd	r19, Y+4	; 0x04
    2c26:	2e 30       	cpi	r18, 0x0E	; 14
    2c28:	31 05       	cpc	r19, r1
    2c2a:	b9 f1       	breq	.+110    	; 0x2c9a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	8e 30       	cpi	r24, 0x0E	; 14
    2c32:	91 05       	cpc	r25, r1
    2c34:	7c f1       	brlt	.+94     	; 0x2c94 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c36:	2b 81       	ldd	r18, Y+3	; 0x03
    2c38:	3c 81       	ldd	r19, Y+4	; 0x04
    2c3a:	2f 30       	cpi	r18, 0x0F	; 15
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	79 f1       	breq	.+94     	; 0x2c9e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	80 31       	cpi	r24, 0x10	; 16
    2c46:	91 05       	cpc	r25, r1
    2c48:	69 f1       	breq	.+90     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c4a:	2f c0       	rjmp	.+94     	; 0x2caa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2c4c:	87 e0       	ldi	r24, 0x07	; 7
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	2e c0       	rjmp	.+92     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	2b c0       	rjmp	.+86     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2c58:	89 e0       	ldi	r24, 0x09	; 9
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	28 c0       	rjmp	.+80     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2c5e:	85 e2       	ldi	r24, 0x25	; 37
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	25 c0       	rjmp	.+74     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2c64:	84 e0       	ldi	r24, 0x04	; 4
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	22 c0       	rjmp	.+68     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2c6a:	85 e0       	ldi	r24, 0x05	; 5
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2c70:	86 e0       	ldi	r24, 0x06	; 6
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	1c c0       	rjmp	.+56     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c76:	8a e2       	ldi	r24, 0x2A	; 42
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	19 c0       	rjmp	.+50     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	16 c0       	rjmp	.+44     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	13 c0       	rjmp	.+38     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	10 c0       	rjmp	.+32     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2c8e:	8d e2       	ldi	r24, 0x2D	; 45
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	0d c0       	rjmp	.+26     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2c94:	8d e0       	ldi	r24, 0x0D	; 13
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	0a c0       	rjmp	.+20     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2c9a:	19 82       	std	Y+1, r1	; 0x01
    2c9c:	08 c0       	rjmp	.+16     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2c9e:	8d e3       	ldi	r24, 0x3D	; 61
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	05 c0       	rjmp	.+10     	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2ca4:	8b e2       	ldi	r24, 0x2B	; 43
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	62 e0       	ldi	r22, 0x02	; 2
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	6f ef       	ldi	r22, 0xFF	; 255
    2ce8:	0e 94 03 10 	call	0x2006	; 0x2006 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2cec:	88 e3       	ldi	r24, 0x38	; 56
    2cee:	0e 94 82 16 	call	0x2d04	; 0x2d04 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2cf2:	8c e0       	ldi	r24, 0x0C	; 12
    2cf4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	0e 94 82 16 	call	0x2d04	; 0x2d04 <LCD_sendCommand>
}
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	e9 97       	sbiw	r28, 0x39	; 57
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	a0 e8       	ldi	r26, 0x80	; 128
    2d34:	bf e3       	ldi	r27, 0x3F	; 63
    2d36:	8d ab       	std	Y+53, r24	; 0x35
    2d38:	9e ab       	std	Y+54, r25	; 0x36
    2d3a:	af ab       	std	Y+55, r26	; 0x37
    2d3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d40:	7e a9       	ldd	r23, Y+54	; 0x36
    2d42:	8f a9       	ldd	r24, Y+55	; 0x37
    2d44:	98 ad       	ldd	r25, Y+56	; 0x38
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a e7       	ldi	r20, 0x7A	; 122
    2d4c:	53 e4       	ldi	r21, 0x43	; 67
    2d4e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	89 ab       	std	Y+49, r24	; 0x31
    2d58:	9a ab       	std	Y+50, r25	; 0x32
    2d5a:	ab ab       	std	Y+51, r26	; 0x33
    2d5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d60:	7a a9       	ldd	r23, Y+50	; 0x32
    2d62:	8b a9       	ldd	r24, Y+51	; 0x33
    2d64:	9c a9       	ldd	r25, Y+52	; 0x34
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	98 ab       	std	Y+48, r25	; 0x30
    2d7c:	8f a7       	std	Y+47, r24	; 0x2f
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2d80:	69 a9       	ldd	r22, Y+49	; 0x31
    2d82:	7a a9       	ldd	r23, Y+50	; 0x32
    2d84:	8b a9       	ldd	r24, Y+51	; 0x33
    2d86:	9c a9       	ldd	r25, Y+52	; 0x34
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	6d a9       	ldd	r22, Y+53	; 0x35
    2d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	98 ab       	std	Y+48, r25	; 0x30
    2dbe:	8f a7       	std	Y+47, r24	; 0x2f
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <LCD_sendCommand+0xdc>
    2dc2:	89 e1       	ldi	r24, 0x19	; 25
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9e a7       	std	Y+46, r25	; 0x2e
    2dc8:	8d a7       	std	Y+45, r24	; 0x2d
    2dca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <LCD_sendCommand+0xca>
    2dd2:	9e a7       	std	Y+46, r25	; 0x2e
    2dd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	98 ab       	std	Y+48, r25	; 0x30
    2dde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de2:	98 a9       	ldd	r25, Y+48	; 0x30
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <LCD_sendCommand+0xbe>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	69 a9       	ldd	r22, Y+49	; 0x31
    2dec:	7a a9       	ldd	r23, Y+50	; 0x32
    2dee:	8b a9       	ldd	r24, Y+51	; 0x33
    2df0:	9c a9       	ldd	r25, Y+52	; 0x34
    2df2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	98 ab       	std	Y+48, r25	; 0x30
    2dfc:	8f a7       	std	Y+47, r24	; 0x2f
    2dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e00:	98 a9       	ldd	r25, Y+48	; 0x30
    2e02:	9c a7       	std	Y+44, r25	; 0x2c
    2e04:	8b a7       	std	Y+43, r24	; 0x2b
    2e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_sendCommand+0x106>
    2e0e:	9c a7       	std	Y+44, r25	; 0x2c
    2e10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e8       	ldi	r26, 0x80	; 128
    2e22:	bf e3       	ldi	r27, 0x3F	; 63
    2e24:	8f a3       	std	Y+39, r24	; 0x27
    2e26:	98 a7       	std	Y+40, r25	; 0x28
    2e28:	a9 a7       	std	Y+41, r26	; 0x29
    2e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e30:	89 a5       	ldd	r24, Y+41	; 0x29
    2e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	53 e4       	ldi	r21, 0x43	; 67
    2e3c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8b a3       	std	Y+35, r24	; 0x23
    2e46:	9c a3       	std	Y+36, r25	; 0x24
    2e48:	ad a3       	std	Y+37, r26	; 0x25
    2e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e50:	8d a1       	ldd	r24, Y+37	; 0x25
    2e52:	9e a1       	ldd	r25, Y+38	; 0x26
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_sendCommand+0x16a>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9a a3       	std	Y+34, r25	; 0x22
    2e6a:	89 a3       	std	Y+33, r24	; 0x21
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e70:	7c a1       	ldd	r23, Y+36	; 0x24
    2e72:	8d a1       	ldd	r24, Y+37	; 0x25
    2e74:	9e a1       	ldd	r25, Y+38	; 0x26
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6f a1       	ldd	r22, Y+39	; 0x27
    2e88:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9a a3       	std	Y+34, r25	; 0x22
    2eac:	89 a3       	std	Y+33, r24	; 0x21
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_sendCommand+0x1ca>
    2eb0:	89 e1       	ldi	r24, 0x19	; 25
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	98 a3       	std	Y+32, r25	; 0x20
    2eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    2eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eba:	98 a1       	ldd	r25, Y+32	; 0x20
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_sendCommand+0x1b8>
    2ec0:	98 a3       	std	Y+32, r25	; 0x20
    2ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9a a3       	std	Y+34, r25	; 0x22
    2ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_sendCommand+0x1ac>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eda:	7c a1       	ldd	r23, Y+36	; 0x24
    2edc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ede:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9a a3       	std	Y+34, r25	; 0x22
    2eea:	89 a3       	std	Y+33, r24	; 0x21
    2eec:	89 a1       	ldd	r24, Y+33	; 0x21
    2eee:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_sendCommand+0x1f4>
    2efc:	9e 8f       	std	Y+30, r25	; 0x1e
    2efe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	69 ad       	ldd	r22, Y+57	; 0x39
    2f04:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePort>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e8       	ldi	r26, 0x80	; 128
    2f0e:	bf e3       	ldi	r27, 0x3F	; 63
    2f10:	89 8f       	std	Y+25, r24	; 0x19
    2f12:	9a 8f       	std	Y+26, r25	; 0x1a
    2f14:	ab 8f       	std	Y+27, r26	; 0x1b
    2f16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	69 8d       	ldd	r22, Y+25	; 0x19
    2f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a e7       	ldi	r20, 0x7A	; 122
    2f26:	53 e4       	ldi	r21, 0x43	; 67
    2f28:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8d 8b       	std	Y+21, r24	; 0x15
    2f32:	9e 8b       	std	Y+22, r25	; 0x16
    2f34:	af 8b       	std	Y+23, r26	; 0x17
    2f36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f38:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <LCD_sendCommand+0x256>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9c 8b       	std	Y+20, r25	; 0x14
    2f56:	8b 8b       	std	Y+19, r24	; 0x13
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f60:	98 8d       	ldd	r25, Y+24	; 0x18
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	69 8d       	ldd	r22, Y+25	; 0x19
    2f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9c 8b       	std	Y+20, r25	; 0x14
    2f98:	8b 8b       	std	Y+19, r24	; 0x13
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <LCD_sendCommand+0x2b6>
    2f9c:	89 e1       	ldi	r24, 0x19	; 25
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9a 8b       	std	Y+18, r25	; 0x12
    2fa2:	89 8b       	std	Y+17, r24	; 0x11
    2fa4:	89 89       	ldd	r24, Y+17	; 0x11
    2fa6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <LCD_sendCommand+0x2a4>
    2fac:	9a 8b       	std	Y+18, r25	; 0x12
    2fae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9c 8b       	std	Y+20, r25	; 0x14
    2fb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <LCD_sendCommand+0x298>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fca:	98 8d       	ldd	r25, Y+24	; 0x18
    2fcc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fda:	9c 89       	ldd	r25, Y+20	; 0x14
    2fdc:	98 8b       	std	Y+16, r25	; 0x10
    2fde:	8f 87       	std	Y+15, r24	; 0x0f
    2fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe2:	98 89       	ldd	r25, Y+16	; 0x10
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <LCD_sendCommand+0x2e0>
    2fe8:	98 8b       	std	Y+16, r25	; 0x10
    2fea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	62 e0       	ldi	r22, 0x02	; 2
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e8       	ldi	r26, 0x80	; 128
    2ffc:	bf e3       	ldi	r27, 0x3F	; 63
    2ffe:	8b 87       	std	Y+11, r24	; 0x0b
    3000:	9c 87       	std	Y+12, r25	; 0x0c
    3002:	ad 87       	std	Y+13, r26	; 0x0d
    3004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a e7       	ldi	r20, 0x7A	; 122
    3014:	53 e4       	ldi	r21, 0x43	; 67
    3016:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	8f 83       	std	Y+7, r24	; 0x07
    3020:	98 87       	std	Y+8, r25	; 0x08
    3022:	a9 87       	std	Y+9, r26	; 0x09
    3024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3026:	6f 81       	ldd	r22, Y+7	; 0x07
    3028:	78 85       	ldd	r23, Y+8	; 0x08
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <LCD_sendCommand+0x344>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    3048:	6f 81       	ldd	r22, Y+7	; 0x07
    304a:	78 85       	ldd	r23, Y+8	; 0x08
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6b 85       	ldd	r22, Y+11	; 0x0b
    3062:	7c 85       	ldd	r23, Y+12	; 0x0c
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <LCD_sendCommand+0x3a4>
    308a:	89 e1       	ldi	r24, 0x19	; 25
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <LCD_sendCommand+0x392>
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <LCD_sendCommand+0x386>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <LCD_sendCommand+0x3ce>
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    30da:	e9 96       	adiw	r28, 0x39	; 57
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	e9 97       	sbiw	r28, 0x39	; 57
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a0 e8       	ldi	r26, 0x80	; 128
    311c:	bf e3       	ldi	r27, 0x3F	; 63
    311e:	8d ab       	std	Y+53, r24	; 0x35
    3120:	9e ab       	std	Y+54, r25	; 0x36
    3122:	af ab       	std	Y+55, r26	; 0x37
    3124:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3126:	6d a9       	ldd	r22, Y+53	; 0x35
    3128:	7e a9       	ldd	r23, Y+54	; 0x36
    312a:	8f a9       	ldd	r24, Y+55	; 0x37
    312c:	98 ad       	ldd	r25, Y+56	; 0x38
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a e7       	ldi	r20, 0x7A	; 122
    3134:	53 e4       	ldi	r21, 0x43	; 67
    3136:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	89 ab       	std	Y+49, r24	; 0x31
    3140:	9a ab       	std	Y+50, r25	; 0x32
    3142:	ab ab       	std	Y+51, r26	; 0x33
    3144:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3146:	69 a9       	ldd	r22, Y+49	; 0x31
    3148:	7a a9       	ldd	r23, Y+50	; 0x32
    314a:	8b a9       	ldd	r24, Y+51	; 0x33
    314c:	9c a9       	ldd	r25, Y+52	; 0x34
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    315a:	88 23       	and	r24, r24
    315c:	2c f4       	brge	.+10     	; 0x3168 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	98 ab       	std	Y+48, r25	; 0x30
    3164:	8f a7       	std	Y+47, r24	; 0x2f
    3166:	3f c0       	rjmp	.+126    	; 0x31e6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    3168:	69 a9       	ldd	r22, Y+49	; 0x31
    316a:	7a a9       	ldd	r23, Y+50	; 0x32
    316c:	8b a9       	ldd	r24, Y+51	; 0x33
    316e:	9c a9       	ldd	r25, Y+52	; 0x34
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	3f ef       	ldi	r19, 0xFF	; 255
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	57 e4       	ldi	r21, 0x47	; 71
    3178:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    317c:	18 16       	cp	r1, r24
    317e:	4c f5       	brge	.+82     	; 0x31d2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3180:	6d a9       	ldd	r22, Y+53	; 0x35
    3182:	7e a9       	ldd	r23, Y+54	; 0x36
    3184:	8f a9       	ldd	r24, Y+55	; 0x37
    3186:	98 ad       	ldd	r25, Y+56	; 0x38
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e2       	ldi	r20, 0x20	; 32
    318e:	51 e4       	ldi	r21, 0x41	; 65
    3190:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	98 ab       	std	Y+48, r25	; 0x30
    31a6:	8f a7       	std	Y+47, r24	; 0x2f
    31a8:	0f c0       	rjmp	.+30     	; 0x31c8 <LCD_displayCharacter+0xdc>
    31aa:	89 e1       	ldi	r24, 0x19	; 25
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9e a7       	std	Y+46, r25	; 0x2e
    31b0:	8d a7       	std	Y+45, r24	; 0x2d
    31b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <LCD_displayCharacter+0xca>
    31ba:	9e a7       	std	Y+46, r25	; 0x2e
    31bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31be:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c0:	98 a9       	ldd	r25, Y+48	; 0x30
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	98 ab       	std	Y+48, r25	; 0x30
    31c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ca:	98 a9       	ldd	r25, Y+48	; 0x30
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	69 f7       	brne	.-38     	; 0x31aa <LCD_displayCharacter+0xbe>
    31d0:	14 c0       	rjmp	.+40     	; 0x31fa <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d2:	69 a9       	ldd	r22, Y+49	; 0x31
    31d4:	7a a9       	ldd	r23, Y+50	; 0x32
    31d6:	8b a9       	ldd	r24, Y+51	; 0x33
    31d8:	9c a9       	ldd	r25, Y+52	; 0x34
    31da:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	98 ab       	std	Y+48, r25	; 0x30
    31e4:	8f a7       	std	Y+47, r24	; 0x2f
    31e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ea:	9c a7       	std	Y+44, r25	; 0x2c
    31ec:	8b a7       	std	Y+43, r24	; 0x2b
    31ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <LCD_displayCharacter+0x106>
    31f6:	9c a7       	std	Y+44, r25	; 0x2c
    31f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	62 e0       	ldi	r22, 0x02	; 2
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e8       	ldi	r26, 0x80	; 128
    320a:	bf e3       	ldi	r27, 0x3F	; 63
    320c:	8f a3       	std	Y+39, r24	; 0x27
    320e:	98 a7       	std	Y+40, r25	; 0x28
    3210:	a9 a7       	std	Y+41, r26	; 0x29
    3212:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6f a1       	ldd	r22, Y+39	; 0x27
    3216:	78 a5       	ldd	r23, Y+40	; 0x28
    3218:	89 a5       	ldd	r24, Y+41	; 0x29
    321a:	9a a5       	ldd	r25, Y+42	; 0x2a
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	53 e4       	ldi	r21, 0x43	; 67
    3224:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	8b a3       	std	Y+35, r24	; 0x23
    322e:	9c a3       	std	Y+36, r25	; 0x24
    3230:	ad a3       	std	Y+37, r26	; 0x25
    3232:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3234:	6b a1       	ldd	r22, Y+35	; 0x23
    3236:	7c a1       	ldd	r23, Y+36	; 0x24
    3238:	8d a1       	ldd	r24, Y+37	; 0x25
    323a:	9e a1       	ldd	r25, Y+38	; 0x26
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9a a3       	std	Y+34, r25	; 0x22
    3252:	89 a3       	std	Y+33, r24	; 0x21
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    3256:	6b a1       	ldd	r22, Y+35	; 0x23
    3258:	7c a1       	ldd	r23, Y+36	; 0x24
    325a:	8d a1       	ldd	r24, Y+37	; 0x25
    325c:	9e a1       	ldd	r25, Y+38	; 0x26
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6f a1       	ldd	r22, Y+39	; 0x27
    3270:	78 a5       	ldd	r23, Y+40	; 0x28
    3272:	89 a5       	ldd	r24, Y+41	; 0x29
    3274:	9a a5       	ldd	r25, Y+42	; 0x2a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9a a3       	std	Y+34, r25	; 0x22
    3294:	89 a3       	std	Y+33, r24	; 0x21
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <LCD_displayCharacter+0x1ca>
    3298:	89 e1       	ldi	r24, 0x19	; 25
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	98 a3       	std	Y+32, r25	; 0x20
    329e:	8f 8f       	std	Y+31, r24	; 0x1f
    32a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a2:	98 a1       	ldd	r25, Y+32	; 0x20
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <LCD_displayCharacter+0x1b8>
    32a8:	98 a3       	std	Y+32, r25	; 0x20
    32aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	89 a1       	ldd	r24, Y+33	; 0x21
    32ae:	9a a1       	ldd	r25, Y+34	; 0x22
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	89 a1       	ldd	r24, Y+33	; 0x21
    32b8:	9a a1       	ldd	r25, Y+34	; 0x22
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <LCD_displayCharacter+0x1ac>
    32be:	14 c0       	rjmp	.+40     	; 0x32e8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	6b a1       	ldd	r22, Y+35	; 0x23
    32c2:	7c a1       	ldd	r23, Y+36	; 0x24
    32c4:	8d a1       	ldd	r24, Y+37	; 0x25
    32c6:	9e a1       	ldd	r25, Y+38	; 0x26
    32c8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9a a3       	std	Y+34, r25	; 0x22
    32d2:	89 a3       	std	Y+33, r24	; 0x21
    32d4:	89 a1       	ldd	r24, Y+33	; 0x21
    32d6:	9a a1       	ldd	r25, Y+34	; 0x22
    32d8:	9e 8f       	std	Y+30, r25	; 0x1e
    32da:	8d 8f       	std	Y+29, r24	; 0x1d
    32dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <LCD_displayCharacter+0x1f4>
    32e4:	9e 8f       	std	Y+30, r25	; 0x1e
    32e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	69 ad       	ldd	r22, Y+57	; 0x39
    32ec:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePort>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	a0 e8       	ldi	r26, 0x80	; 128
    32f6:	bf e3       	ldi	r27, 0x3F	; 63
    32f8:	89 8f       	std	Y+25, r24	; 0x19
    32fa:	9a 8f       	std	Y+26, r25	; 0x1a
    32fc:	ab 8f       	std	Y+27, r26	; 0x1b
    32fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	69 8d       	ldd	r22, Y+25	; 0x19
    3302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	4a e7       	ldi	r20, 0x7A	; 122
    330e:	53 e4       	ldi	r21, 0x43	; 67
    3310:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	8d 8b       	std	Y+21, r24	; 0x15
    331a:	9e 8b       	std	Y+22, r25	; 0x16
    331c:	af 8b       	std	Y+23, r26	; 0x17
    331e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3320:	6d 89       	ldd	r22, Y+21	; 0x15
    3322:	7e 89       	ldd	r23, Y+22	; 0x16
    3324:	8f 89       	ldd	r24, Y+23	; 0x17
    3326:	98 8d       	ldd	r25, Y+24	; 0x18
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    3334:	88 23       	and	r24, r24
    3336:	2c f4       	brge	.+10     	; 0x3342 <LCD_displayCharacter+0x256>
		__ticks = 1;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9c 8b       	std	Y+20, r25	; 0x14
    333e:	8b 8b       	std	Y+19, r24	; 0x13
    3340:	3f c0       	rjmp	.+126    	; 0x33c0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    3342:	6d 89       	ldd	r22, Y+21	; 0x15
    3344:	7e 89       	ldd	r23, Y+22	; 0x16
    3346:	8f 89       	ldd	r24, Y+23	; 0x17
    3348:	98 8d       	ldd	r25, Y+24	; 0x18
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	4c f5       	brge	.+82     	; 0x33ac <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335a:	69 8d       	ldd	r22, Y+25	; 0x19
    335c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9c 8b       	std	Y+20, r25	; 0x14
    3380:	8b 8b       	std	Y+19, r24	; 0x13
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <LCD_displayCharacter+0x2b6>
    3384:	89 e1       	ldi	r24, 0x19	; 25
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9a 8b       	std	Y+18, r25	; 0x12
    338a:	89 8b       	std	Y+17, r24	; 0x11
    338c:	89 89       	ldd	r24, Y+17	; 0x11
    338e:	9a 89       	ldd	r25, Y+18	; 0x12
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <LCD_displayCharacter+0x2a4>
    3394:	9a 8b       	std	Y+18, r25	; 0x12
    3396:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3398:	8b 89       	ldd	r24, Y+19	; 0x13
    339a:	9c 89       	ldd	r25, Y+20	; 0x14
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	69 f7       	brne	.-38     	; 0x3384 <LCD_displayCharacter+0x298>
    33aa:	14 c0       	rjmp	.+40     	; 0x33d4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ac:	6d 89       	ldd	r22, Y+21	; 0x15
    33ae:	7e 89       	ldd	r23, Y+22	; 0x16
    33b0:	8f 89       	ldd	r24, Y+23	; 0x17
    33b2:	98 8d       	ldd	r25, Y+24	; 0x18
    33b4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9c 8b       	std	Y+20, r25	; 0x14
    33be:	8b 8b       	std	Y+19, r24	; 0x13
    33c0:	8b 89       	ldd	r24, Y+19	; 0x13
    33c2:	9c 89       	ldd	r25, Y+20	; 0x14
    33c4:	98 8b       	std	Y+16, r25	; 0x10
    33c6:	8f 87       	std	Y+15, r24	; 0x0f
    33c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ca:	98 89       	ldd	r25, Y+16	; 0x10
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <LCD_displayCharacter+0x2e0>
    33d0:	98 8b       	std	Y+16, r25	; 0x10
    33d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	62 e0       	ldi	r22, 0x02	; 2
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePin>
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a0 e8       	ldi	r26, 0x80	; 128
    33e4:	bf e3       	ldi	r27, 0x3F	; 63
    33e6:	8b 87       	std	Y+11, r24	; 0x0b
    33e8:	9c 87       	std	Y+12, r25	; 0x0c
    33ea:	ad 87       	std	Y+13, r26	; 0x0d
    33ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	4a e7       	ldi	r20, 0x7A	; 122
    33fc:	53 e4       	ldi	r21, 0x43	; 67
    33fe:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	8f 83       	std	Y+7, r24	; 0x07
    3408:	98 87       	std	Y+8, r25	; 0x08
    340a:	a9 87       	std	Y+9, r26	; 0x09
    340c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    340e:	6f 81       	ldd	r22, Y+7	; 0x07
    3410:	78 85       	ldd	r23, Y+8	; 0x08
    3412:	89 85       	ldd	r24, Y+9	; 0x09
    3414:	9a 85       	ldd	r25, Y+10	; 0x0a
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e8       	ldi	r20, 0x80	; 128
    341c:	5f e3       	ldi	r21, 0x3F	; 63
    341e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ltsf2>
    3422:	88 23       	and	r24, r24
    3424:	2c f4       	brge	.+10     	; 0x3430 <LCD_displayCharacter+0x344>
		__ticks = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8d 83       	std	Y+5, r24	; 0x05
    342e:	3f c0       	rjmp	.+126    	; 0x34ae <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	3f ef       	ldi	r19, 0xFF	; 255
    343c:	4f e7       	ldi	r20, 0x7F	; 127
    343e:	57 e4       	ldi	r21, 0x47	; 71
    3440:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gtsf2>
    3444:	18 16       	cp	r1, r24
    3446:	4c f5       	brge	.+82     	; 0x349a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3448:	6b 85       	ldd	r22, Y+11	; 0x0b
    344a:	7c 85       	ldd	r23, Y+12	; 0x0c
    344c:	8d 85       	ldd	r24, Y+13	; 0x0d
    344e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e2       	ldi	r20, 0x20	; 32
    3456:	51 e4       	ldi	r21, 0x41	; 65
    3458:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
    3470:	0f c0       	rjmp	.+30     	; 0x3490 <LCD_displayCharacter+0x3a4>
    3472:	89 e1       	ldi	r24, 0x19	; 25
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9c 83       	std	Y+4, r25	; 0x04
    3478:	8b 83       	std	Y+3, r24	; 0x03
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	9c 81       	ldd	r25, Y+4	; 0x04
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <LCD_displayCharacter+0x392>
    3482:	9c 83       	std	Y+4, r25	; 0x04
    3484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	69 f7       	brne	.-38     	; 0x3472 <LCD_displayCharacter+0x386>
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	6f 81       	ldd	r22, Y+7	; 0x07
    349c:	78 85       	ldd	r23, Y+8	; 0x08
    349e:	89 85       	ldd	r24, Y+9	; 0x09
    34a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	8d 83       	std	Y+5, r24	; 0x05
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	9e 81       	ldd	r25, Y+6	; 0x06
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <LCD_displayCharacter+0x3ce>
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    34c2:	e9 96       	adiw	r28, 0x39	; 57
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <LCD_displayString+0x6>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	9b 83       	std	Y+3, r25	; 0x03
    34e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34e4:	19 82       	std	Y+1, r1	; 0x01
    34e6:	0e c0       	rjmp	.+28     	; 0x3504 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	80 81       	ld	r24, Z
    34fa:	0e 94 76 18 	call	0x30ec	; 0x30ec <LCD_displayCharacter>
		i++;
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	fc 01       	movw	r30, r24
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	80 81       	ld	r24, Z
    3516:	88 23       	and	r24, r24
    3518:	39 f7       	brne	.-50     	; 0x34e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	00 d0       	rcall	.+0      	; 0x352c <LCD_moveCursor+0x6>
    352c:	00 d0       	rcall	.+0      	; 0x352e <LCD_moveCursor+0x8>
    352e:	0f 92       	push	r0
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	3d 83       	std	Y+5, r19	; 0x05
    3540:	2c 83       	std	Y+4, r18	; 0x04
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	9d 81       	ldd	r25, Y+5	; 0x05
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	91 05       	cpc	r25, r1
    354a:	c1 f0       	breq	.+48     	; 0x357c <LCD_moveCursor+0x56>
    354c:	2c 81       	ldd	r18, Y+4	; 0x04
    354e:	3d 81       	ldd	r19, Y+5	; 0x05
    3550:	22 30       	cpi	r18, 0x02	; 2
    3552:	31 05       	cpc	r19, r1
    3554:	2c f4       	brge	.+10     	; 0x3560 <LCD_moveCursor+0x3a>
    3556:	8c 81       	ldd	r24, Y+4	; 0x04
    3558:	9d 81       	ldd	r25, Y+5	; 0x05
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	61 f0       	breq	.+24     	; 0x3576 <LCD_moveCursor+0x50>
    355e:	19 c0       	rjmp	.+50     	; 0x3592 <LCD_moveCursor+0x6c>
    3560:	2c 81       	ldd	r18, Y+4	; 0x04
    3562:	3d 81       	ldd	r19, Y+5	; 0x05
    3564:	22 30       	cpi	r18, 0x02	; 2
    3566:	31 05       	cpc	r19, r1
    3568:	69 f0       	breq	.+26     	; 0x3584 <LCD_moveCursor+0x5e>
    356a:	8c 81       	ldd	r24, Y+4	; 0x04
    356c:	9d 81       	ldd	r25, Y+5	; 0x05
    356e:	83 30       	cpi	r24, 0x03	; 3
    3570:	91 05       	cpc	r25, r1
    3572:	61 f0       	breq	.+24     	; 0x358c <LCD_moveCursor+0x66>
    3574:	0e c0       	rjmp	.+28     	; 0x3592 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	0b c0       	rjmp	.+22     	; 0x3592 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	80 5c       	subi	r24, 0xC0	; 192
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	07 c0       	rjmp	.+14     	; 0x3592 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	80 5f       	subi	r24, 0xF0	; 240
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	03 c0       	rjmp	.+6      	; 0x3592 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	80 5b       	subi	r24, 0xB0	; 176
    3590:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	80 68       	ori	r24, 0x80	; 128
    3596:	0e 94 82 16 	call	0x2d04	; 0x2d04 <LCD_sendCommand>
}
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <LCD_displayStringRowColumn+0x6>
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <LCD_displayStringRowColumn+0x8>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	6a 83       	std	Y+2, r22	; 0x02
    35ba:	5c 83       	std	Y+4, r21	; 0x04
    35bc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	6a 81       	ldd	r22, Y+2	; 0x02
    35c2:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <LCD_displayString>
}
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <LCD_sendCommand>
}
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	08 95       	ret

000035f0 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/*ISRs for TIMER0 */
ISR(TIMER0_OVF_vect)
{
    35f0:	1f 92       	push	r1
    35f2:	0f 92       	push	r0
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	0f 92       	push	r0
    35f8:	11 24       	eor	r1, r1
    35fa:	2f 93       	push	r18
    35fc:	3f 93       	push	r19
    35fe:	4f 93       	push	r20
    3600:	5f 93       	push	r21
    3602:	6f 93       	push	r22
    3604:	7f 93       	push	r23
    3606:	8f 93       	push	r24
    3608:	9f 93       	push	r25
    360a:	af 93       	push	r26
    360c:	bf 93       	push	r27
    360e:	ef 93       	push	r30
    3610:	ff 93       	push	r31
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    361a:	80 91 7f 02 	lds	r24, 0x027F
    361e:	90 91 80 02 	lds	r25, 0x0280
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	29 f0       	breq	.+10     	; 0x3630 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the interrupt  */
		(*g_TIMER0_callBackPtr)();
    3626:	e0 91 7f 02 	lds	r30, 0x027F
    362a:	f0 91 80 02 	lds	r31, 0x0280
    362e:	09 95       	icall
	}
}
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	ff 91       	pop	r31
    3636:	ef 91       	pop	r30
    3638:	bf 91       	pop	r27
    363a:	af 91       	pop	r26
    363c:	9f 91       	pop	r25
    363e:	8f 91       	pop	r24
    3640:	7f 91       	pop	r23
    3642:	6f 91       	pop	r22
    3644:	5f 91       	pop	r21
    3646:	4f 91       	pop	r20
    3648:	3f 91       	pop	r19
    364a:	2f 91       	pop	r18
    364c:	0f 90       	pop	r0
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	0f 90       	pop	r0
    3652:	1f 90       	pop	r1
    3654:	18 95       	reti

00003656 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    3656:	1f 92       	push	r1
    3658:	0f 92       	push	r0
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	0f 92       	push	r0
    365e:	11 24       	eor	r1, r1
    3660:	2f 93       	push	r18
    3662:	3f 93       	push	r19
    3664:	4f 93       	push	r20
    3666:	5f 93       	push	r21
    3668:	6f 93       	push	r22
    366a:	7f 93       	push	r23
    366c:	8f 93       	push	r24
    366e:	9f 93       	push	r25
    3670:	af 93       	push	r26
    3672:	bf 93       	push	r27
    3674:	ef 93       	push	r30
    3676:	ff 93       	push	r31
    3678:	df 93       	push	r29
    367a:	cf 93       	push	r28
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    3680:	80 91 7f 02 	lds	r24, 0x027F
    3684:	90 91 80 02 	lds	r25, 0x0280
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	29 f0       	breq	.+10     	; 0x3696 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the interrupt  */
		(*g_TIMER0_callBackPtr)();
    368c:	e0 91 7f 02 	lds	r30, 0x027F
    3690:	f0 91 80 02 	lds	r31, 0x0280
    3694:	09 95       	icall
	}
}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	ff 91       	pop	r31
    369c:	ef 91       	pop	r30
    369e:	bf 91       	pop	r27
    36a0:	af 91       	pop	r26
    36a2:	9f 91       	pop	r25
    36a4:	8f 91       	pop	r24
    36a6:	7f 91       	pop	r23
    36a8:	6f 91       	pop	r22
    36aa:	5f 91       	pop	r21
    36ac:	4f 91       	pop	r20
    36ae:	3f 91       	pop	r19
    36b0:	2f 91       	pop	r18
    36b2:	0f 90       	pop	r0
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	0f 90       	pop	r0
    36b8:	1f 90       	pop	r1
    36ba:	18 95       	reti

000036bc <TIMER_init>:
 * 2-setup the timer mode
 * 3-setup the timer prescaler
 * 4-setup the initial value of the timer
 * 5-setup the compare match value if the timer operating in the CTC mode
 */
void TIMER_init(const TIMER_ConfigType* Config_Ptr){
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <TIMER_init+0x6>
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <TIMER_init+0x8>
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	9a 83       	std	Y+2, r25	; 0x02
    36ca:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID){
    36cc:	e9 81       	ldd	r30, Y+1	; 0x01
    36ce:	fa 81       	ldd	r31, Y+2	; 0x02
    36d0:	80 81       	ld	r24, Z
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	09 f0       	breq	.+2      	; 0x36dc <TIMER_init+0x20>
    36da:	4d c0       	rjmp	.+154    	; 0x3776 <TIMER_init+0xba>
	case TIMER_0 :
		/* clear registers of timer0 before accessing any of them */
		TIMER_deinit(Config_Ptr->timer_ID);
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	80 81       	ld	r24, Z
    36e2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <TIMER_deinit>
		TCNT0 = Config_Ptr->initialValue;
    36e6:	a2 e5       	ldi	r26, 0x52	; 82
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e9 81       	ldd	r30, Y+1	; 0x01
    36ec:	fa 81       	ldd	r31, Y+2	; 0x02
    36ee:	83 81       	ldd	r24, Z+3	; 0x03
    36f0:	94 81       	ldd	r25, Z+4	; 0x04
    36f2:	8c 93       	st	X, r24
		/* Configure timer0 control register
		 * 1. Non PWM mode FOC0=1
		 * 2. setup the prescaler
		 */
		SET_BIT(TCCR0,FOC0);
    36f4:	a3 e5       	ldi	r26, 0x53	; 83
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e3 e5       	ldi	r30, 0x53	; 83
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	80 68       	ori	r24, 0x80	; 128
    3700:	8c 93       	st	X, r24
		TCCR0= (TCCR0 & (0xF8)) | Config_Ptr->prescaler; /* set the clock */
    3702:	a3 e5       	ldi	r26, 0x53	; 83
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e3 e5       	ldi	r30, 0x53	; 83
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	98 2f       	mov	r25, r24
    370e:	98 7f       	andi	r25, 0xF8	; 248
    3710:	e9 81       	ldd	r30, Y+1	; 0x01
    3712:	fa 81       	ldd	r31, Y+2	; 0x02
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	89 2b       	or	r24, r25
    3718:	8c 93       	st	X, r24
		switch (Config_Ptr->mode){
    371a:	e9 81       	ldd	r30, Y+1	; 0x01
    371c:	fa 81       	ldd	r31, Y+2	; 0x02
    371e:	81 81       	ldd	r24, Z+1	; 0x01
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	3c 83       	std	Y+4, r19	; 0x04
    3726:	2b 83       	std	Y+3, r18	; 0x03
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	9c 81       	ldd	r25, Y+4	; 0x04
    372c:	00 97       	sbiw	r24, 0x00	; 0
    372e:	31 f0       	breq	.+12     	; 0x373c <TIMER_init+0x80>
    3730:	2b 81       	ldd	r18, Y+3	; 0x03
    3732:	3c 81       	ldd	r19, Y+4	; 0x04
    3734:	21 30       	cpi	r18, 0x01	; 1
    3736:	31 05       	cpc	r19, r1
    3738:	49 f0       	breq	.+18     	; 0x374c <TIMER_init+0x90>
    373a:	1d c0       	rjmp	.+58     	; 0x3776 <TIMER_init+0xba>
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE0); /* Enable Timer0 Overflow Interrupt*/
    373c:	a9 e5       	ldi	r26, 0x59	; 89
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	e9 e5       	ldi	r30, 0x59	; 89
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	81 60       	ori	r24, 0x01	; 1
    3748:	8c 93       	st	X, r24
    374a:	15 c0       	rjmp	.+42     	; 0x3776 <TIMER_init+0xba>
			break;
		case COMPARE_MODE:
			OCR0  = Config_Ptr->compareValue & 0xFF ; /* Set Compare Value
    374c:	ac e5       	ldi	r26, 0x5C	; 92
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e9 81       	ldd	r30, Y+1	; 0x01
    3752:	fa 81       	ldd	r31, Y+2	; 0x02
    3754:	85 81       	ldd	r24, Z+5	; 0x05
    3756:	96 81       	ldd	r25, Z+6	; 0x06
    3758:	8c 93       	st	X, r24
			anding with 0xFF to not exceeding 8-bits */
			SET_BIT(TIMSK,OCIE0); /* Enable Timer0 Compare Interrupt */
    375a:	a9 e5       	ldi	r26, 0x59	; 89
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	e9 e5       	ldi	r30, 0x59	; 89
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	82 60       	ori	r24, 0x02	; 2
    3766:	8c 93       	st	X, r24
			/* Configure timer0 control register for compare mode
			 * 1- CTC Mode WGM01=1 & WGM00=0
			 * 2- OCO is disconnected
			 */
			SET_BIT(TIMSK,WGM01);
    3768:	a9 e5       	ldi	r26, 0x59	; 89
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e9 e5       	ldi	r30, 0x59	; 89
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	88 60       	ori	r24, 0x08	; 8
    3774:	8c 93       	st	X, r24
			break;
		}
	}
}
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <TIMER_setCallBack>:
/* Description :
 *
 * Function to set the Call Back function address.
 *
 */
void TIMER_setCallBack(void(*a_ptr)(void),TIMER_ID timer_num){
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	00 d0       	rcall	.+0      	; 0x378a <TIMER_setCallBack+0x6>
    378a:	0f 92       	push	r0
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	9a 83       	std	Y+2, r25	; 0x02
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch (timer_num){
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	88 2f       	mov	r24, r24
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	31 f4       	brne	.+12     	; 0x37ac <TIMER_setCallBack+0x28>
	case TIMER_0:
		g_TIMER0_callBackPtr = a_ptr;
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	90 93 80 02 	sts	0x0280, r25
    37a8:	80 93 7f 02 	sts	0x027F, r24
		break;
	}
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <TIMER_deinit>:

void TIMER_deinit(TIMER_ID timer_num){
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	00 d0       	rcall	.+0      	; 0x37be <TIMER_deinit+0x6>
    37be:	00 d0       	rcall	.+0      	; 0x37c0 <TIMER_deinit+0x8>
    37c0:	0f 92       	push	r0
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_num){
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	88 2f       	mov	r24, r24
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	c1 f4       	brne	.+48     	; 0x3802 <TIMER_deinit+0x4a>
	case TIMER_0:
		/* clear all timer0  */
		TCCR0 &= 0x00;
    37d2:	e3 e5       	ldi	r30, 0x53	; 83
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	e3 e5       	ldi	r30, 0x53	; 83
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    37de:	e2 e5       	ldi	r30, 0x52	; 82
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	e2 e5       	ldi	r30, 0x52	; 82
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	10 82       	st	Z, r1
		TIMSK &= 0x00;
    37ea:	e9 e5       	ldi	r30, 0x59	; 89
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	e9 e5       	ldi	r30, 0x59	; 89
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	10 82       	st	Z, r1
		OCR0  &= 0x00;
    37f6:	ec e5       	ldi	r30, 0x5C	; 92
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	ec e5       	ldi	r30, 0x5C	; 92
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	10 82       	st	Z, r1
		break;
	}
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <UART_init>:
 * Function responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr){
    3812:	2f 92       	push	r2
    3814:	3f 92       	push	r3
    3816:	4f 92       	push	r4
    3818:	5f 92       	push	r5
    381a:	6f 92       	push	r6
    381c:	7f 92       	push	r7
    381e:	8f 92       	push	r8
    3820:	9f 92       	push	r9
    3822:	af 92       	push	r10
    3824:	bf 92       	push	r11
    3826:	cf 92       	push	r12
    3828:	df 92       	push	r13
    382a:	ef 92       	push	r14
    382c:	ff 92       	push	r15
    382e:	0f 93       	push	r16
    3830:	1f 93       	push	r17
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	e8 97       	sbiw	r28, 0x38	; 56
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	de bf       	out	0x3e, r29	; 62
    3842:	0f be       	out	0x3f, r0	; 63
    3844:	cd bf       	out	0x3d, r28	; 61
    3846:	9b 87       	std	Y+11, r25	; 0x0b
    3848:	8a 87       	std	Y+10, r24	; 0x0a
	/************************** UCSRA Description **************************
	 * Bit 1=U2X
	 *U2X=1 =>> Asynchronous double speed mode
	 *U2X=0 =>> Asynchronous normal mode
	 ***********************************************************************/
	UCSRA=(UCSRA&(0xF2))|((Config_Ptr->mode)<<U2X);
    384a:	ab e2       	ldi	r26, 0x2B	; 43
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	eb e2       	ldi	r30, 0x2B	; 43
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	28 2f       	mov	r18, r24
    3856:	22 7f       	andi	r18, 0xF2	; 242
    3858:	ea 85       	ldd	r30, Y+10	; 0x0a
    385a:	fb 85       	ldd	r31, Y+11	; 0x0b
    385c:	80 81       	ld	r24, Z
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	82 2b       	or	r24, r18
    3868:	8c 93       	st	X, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    386a:	ea e2       	ldi	r30, 0x2A	; 42
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	88 e1       	ldi	r24, 0x18	; 24
    3870:	80 83       	st	Z, r24
	 *UCSZ0=1 ,UCSZ1=1 ,UCSZ2=1 =>> 5-bit
	 * Bit 0: UCPOL, this bit is used for Synchronous mode only
	 *UCPOL=0  =>> Asynchronous mode is used

	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    3872:	a0 e4       	ldi	r26, 0x40	; 64
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e0 e4       	ldi	r30, 0x40	; 64
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	80 68       	ori	r24, 0x80	; 128
    387e:	8c 93       	st	X, r24
	UCSRC =(UCSRC&(0xCF))|((Config_Ptr->parity)<<UPM0);
    3880:	a0 e4       	ldi	r26, 0x40	; 64
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e0 e4       	ldi	r30, 0x40	; 64
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	28 2f       	mov	r18, r24
    388c:	2f 7c       	andi	r18, 0xCF	; 207
    388e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3890:	fb 85       	ldd	r31, Y+11	; 0x0b
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	82 95       	swap	r24
    389a:	92 95       	swap	r25
    389c:	90 7f       	andi	r25, 0xF0	; 240
    389e:	98 27       	eor	r25, r24
    38a0:	80 7f       	andi	r24, 0xF0	; 240
    38a2:	98 27       	eor	r25, r24
    38a4:	82 2b       	or	r24, r18
    38a6:	8c 93       	st	X, r24
	UCSRC =(UCSRC&(0xCF))|((Config_Ptr->stop)<<USBS);
    38a8:	a0 e4       	ldi	r26, 0x40	; 64
    38aa:	b0 e0       	ldi	r27, 0x00	; 0
    38ac:	e0 e4       	ldi	r30, 0x40	; 64
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	80 81       	ld	r24, Z
    38b2:	28 2f       	mov	r18, r24
    38b4:	2f 7c       	andi	r18, 0xCF	; 207
    38b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    38b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    38ba:	83 81       	ldd	r24, Z+3	; 0x03
    38bc:	88 2f       	mov	r24, r24
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	82 2b       	or	r24, r18
    38ce:	8c 93       	st	X, r24
	if(Config_Ptr->size==7){
    38d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    38d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    38d4:	81 81       	ldd	r24, Z+1	; 0x01
    38d6:	87 30       	cpi	r24, 0x07	; 7
    38d8:	c9 f4       	brne	.+50     	; 0x390c <UART_init+0xfa>
		UCSRC =(UCSRC&(0xCF))|(((Config_Ptr->stop)-4)<<UCSZ0);
    38da:	a0 e4       	ldi	r26, 0x40	; 64
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e0 e4       	ldi	r30, 0x40	; 64
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	28 2f       	mov	r18, r24
    38e6:	2f 7c       	andi	r18, 0xCF	; 207
    38e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    38ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    38ec:	83 81       	ldd	r24, Z+3	; 0x03
    38ee:	88 2f       	mov	r24, r24
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	04 97       	sbiw	r24, 0x04	; 4
    38f4:	88 0f       	add	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	82 2b       	or	r24, r18
    38fa:	8c 93       	st	X, r24
		UCSRB |=(1<<UCSZ2);
    38fc:	aa e2       	ldi	r26, 0x2A	; 42
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	ea e2       	ldi	r30, 0x2A	; 42
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	84 60       	ori	r24, 0x04	; 4
    3908:	8c 93       	st	X, r24
    390a:	10 c0       	rjmp	.+32     	; 0x392c <UART_init+0x11a>
	}
	else {
		UCSRC =(UCSRC&(0xCF))|((Config_Ptr->stop)<<UCSZ0);
    390c:	a0 e4       	ldi	r26, 0x40	; 64
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	e0 e4       	ldi	r30, 0x40	; 64
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	28 2f       	mov	r18, r24
    3918:	2f 7c       	andi	r18, 0xCF	; 207
    391a:	ea 85       	ldd	r30, Y+10	; 0x0a
    391c:	fb 85       	ldd	r31, Y+11	; 0x0b
    391e:	83 81       	ldd	r24, Z+3	; 0x03
    3920:	88 2f       	mov	r24, r24
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	82 2b       	or	r24, r18
    392a:	8c 93       	st	X, r24
	}
	switch (Config_Ptr->mode){
    392c:	ea 85       	ldd	r30, Y+10	; 0x0a
    392e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3930:	80 81       	ld	r24, Z
    3932:	28 2f       	mov	r18, r24
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	3d 8b       	std	Y+21, r19	; 0x15
    3938:	2c 8b       	std	Y+20, r18	; 0x14
    393a:	8c 89       	ldd	r24, Y+20	; 0x14
    393c:	9d 89       	ldd	r25, Y+21	; 0x15
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	31 f0       	breq	.+12     	; 0x394e <UART_init+0x13c>
    3942:	ec 89       	ldd	r30, Y+20	; 0x14
    3944:	fd 89       	ldd	r31, Y+21	; 0x15
    3946:	e1 30       	cpi	r30, 0x01	; 1
    3948:	f1 05       	cpc	r31, r1
    394a:	21 f0       	breq	.+8      	; 0x3954 <UART_init+0x142>
    394c:	05 c0       	rjmp	.+10     	; 0x3958 <UART_init+0x146>
	case 0:
		factor=16;
    394e:	80 e1       	ldi	r24, 0x10	; 16
    3950:	89 87       	std	Y+9, r24	; 0x09
    3952:	02 c0       	rjmp	.+4      	; 0x3958 <UART_init+0x146>
		break;
	case 1:
		factor=8;
    3954:	88 e0       	ldi	r24, 0x08	; 8
    3956:	89 87       	std	Y+9, r24	; 0x09
		break;
	}
	boudRatePrescaler=((F_CPU)/(factor*Config_Ptr->boudRate))-1;
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	a8 2e       	mov	r10, r24
    395c:	bb 24       	eor	r11, r11
    395e:	cc 24       	eor	r12, r12
    3960:	dd 24       	eor	r13, r13
    3962:	ee 24       	eor	r14, r14
    3964:	ff 24       	eor	r15, r15
    3966:	87 01       	movw	r16, r14
    3968:	ea 85       	ldd	r30, Y+10	; 0x0a
    396a:	fb 85       	ldd	r31, Y+11	; 0x0b
    396c:	24 80       	ldd	r2, Z+4	; 0x04
    396e:	35 80       	ldd	r3, Z+5	; 0x05
    3970:	46 80       	ldd	r4, Z+6	; 0x06
    3972:	57 80       	ldd	r5, Z+7	; 0x07
    3974:	60 84       	ldd	r6, Z+8	; 0x08
    3976:	71 84       	ldd	r7, Z+9	; 0x09
    3978:	82 84       	ldd	r8, Z+10	; 0x0a
    397a:	93 84       	ldd	r9, Z+11	; 0x0b
    397c:	2a 2d       	mov	r18, r10
    397e:	3b 2d       	mov	r19, r11
    3980:	4c 2d       	mov	r20, r12
    3982:	5d 2d       	mov	r21, r13
    3984:	6e 2d       	mov	r22, r14
    3986:	7f 2d       	mov	r23, r15
    3988:	80 2f       	mov	r24, r16
    398a:	91 2f       	mov	r25, r17
    398c:	a2 2c       	mov	r10, r2
    398e:	b3 2c       	mov	r11, r3
    3990:	c4 2c       	mov	r12, r4
    3992:	d5 2c       	mov	r13, r5
    3994:	e6 2c       	mov	r14, r6
    3996:	f7 2c       	mov	r15, r7
    3998:	08 2d       	mov	r16, r8
    399a:	19 2d       	mov	r17, r9
    399c:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    39a0:	a2 2e       	mov	r10, r18
    39a2:	b3 2e       	mov	r11, r19
    39a4:	c4 2e       	mov	r12, r20
    39a6:	d5 2e       	mov	r13, r21
    39a8:	e6 2e       	mov	r14, r22
    39aa:	f7 2e       	mov	r15, r23
    39ac:	08 2f       	mov	r16, r24
    39ae:	19 2f       	mov	r17, r25
    39b0:	2a 2c       	mov	r2, r10
    39b2:	3b 2c       	mov	r3, r11
    39b4:	4c 2c       	mov	r4, r12
    39b6:	5d 2c       	mov	r5, r13
    39b8:	6e 2c       	mov	r6, r14
    39ba:	7f 2c       	mov	r7, r15
    39bc:	80 2e       	mov	r8, r16
    39be:	91 2e       	mov	r9, r17
    39c0:	20 e4       	ldi	r18, 0x40	; 64
    39c2:	32 e4       	ldi	r19, 0x42	; 66
    39c4:	4f e0       	ldi	r20, 0x0F	; 15
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	a2 2c       	mov	r10, r2
    39d2:	b3 2c       	mov	r11, r3
    39d4:	c4 2c       	mov	r12, r4
    39d6:	d5 2c       	mov	r13, r5
    39d8:	e6 2c       	mov	r14, r6
    39da:	f7 2c       	mov	r15, r7
    39dc:	08 2d       	mov	r16, r8
    39de:	19 2d       	mov	r17, r9
    39e0:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    39e4:	a2 2e       	mov	r10, r18
    39e6:	b3 2e       	mov	r11, r19
    39e8:	c4 2e       	mov	r12, r20
    39ea:	d5 2e       	mov	r13, r21
    39ec:	e6 2e       	mov	r14, r22
    39ee:	f7 2e       	mov	r15, r23
    39f0:	08 2f       	mov	r16, r24
    39f2:	19 2f       	mov	r17, r25
    39f4:	ac 86       	std	Y+12, r10	; 0x0c
    39f6:	bd 86       	std	Y+13, r11	; 0x0d
    39f8:	ce 86       	std	Y+14, r12	; 0x0e
    39fa:	df 86       	std	Y+15, r13	; 0x0f
    39fc:	e8 8a       	std	Y+16, r14	; 0x10
    39fe:	f9 8a       	std	Y+17, r15	; 0x11
    3a00:	0a 8b       	std	Y+18, r16	; 0x12
    3a02:	1b 8b       	std	Y+19, r17	; 0x13
    3a04:	ff ef       	ldi	r31, 0xFF	; 255
    3a06:	fe 8b       	std	Y+22, r31	; 0x16
    3a08:	2f ef       	ldi	r18, 0xFF	; 255
    3a0a:	2f 8b       	std	Y+23, r18	; 0x17
    3a0c:	3f ef       	ldi	r19, 0xFF	; 255
    3a0e:	38 8f       	std	Y+24, r19	; 0x18
    3a10:	8f ef       	ldi	r24, 0xFF	; 255
    3a12:	89 8f       	std	Y+25, r24	; 0x19
    3a14:	9f ef       	ldi	r25, 0xFF	; 255
    3a16:	9a 8f       	std	Y+26, r25	; 0x1a
    3a18:	ef ef       	ldi	r30, 0xFF	; 255
    3a1a:	eb 8f       	std	Y+27, r30	; 0x1b
    3a1c:	ff ef       	ldi	r31, 0xFF	; 255
    3a1e:	fc 8f       	std	Y+28, r31	; 0x1c
    3a20:	2f ef       	ldi	r18, 0xFF	; 255
    3a22:	2d 8f       	std	Y+29, r18	; 0x1d
    3a24:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a26:	8e 89       	ldd	r24, Y+22	; 0x16
    3a28:	38 0f       	add	r19, r24
    3a2a:	3e 8f       	std	Y+30, r19	; 0x1e
    3a2c:	91 e0       	ldi	r25, 0x01	; 1
    3a2e:	9e a3       	std	Y+38, r25	; 0x26
    3a30:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a32:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a34:	ef 17       	cp	r30, r31
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <UART_init+0x228>
    3a38:	1e a2       	std	Y+38, r1	; 0x26
    3a3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a3c:	3f 89       	ldd	r19, Y+23	; 0x17
    3a3e:	23 0f       	add	r18, r19
    3a40:	2f 8f       	std	Y+31, r18	; 0x1f
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	8f a3       	std	Y+39, r24	; 0x27
    3a46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a48:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a4a:	9e 17       	cp	r25, r30
    3a4c:	08 f0       	brcs	.+2      	; 0x3a50 <UART_init+0x23e>
    3a4e:	1f a2       	std	Y+39, r1	; 0x27
    3a50:	fe a1       	ldd	r31, Y+38	; 0x26
    3a52:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a54:	f2 0f       	add	r31, r18
    3a56:	f8 a7       	std	Y+40, r31	; 0x28
    3a58:	31 e0       	ldi	r19, 0x01	; 1
    3a5a:	39 a7       	std	Y+41, r19	; 0x29
    3a5c:	88 a5       	ldd	r24, Y+40	; 0x28
    3a5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a60:	89 17       	cp	r24, r25
    3a62:	08 f0       	brcs	.+2      	; 0x3a66 <UART_init+0x254>
    3a64:	19 a6       	std	Y+41, r1	; 0x29
    3a66:	ef a1       	ldd	r30, Y+39	; 0x27
    3a68:	f9 a5       	ldd	r31, Y+41	; 0x29
    3a6a:	ef 2b       	or	r30, r31
    3a6c:	ef a3       	std	Y+39, r30	; 0x27
    3a6e:	28 a5       	ldd	r18, Y+40	; 0x28
    3a70:	2f 8f       	std	Y+31, r18	; 0x1f
    3a72:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a74:	88 8d       	ldd	r24, Y+24	; 0x18
    3a76:	38 0f       	add	r19, r24
    3a78:	38 a3       	std	Y+32, r19	; 0x20
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	9a a7       	std	Y+42, r25	; 0x2a
    3a7e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a80:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a82:	ef 17       	cp	r30, r31
    3a84:	08 f0       	brcs	.+2      	; 0x3a88 <UART_init+0x276>
    3a86:	1a a6       	std	Y+42, r1	; 0x2a
    3a88:	2f a1       	ldd	r18, Y+39	; 0x27
    3a8a:	38 a1       	ldd	r19, Y+32	; 0x20
    3a8c:	23 0f       	add	r18, r19
    3a8e:	2b a7       	std	Y+43, r18	; 0x2b
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	8c a7       	std	Y+44, r24	; 0x2c
    3a94:	9b a5       	ldd	r25, Y+43	; 0x2b
    3a96:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a98:	9e 17       	cp	r25, r30
    3a9a:	08 f0       	brcs	.+2      	; 0x3a9e <UART_init+0x28c>
    3a9c:	1c a6       	std	Y+44, r1	; 0x2c
    3a9e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3aa0:	2c a5       	ldd	r18, Y+44	; 0x2c
    3aa2:	f2 2b       	or	r31, r18
    3aa4:	fa a7       	std	Y+42, r31	; 0x2a
    3aa6:	3b a5       	ldd	r19, Y+43	; 0x2b
    3aa8:	38 a3       	std	Y+32, r19	; 0x20
    3aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aac:	99 8d       	ldd	r25, Y+25	; 0x19
    3aae:	89 0f       	add	r24, r25
    3ab0:	89 a3       	std	Y+33, r24	; 0x21
    3ab2:	e1 e0       	ldi	r30, 0x01	; 1
    3ab4:	ed a7       	std	Y+45, r30	; 0x2d
    3ab6:	f9 a1       	ldd	r31, Y+33	; 0x21
    3ab8:	2f 85       	ldd	r18, Y+15	; 0x0f
    3aba:	f2 17       	cp	r31, r18
    3abc:	08 f0       	brcs	.+2      	; 0x3ac0 <UART_init+0x2ae>
    3abe:	1d a6       	std	Y+45, r1	; 0x2d
    3ac0:	3a a5       	ldd	r19, Y+42	; 0x2a
    3ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac4:	38 0f       	add	r19, r24
    3ac6:	3e a7       	std	Y+46, r19	; 0x2e
    3ac8:	91 e0       	ldi	r25, 0x01	; 1
    3aca:	9f a7       	std	Y+47, r25	; 0x2f
    3acc:	ee a5       	ldd	r30, Y+46	; 0x2e
    3ace:	f9 a1       	ldd	r31, Y+33	; 0x21
    3ad0:	ef 17       	cp	r30, r31
    3ad2:	08 f0       	brcs	.+2      	; 0x3ad6 <UART_init+0x2c4>
    3ad4:	1f a6       	std	Y+47, r1	; 0x2f
    3ad6:	2d a5       	ldd	r18, Y+45	; 0x2d
    3ad8:	3f a5       	ldd	r19, Y+47	; 0x2f
    3ada:	23 2b       	or	r18, r19
    3adc:	2d a7       	std	Y+45, r18	; 0x2d
    3ade:	8e a5       	ldd	r24, Y+46	; 0x2e
    3ae0:	89 a3       	std	Y+33, r24	; 0x21
    3ae2:	98 89       	ldd	r25, Y+16	; 0x10
    3ae4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3ae6:	9e 0f       	add	r25, r30
    3ae8:	9a a3       	std	Y+34, r25	; 0x22
    3aea:	f1 e0       	ldi	r31, 0x01	; 1
    3aec:	f8 ab       	std	Y+48, r31	; 0x30
    3aee:	2a a1       	ldd	r18, Y+34	; 0x22
    3af0:	38 89       	ldd	r19, Y+16	; 0x10
    3af2:	23 17       	cp	r18, r19
    3af4:	08 f0       	brcs	.+2      	; 0x3af8 <UART_init+0x2e6>
    3af6:	18 aa       	std	Y+48, r1	; 0x30
    3af8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3afa:	9a a1       	ldd	r25, Y+34	; 0x22
    3afc:	89 0f       	add	r24, r25
    3afe:	89 ab       	std	Y+49, r24	; 0x31
    3b00:	e1 e0       	ldi	r30, 0x01	; 1
    3b02:	ea ab       	std	Y+50, r30	; 0x32
    3b04:	f9 a9       	ldd	r31, Y+49	; 0x31
    3b06:	2a a1       	ldd	r18, Y+34	; 0x22
    3b08:	f2 17       	cp	r31, r18
    3b0a:	08 f0       	brcs	.+2      	; 0x3b0e <UART_init+0x2fc>
    3b0c:	1a aa       	std	Y+50, r1	; 0x32
    3b0e:	38 a9       	ldd	r19, Y+48	; 0x30
    3b10:	8a a9       	ldd	r24, Y+50	; 0x32
    3b12:	38 2b       	or	r19, r24
    3b14:	38 ab       	std	Y+48, r19	; 0x30
    3b16:	99 a9       	ldd	r25, Y+49	; 0x31
    3b18:	9a a3       	std	Y+34, r25	; 0x22
    3b1a:	e9 89       	ldd	r30, Y+17	; 0x11
    3b1c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3b1e:	ef 0f       	add	r30, r31
    3b20:	eb a3       	std	Y+35, r30	; 0x23
    3b22:	21 e0       	ldi	r18, 0x01	; 1
    3b24:	2b ab       	std	Y+51, r18	; 0x33
    3b26:	3b a1       	ldd	r19, Y+35	; 0x23
    3b28:	89 89       	ldd	r24, Y+17	; 0x11
    3b2a:	38 17       	cp	r19, r24
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <UART_init+0x31e>
    3b2e:	1b aa       	std	Y+51, r1	; 0x33
    3b30:	98 a9       	ldd	r25, Y+48	; 0x30
    3b32:	eb a1       	ldd	r30, Y+35	; 0x23
    3b34:	9e 0f       	add	r25, r30
    3b36:	9c ab       	std	Y+52, r25	; 0x34
    3b38:	f1 e0       	ldi	r31, 0x01	; 1
    3b3a:	fd ab       	std	Y+53, r31	; 0x35
    3b3c:	2c a9       	ldd	r18, Y+52	; 0x34
    3b3e:	3b a1       	ldd	r19, Y+35	; 0x23
    3b40:	23 17       	cp	r18, r19
    3b42:	08 f0       	brcs	.+2      	; 0x3b46 <UART_init+0x334>
    3b44:	1d aa       	std	Y+53, r1	; 0x35
    3b46:	8b a9       	ldd	r24, Y+51	; 0x33
    3b48:	9d a9       	ldd	r25, Y+53	; 0x35
    3b4a:	89 2b       	or	r24, r25
    3b4c:	8b ab       	std	Y+51, r24	; 0x33
    3b4e:	ec a9       	ldd	r30, Y+52	; 0x34
    3b50:	eb a3       	std	Y+35, r30	; 0x23
    3b52:	fa 89       	ldd	r31, Y+18	; 0x12
    3b54:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3b56:	f2 0f       	add	r31, r18
    3b58:	fc a3       	std	Y+36, r31	; 0x24
    3b5a:	31 e0       	ldi	r19, 0x01	; 1
    3b5c:	3e ab       	std	Y+54, r19	; 0x36
    3b5e:	8c a1       	ldd	r24, Y+36	; 0x24
    3b60:	9a 89       	ldd	r25, Y+18	; 0x12
    3b62:	89 17       	cp	r24, r25
    3b64:	08 f0       	brcs	.+2      	; 0x3b68 <UART_init+0x356>
    3b66:	1e aa       	std	Y+54, r1	; 0x36
    3b68:	eb a9       	ldd	r30, Y+51	; 0x33
    3b6a:	fc a1       	ldd	r31, Y+36	; 0x24
    3b6c:	ef 0f       	add	r30, r31
    3b6e:	ef ab       	std	Y+55, r30	; 0x37
    3b70:	21 e0       	ldi	r18, 0x01	; 1
    3b72:	28 af       	std	Y+56, r18	; 0x38
    3b74:	3f a9       	ldd	r19, Y+55	; 0x37
    3b76:	8c a1       	ldd	r24, Y+36	; 0x24
    3b78:	38 17       	cp	r19, r24
    3b7a:	08 f0       	brcs	.+2      	; 0x3b7e <UART_init+0x36c>
    3b7c:	18 ae       	std	Y+56, r1	; 0x38
    3b7e:	9e a9       	ldd	r25, Y+54	; 0x36
    3b80:	e8 ad       	ldd	r30, Y+56	; 0x38
    3b82:	9e 2b       	or	r25, r30
    3b84:	9e ab       	std	Y+54, r25	; 0x36
    3b86:	ff a9       	ldd	r31, Y+55	; 0x37
    3b88:	fc a3       	std	Y+36, r31	; 0x24
    3b8a:	2b 89       	ldd	r18, Y+19	; 0x13
    3b8c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3b8e:	23 0f       	add	r18, r19
    3b90:	2d a3       	std	Y+37, r18	; 0x25
    3b92:	8e a9       	ldd	r24, Y+54	; 0x36
    3b94:	9d a1       	ldd	r25, Y+37	; 0x25
    3b96:	89 0f       	add	r24, r25
    3b98:	8d a3       	std	Y+37, r24	; 0x25
    3b9a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b9c:	e9 83       	std	Y+1, r30	; 0x01
    3b9e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3ba0:	fa 83       	std	Y+2, r31	; 0x02
    3ba2:	28 a1       	ldd	r18, Y+32	; 0x20
    3ba4:	2b 83       	std	Y+3, r18	; 0x03
    3ba6:	39 a1       	ldd	r19, Y+33	; 0x21
    3ba8:	3c 83       	std	Y+4, r19	; 0x04
    3baa:	8a a1       	ldd	r24, Y+34	; 0x22
    3bac:	8d 83       	std	Y+5, r24	; 0x05
    3bae:	9b a1       	ldd	r25, Y+35	; 0x23
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	ec a1       	ldd	r30, Y+36	; 0x24
    3bb4:	ef 83       	std	Y+7, r30	; 0x07
    3bb6:	fd a1       	ldd	r31, Y+37	; 0x25
    3bb8:	f8 87       	std	Y+8, r31	; 0x08
	UBRRH = boudRatePrescaler>>8;
    3bba:	88 24       	eor	r8, r8
    3bbc:	99 24       	eor	r9, r9
    3bbe:	68 94       	set
    3bc0:	86 f8       	bld	r8, 6
    3bc2:	29 81       	ldd	r18, Y+1	; 0x01
    3bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    3bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    3bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    3bca:	6d 81       	ldd	r22, Y+5	; 0x05
    3bcc:	7e 81       	ldd	r23, Y+6	; 0x06
    3bce:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd0:	98 85       	ldd	r25, Y+8	; 0x08
    3bd2:	08 e0       	ldi	r16, 0x08	; 8
    3bd4:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    3bd8:	a2 2e       	mov	r10, r18
    3bda:	b3 2e       	mov	r11, r19
    3bdc:	c4 2e       	mov	r12, r20
    3bde:	d5 2e       	mov	r13, r21
    3be0:	e6 2e       	mov	r14, r22
    3be2:	f7 2e       	mov	r15, r23
    3be4:	08 2f       	mov	r16, r24
    3be6:	19 2f       	mov	r17, r25
    3be8:	2a 2d       	mov	r18, r10
    3bea:	3b 2d       	mov	r19, r11
    3bec:	4c 2d       	mov	r20, r12
    3bee:	5d 2d       	mov	r21, r13
    3bf0:	6e 2d       	mov	r22, r14
    3bf2:	7f 2d       	mov	r23, r15
    3bf4:	80 2f       	mov	r24, r16
    3bf6:	91 2f       	mov	r25, r17
    3bf8:	82 2f       	mov	r24, r18
    3bfa:	f4 01       	movw	r30, r8
    3bfc:	80 83       	st	Z, r24
	UBRRL = boudRatePrescaler;
    3bfe:	e9 e2       	ldi	r30, 0x29	; 41
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	80 83       	st	Z, r24
}
    3c06:	e8 96       	adiw	r28, 0x38	; 56
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	ff 90       	pop	r15
    3c1c:	ef 90       	pop	r14
    3c1e:	df 90       	pop	r13
    3c20:	cf 90       	pop	r12
    3c22:	bf 90       	pop	r11
    3c24:	af 90       	pop	r10
    3c26:	9f 90       	pop	r9
    3c28:	8f 90       	pop	r8
    3c2a:	7f 90       	pop	r7
    3c2c:	6f 90       	pop	r6
    3c2e:	5f 90       	pop	r5
    3c30:	4f 90       	pop	r4
    3c32:	3f 90       	pop	r3
    3c34:	2f 90       	pop	r2
    3c36:	08 95       	ret

00003c38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    3c38:	df 93       	push	r29
    3c3a:	cf 93       	push	r28
    3c3c:	0f 92       	push	r0
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c44:	eb e2       	ldi	r30, 0x2B	; 43
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	80 72       	andi	r24, 0x20	; 32
    3c50:	90 70       	andi	r25, 0x00	; 0
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	b9 f3       	breq	.-18     	; 0x3c44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3c56:	ec e2       	ldi	r30, 0x2C	; 44
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	80 83       	st	Z, r24
}
    3c5e:	0f 90       	pop	r0
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <UART_receiveByte>:

/*
 * Description :
 * Function which is responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void){
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c6e:	eb e2       	ldi	r30, 0x2B	; 43
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	88 23       	and	r24, r24
    3c76:	dc f7       	brge	.-10     	; 0x3c6e <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3c78:	ec e2       	ldi	r30, 0x2C	; 44
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
}
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <__mulsi3>:
    3c84:	62 9f       	mul	r22, r18
    3c86:	d0 01       	movw	r26, r0
    3c88:	73 9f       	mul	r23, r19
    3c8a:	f0 01       	movw	r30, r0
    3c8c:	82 9f       	mul	r24, r18
    3c8e:	e0 0d       	add	r30, r0
    3c90:	f1 1d       	adc	r31, r1
    3c92:	64 9f       	mul	r22, r20
    3c94:	e0 0d       	add	r30, r0
    3c96:	f1 1d       	adc	r31, r1
    3c98:	92 9f       	mul	r25, r18
    3c9a:	f0 0d       	add	r31, r0
    3c9c:	83 9f       	mul	r24, r19
    3c9e:	f0 0d       	add	r31, r0
    3ca0:	74 9f       	mul	r23, r20
    3ca2:	f0 0d       	add	r31, r0
    3ca4:	65 9f       	mul	r22, r21
    3ca6:	f0 0d       	add	r31, r0
    3ca8:	99 27       	eor	r25, r25
    3caa:	72 9f       	mul	r23, r18
    3cac:	b0 0d       	add	r27, r0
    3cae:	e1 1d       	adc	r30, r1
    3cb0:	f9 1f       	adc	r31, r25
    3cb2:	63 9f       	mul	r22, r19
    3cb4:	b0 0d       	add	r27, r0
    3cb6:	e1 1d       	adc	r30, r1
    3cb8:	f9 1f       	adc	r31, r25
    3cba:	bd 01       	movw	r22, r26
    3cbc:	cf 01       	movw	r24, r30
    3cbe:	11 24       	eor	r1, r1
    3cc0:	08 95       	ret

00003cc2 <__udivmodsi4>:
    3cc2:	a1 e2       	ldi	r26, 0x21	; 33
    3cc4:	1a 2e       	mov	r1, r26
    3cc6:	aa 1b       	sub	r26, r26
    3cc8:	bb 1b       	sub	r27, r27
    3cca:	fd 01       	movw	r30, r26
    3ccc:	0d c0       	rjmp	.+26     	; 0x3ce8 <__udivmodsi4_ep>

00003cce <__udivmodsi4_loop>:
    3cce:	aa 1f       	adc	r26, r26
    3cd0:	bb 1f       	adc	r27, r27
    3cd2:	ee 1f       	adc	r30, r30
    3cd4:	ff 1f       	adc	r31, r31
    3cd6:	a2 17       	cp	r26, r18
    3cd8:	b3 07       	cpc	r27, r19
    3cda:	e4 07       	cpc	r30, r20
    3cdc:	f5 07       	cpc	r31, r21
    3cde:	20 f0       	brcs	.+8      	; 0x3ce8 <__udivmodsi4_ep>
    3ce0:	a2 1b       	sub	r26, r18
    3ce2:	b3 0b       	sbc	r27, r19
    3ce4:	e4 0b       	sbc	r30, r20
    3ce6:	f5 0b       	sbc	r31, r21

00003ce8 <__udivmodsi4_ep>:
    3ce8:	66 1f       	adc	r22, r22
    3cea:	77 1f       	adc	r23, r23
    3cec:	88 1f       	adc	r24, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	1a 94       	dec	r1
    3cf2:	69 f7       	brne	.-38     	; 0x3cce <__udivmodsi4_loop>
    3cf4:	60 95       	com	r22
    3cf6:	70 95       	com	r23
    3cf8:	80 95       	com	r24
    3cfa:	90 95       	com	r25
    3cfc:	9b 01       	movw	r18, r22
    3cfe:	ac 01       	movw	r20, r24
    3d00:	bd 01       	movw	r22, r26
    3d02:	cf 01       	movw	r24, r30
    3d04:	08 95       	ret

00003d06 <__prologue_saves__>:
    3d06:	2f 92       	push	r2
    3d08:	3f 92       	push	r3
    3d0a:	4f 92       	push	r4
    3d0c:	5f 92       	push	r5
    3d0e:	6f 92       	push	r6
    3d10:	7f 92       	push	r7
    3d12:	8f 92       	push	r8
    3d14:	9f 92       	push	r9
    3d16:	af 92       	push	r10
    3d18:	bf 92       	push	r11
    3d1a:	cf 92       	push	r12
    3d1c:	df 92       	push	r13
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	ca 1b       	sub	r28, r26
    3d30:	db 0b       	sbc	r29, r27
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	09 94       	ijmp

00003d3e <__epilogue_restores__>:
    3d3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d40:	39 88       	ldd	r3, Y+17	; 0x11
    3d42:	48 88       	ldd	r4, Y+16	; 0x10
    3d44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d50:	b9 84       	ldd	r11, Y+9	; 0x09
    3d52:	c8 84       	ldd	r12, Y+8	; 0x08
    3d54:	df 80       	ldd	r13, Y+7	; 0x07
    3d56:	ee 80       	ldd	r14, Y+6	; 0x06
    3d58:	fd 80       	ldd	r15, Y+5	; 0x05
    3d5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d60:	b9 81       	ldd	r27, Y+1	; 0x01
    3d62:	ce 0f       	add	r28, r30
    3d64:	d1 1d       	adc	r29, r1
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	ed 01       	movw	r28, r26
    3d72:	08 95       	ret

00003d74 <_exit>:
    3d74:	f8 94       	cli

00003d76 <__stop_program>:
    3d76:	ff cf       	rjmp	.-2      	; 0x3d76 <__stop_program>
